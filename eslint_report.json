[{"filePath":"/app/src_refactored/core/application/common/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/executable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/ports/use-case.interface.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":18,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":18,"endColumn":26,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[743,1129],"text":"type IUseCase<\n  TRequest,\n  TResponse,\n  TError extends Error = DomainError | ApplicationError,\n> = Executable<TRequest, TResponse, TError>"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/events/i-job-event-emitter.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/job-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-agent-executor.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-chat.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-embedding.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-tool-registry.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/abstract-queue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/events/job-event.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-interaction.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-state.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-tool.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/chat.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/generic-agent-executor.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/tool-validation.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent/create-agent.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent/create-agent.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/list-annotations.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/list-annotations.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/remove-annotation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/remove-annotation.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/save-annotation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/save-annotation.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/remove-memory-item.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/remove-memory-item.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/save-memory-item.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/save-memory-item.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-memory-items.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-memory-items.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-similar-memory-items.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-similar-memory-items.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/create-project.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/create-project.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/get-project-details.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/get-project-details.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.use-case.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/create-user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/create-user.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/get-user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/get-user.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.close.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.error-handling.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.initialization.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":4,"column":38,"nodeType":"Literal","endLine":4,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":59,"nodeType":"Literal","endLine":6,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":52,"nodeType":"Literal","endLine":8,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.job-processing.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.lock-renewal.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.spec.helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/worker.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/worker.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/base.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/ports/repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/services/i-logger.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/value-objects/base.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/value-objects/identity.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent-internal-state.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent-persona-template.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-internal-state-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-persona-template-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-max-iterations.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-temperature.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/current-goal.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/current-project-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/general-notes.collection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-backstory.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-goal.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-role.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/tool-names.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/target-agent-role.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/annotation.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/ports/annotation-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/ports/annotation-repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/value-objects/annotation-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/value-objects/annotation-text.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/common/errors.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[464,467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[464,467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job-options.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.serialization.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.state-transitions.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-persistence.mapper.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":5,"column":51,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":5,"endColumn":97},{"ruleId":"import/order","severity":1,"message":"`./job.entity` import should occur before import of `./job.types`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":42,"fix":{"range":[131,375],"text":"import { JobEntity } from './job.entity';\nimport { JobEntityProps } from './job.types';\n// Added JobStatus if needed, JobPersistenceData from here\nimport { JobPersistenceData } from './job.types'; // JobStatus removed as it's not directly used\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// src_refactored/core/domain/job/job-persistence.mapper.ts\n// JobEntity no longer needed directly, JobPersistenceData from .types\nimport { JobEntityProps } from './job.types';\n// Added JobStatus if needed, JobPersistenceData from here\nimport { JobPersistenceData } from './job.types'; // JobStatus removed as it's not directly used\nimport { JobEntity } from './job.entity';\nimport { ActivityHistoryVO } from './value-objects/activity-history.vo';\nimport { JobIdVO } from './value-objects/job-id.vo';\nimport { JobOptionsVO } from './value-objects/job-options.vo';\n// Assuming JobStateMutator is not directly used by the mapper, but by JobEntity internally\n// If JobStateMutator was needed here, its import would be:\n// import { JobStateMutator } from './job-state.mutator';\n\n\nexport class JobPersistenceMapper {\n  public static fromPersistence<P, R>(\n    data: JobPersistenceData<P, R>\n  ): JobEntity<P, R> {\n    const entityProps: JobEntityProps<P, R> = {\n      id: JobIdVO.create(data.id),\n      queueName: data.queueName,\n      name: data.name,\n      payload: data.payload,\n      options: JobOptionsVO.create(data.options),\n      status: data.status,\n      attemptsMade: data.attemptsMade,\n      progress: data.progress,\n      logs: (data.logs || []).map(log => ({\n        ...log,\n        timestamp: new Date(log.timestamp),\n      })),\n      createdAt: new Date(data.createdAt),\n      updatedAt: new Date(data.updatedAt),\n      processedOn: data.processedOn ? new Date(data.processedOn) : undefined,\n      finishedOn: data.finishedOn ? new Date(data.finishedOn) : undefined,\n      delayUntil: data.delayUntil ? new Date(data.delayUntil) : undefined,\n      lockUntil: data.lockUntil ? new Date(data.lockUntil) : undefined,\n      workerId: data.workerId ?? undefined,\n      returnValue: data.returnValue ?? undefined,\n      failedReason: data.failedReason ?? undefined,\n      stacktrace: data.stacktrace ?? undefined,\n    };\n\n    // This is the problematic part due to JobEntity's private constructor.\n    // A proper solution requires JobEntity to have a public static factory for reconstitution.\n    // For example: static reconstitute(props: JobEntityProps<P,R>, history: ActivityHistoryVO, execHistory: ExecutionHistoryEntry[])\n    // Then, this mapper would call:\n    // return JobEntity.reconstitute(entityProps, ActivityHistoryVO.create(), []);\n    //\n    // To satisfy ESLint for now, and acknowledging this is a structural issue\n    // that can't be fully resolved by only changing this mapper file without\n    // changing JobEntity's API (which is out of scope for a pure lint fix):\n    // We will use @ts-expect-error to acknowledge the type error for the private constructor.\n    // The 'any' casts for internal properties are still problematic but harder to avoid\n    // without a proper reconstitution method on JobEntity.\n\n    // @ts-expect-error Private constructor access is intentional here for the mapper.\n    const job = new JobEntity(entityProps, ActivityHistoryVO.create(), []);\n\n    // The following lines that manually set private members are highly discouraged\n    // and are a sign that the JobEntity needs a better way to be reconstituted.\n    // However, to remove the 'any' lint errors specifically on these lines *if* we were forced\n    // to keep this hacky approach, we'd need to cast `job` to `any` before accessing them.\n    // But the primary issue is the private constructor.\n    // (job as any)._conversationHistory = ActivityHistoryVO.create(); // Example of what NOT to do\n    // (job as any)._executionHistory = [];\n    // (job as any)._stateMutator = new JobStateMutator(entityProps);\n\n    return job;\n  }\n\n  public static toPersistence<P, R>(\n    props: JobEntityProps<P, R>\n  ): JobPersistenceData<P, R> {\n    return {\n      id: props.id.value,\n      queueName: props.queueName,\n      name: props.name,\n      payload: props.payload,\n      // IJobOptions\n      options: props.options.toPersistence(),\n      // Added top-level priority\n      priority: props.options.priority,\n      status: props.status,\n      attemptsMade: props.attemptsMade,\n      progress: props.progress,\n      logs: props.logs.map((logEntry) => ({\n        ...logEntry,\n        timestamp: logEntry.timestamp.getTime(),\n      })),\n      // map Date to number\n      createdAt: props.createdAt.getTime(),\n      // map Date to number\n      updatedAt: props.updatedAt.getTime(),\n      // priority is part of options, so props.options.priority is correct if toPersistence() on JobOptionsVO includes it.\n      // JobPersistenceData from job.entity.ts does not list priority, but DrizzleJobRepository uses it.\n      // This suggests JobPersistenceData might need an update or there's an intermediate type.\n      // For now, matching JobEntity's original toPersistence structure which returned it directly.\n      // However, JobPersistenceData as imported from job.entity.ts does *not* include priority.\n      // Let's assume options.toPersistence() handles priority correctly if it's part of IJobOptions.\n      // The original JobEntity.toPersistence() explicitly added `priority: this.props.options.priority`.\n      // This implies that `JobPersistenceData` type itself might be incomplete or used inconsistently.\n      // The `DrizzleJobRepository` uses `job.toPersistence()` which includes this priority.\n      // Let's stick to what JobEntity was doing for the direct return object structure for now.\n      // This part of the type definition might need revisiting across files.\n\n      processedOn: props.processedOn ? props.processedOn.getTime() : undefined,\n      finishedOn: props.finishedOn ? props.finishedOn.getTime() : undefined,\n      delayUntil: props.delayUntil ? props.delayUntil.getTime() : undefined,\n      lockUntil: props.lockUntil ? props.lockUntil.getTime() : undefined,\n      workerId: props.workerId ?? undefined,\n      returnValue: props.returnValue ?? undefined,\n      failedReason: props.failedReason ?? undefined,\n      stacktrace: props.stacktrace ?? undefined,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-processing.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-state.mutator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/utils/calculate-backoff.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/__tests__/job-id.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/__tests__/job-options.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/activity-history-entry.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/activity-history.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-options.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/llm-provider-config.entity.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/ports/llm-provider-config-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-api-key.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/memory-item.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/ports/memory-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/ports/memory-repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-content.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-embedding.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-source.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-tags.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/ports/project-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/project.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-description.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/ports/source-code-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/source-code.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-docs-path.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-path.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/ports/user-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/user.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-avatar.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-email.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-nickname.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-username.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/file-system.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/job-queue.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/llm-adapter.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/llm-adapter.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/version-control-system.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/tools/tool.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/examples/queue-usage-example.final.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/adapters/llm/mock-llm.adapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/ioc/inversify.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/ioc/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/drizzle.client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.clean.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.countByStatus.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.findNextJobs.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.getByStatus.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.locking.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.remove.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.save-findById.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.stalled.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.update.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/drizzle-job.mapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/drizzle-job.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/repositories/project.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/schema/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/schema/jobs.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/test-db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent-internal-state.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent-persona-template.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/annotation.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/llm-provider-config.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/memory.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/project.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/source-code.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/user.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-add.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-admin.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-get.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-maintenance.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-updates.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.extendJobLock.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobEntity' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.extendJobLock.spec.ts\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  afterEach,\n} from \"vitest\";\n\nimport { JobEntity } from \"../../../../core/domain/job/job.entity\"; // JobStatus removed\nimport { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\";\nimport { type IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\";\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\n\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>;\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  queueService = new QueueService(queueName, jobRepository, defaultJobOpts);\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - extendJobLock\", () => {\n  let jobId: JobIdVO;\n  const workerId = \"worker-extend\";\n  const lockDurationMs = 15000;\n\n  beforeEach(async () => { // This beforeEach is specific to this describe block\n    jobId = JobIdVO.create();\n    const jobOptions: IJobOptions = { jobId: jobId.value };\n    await queueService.add(\n      \"extend-me\",\n      { email: \"extend@example.com\" },\n      jobOptions\n    );\n    const activeJob = await queueService.fetchNextJobAndLock(workerId, 10000);\n    expect(activeJob).not.toBeNull();\n    expect(activeJob!.getProps().id.value).toBe(jobId.value);\n  });\n\n  it(\"should extend lock for an active job owned by the worker\", async () => {\n    const jobBeforeExtend = await jobRepository.findById(jobId);\n    expect(jobBeforeExtend).not.toBeNull();\n    const originalLockUntil = jobBeforeExtend!.getProps().lockUntil;\n\n    await queueService.extendJobLock(jobId, workerId, lockDurationMs);\n\n    const jobAfterExtend = await jobRepository.findById(jobId);\n    expect(jobAfterExtend).not.toBeNull();\n    const jobAfterExtendProps = jobAfterExtend!.getProps();\n    expect(jobAfterExtendProps.lockUntil!.getTime()).toBeGreaterThan(\n      originalLockUntil!.getTime()\n    );\n    expect(jobAfterExtendProps.lockUntil!.getTime()).toBeGreaterThanOrEqual(\n      Date.now() + lockDurationMs - 2000\n    );\n    expect(queueService.emit).toHaveBeenCalledWith(\n      \"job.lock.extended\",\n      expect.objectContaining({ id: jobId })\n    );\n  });\n\n  it(\"should accept string job ID for extendJobLock\", async () => {\n    await queueService.extendJobLock(jobId.value, workerId, lockDurationMs);\n    const jobAfterExtend = await jobRepository.findById(jobId);\n    expect(jobAfterExtend).not.toBeNull();\n    expect(jobAfterExtend!.getProps().lockUntil!.getTime()).toBeGreaterThanOrEqual(\n      Date.now() + lockDurationMs - 2000\n    );\n  });\n\n  it(\"should not extend lock if job not found\", async () => {\n    const nonExistentJobId = JobIdVO.create();\n    await queueService.extendJobLock(\n      nonExistentJobId,\n      workerId,\n      lockDurationMs\n    );\n    expect(queueService.emit).not.toHaveBeenCalledWith(\n      \"job.lock.extended\",\n      expect.anything()\n    );\n  });\n\n  it(\"should not extend lock if workerId does not match\", async () => {\n    const jobBeforeExtend = await jobRepository.findById(jobId);\n    expect(jobBeforeExtend).not.toBeNull();\n    const originalLockTime = jobBeforeExtend!.getProps().lockUntil!.getTime();\n\n    await queueService.extendJobLock(jobId, \"other-worker\", lockDurationMs);\n    const jobAfterExtend = await jobRepository.findById(jobId);\n    expect(jobAfterExtend!.getProps().lockUntil!.getTime()).toEqual(originalLockTime);\n  });\n\n  it(\"should not extend lock if job is not active\", async () => {\n    await queueService.markJobAsCompleted(jobId, workerId, {\n      status: \"done\",\n    });\n    const jobCompleted = await jobRepository.findById(jobId);\n    expect(jobCompleted).not.toBeNull();\n    const lockTimeBefore = jobCompleted!.getProps().lockUntil;\n\n    await queueService.extendJobLock(jobId, workerId, lockDurationMs);\n    const jobAfterAttemptedExtend = await jobRepository.findById(jobId);\n    expect(jobAfterAttemptedExtend).not.toBeNull();\n    if (lockTimeBefore) {\n      expect(jobAfterAttemptedExtend!.getProps().lockUntil!.getTime()).toEqual(\n        lockTimeBefore.getTime()\n      );\n    } else {\n      expect(jobAfterAttemptedExtend!.getProps().lockUntil).toBeNull();\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.fetchNextJobAndLock.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobEntity' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.fetchNextJobAndLock.spec.ts\n// import { randomUUID } from \"node:crypto\"; // Not needed in this specific file\n\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  // afterAll, // Removed as unused\n} from \"vitest\";\n\nimport { JobEntity, JobStatus } from \"../../../../core/domain/job/job.entity\";\n// import { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\"; // Removed as unused\nimport { type IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\";\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\n\n// Newline for import group separation\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>;\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  queueService = new QueueService(queueName, jobRepository, defaultJobOpts);\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - fetchNextJobAndLock\", () => {\n  const workerId = \"worker-007\";\n  const lockDurationMs = 30000;\n\n  it(\"should return null if no jobs are available in DB\", async () => {\n    const job = await queueService.fetchNextJobAndLock(\n      workerId,\n      lockDurationMs\n    );\n    expect(job).toBeNull();\n  });\n\n  it(\"should return null if lock cannot be acquired (e.g. another worker got it)\", async () => {\n    await queueService.add(\"job1\", {\n      email: \"e1@example.com\",\n    });\n\n    const fetchedAndLockedJob = await queueService.fetchNextJobAndLock(\n      workerId,\n      lockDurationMs\n    );\n    expect(fetchedAndLockedJob).not.toBeNull();\n\n    const anotherAttempt = await queueService.fetchNextJobAndLock(\n      \"worker-008\",\n      lockDurationMs\n    );\n    expect(anotherAttempt).toBeNull();\n  });\n\n  it(\"should fetch, lock, update job to active in DB, and emit event\", async () => {\n    const addedJob = await queueService.add(\"job2\", {\n      email: \"e2@example.com\",\n    });\n\n    const fetchedJob = await queueService.fetchNextJobAndLock(\n      workerId,\n      lockDurationMs\n    );\n\n    expect(fetchedJob).not.toBeNull();\n    const fetchedJobProps = fetchedJob!.getProps();\n    const addedJobProps = addedJob.getProps();\n    expect(fetchedJobProps.id.value).toBe(addedJobProps.id.value);\n    expect(fetchedJobProps.status).toBe(JobStatus.ACTIVE);\n    expect(fetchedJobProps.workerId).toBe(workerId);\n    expect(fetchedJobProps.lockUntil).toBeInstanceOf(Date);\n    expect(fetchedJobProps.lockUntil!.getTime()).toBeGreaterThan(Date.now());\n    expect(fetchedJobProps.processedOn).toBeInstanceOf(Date);\n    expect(fetchedJobProps.attemptsMade).toBe(1);\n    expect(queueService.emit).toHaveBeenCalledWith(\"job.active\", fetchedJob);\n\n    const jobFromDb = await jobRepository.findById(addedJobProps.id);\n    expect(jobFromDb).not.toBeNull();\n    const jobFromDbProps = jobFromDb!.getProps();\n    expect(jobFromDbProps.status).toBe(JobStatus.ACTIVE);\n    expect(jobFromDbProps.workerId).toBe(workerId);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.markJobAsCompleted.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobEntity' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.markJobAsCompleted.spec.ts\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  afterEach,\n} from \"vitest\";\n\nimport { JobEntity, JobStatus } from \"../../../../core/domain/job/job.entity\";\nimport { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\";\nimport { type IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\";\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\n\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>; // Payload type for add\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  // Provide payload type for QueueService instantiation\n  queueService = new QueueService<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts\n  );\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - markJobAsCompleted\", () => {\n  let jobIdForCompleteTest: JobIdVO;\n  const workerIdForCompleteTest = \"worker-complete\";\n  const resultForCompleteTest = { status: \"Email Sent!\" };\n\n  beforeEach(async () => { // This beforeEach is specific to this describe block\n    jobIdForCompleteTest = JobIdVO.create();\n    await queueService.add(\n      \"complete-me\",\n      { email: \"c@ex.com\" }, // Payload matches QueueService type\n      { jobId: jobIdForCompleteTest.value }\n    );\n    const activeJob = await queueService.fetchNextJobAndLock(\n      workerIdForCompleteTest,\n      10000\n    );\n    if (!activeJob || activeJob.getProps().id.value !== jobIdForCompleteTest.value)\n      throw new Error(\"Setup failed for markJobAsCompleted\");\n  });\n\n  it(\"should mark job as completed, update DB, and emit event\", async () => {\n    const jobInstanceFromWorker =\n      await jobRepository.findById(jobIdForCompleteTest);\n    expect(jobInstanceFromWorker).not.toBeNull();\n    jobInstanceFromWorker!.addLog(\n      \"Log from worker before completion\",\n      \"INFO\"\n    );\n\n    await queueService.markJobAsCompleted(\n      jobIdForCompleteTest,\n      workerIdForCompleteTest,\n      resultForCompleteTest,\n      jobInstanceFromWorker!\n    );\n\n    const jobFromDb = await jobRepository.findById(jobIdForCompleteTest);\n    expect(jobFromDb).not.toBeNull();\n    const jobFromDbProps = jobFromDb!.getProps();\n    expect(jobFromDbProps.status).toBe(JobStatus.COMPLETED);\n    expect(jobFromDbProps.returnValue).toEqual(resultForCompleteTest);\n    expect(jobFromDbProps.finishedOn).toBeInstanceOf(Date);\n    expect(\n      jobFromDbProps.logs.some(\n        (log) => log.message === \"Log from worker before completion\"\n      )\n    ).toBe(false);\n\n    expect(queueService.emit).toHaveBeenCalledWith(\n      \"job.completed\",\n      expect.objectContaining({\n        id: jobIdForCompleteTest,\n        status: JobStatus.COMPLETED,\n      })\n    );\n  });\n\n  it(\"should accept string job ID for markJobAsCompleted\", async () => {\n    await queueService.markJobAsCompleted(\n      jobIdForCompleteTest.value,\n      workerIdForCompleteTest,\n      resultForCompleteTest\n    );\n    const jobFromDb = await jobRepository.findById(jobIdForCompleteTest);\n    expect(jobFromDb).not.toBeNull();\n    expect(jobFromDb!.getProps().status).toBe(JobStatus.COMPLETED);\n  });\n\n  it(\"should not complete if job not found in DB\", async () => {\n    const nonExistentJobId = JobIdVO.create();\n    await queueService.markJobAsCompleted(\n      nonExistentJobId,\n      workerIdForCompleteTest,\n      resultForCompleteTest\n    );\n    expect(queueService.emit).not.toHaveBeenCalledWith(\n      \"job.completed\",\n      expect.objectContaining({ id: nonExistentJobId })\n    );\n  });\n\n  it(\"should not complete if workerId does not match job in DB\", async () => {\n    await queueService.markJobAsCompleted(\n      jobIdForCompleteTest,\n      \"another-worker\",\n      resultForCompleteTest\n    );\n    const jobFromDb = await jobRepository.findById(jobIdForCompleteTest);\n    expect(jobFromDb).not.toBeNull();\n    expect(jobFromDb!.getProps().status).toBe(JobStatus.ACTIVE);\n    expect(queueService.emit).not.toHaveBeenCalledWith(\n      \"job.completed\",\n      expect.anything()\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.markJobAsFailed.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobEntity' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.markJobAsFailed.spec.ts\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  afterEach,\n} from \"vitest\";\n\nimport { JobEntity, JobStatus } from \"../../../../core/domain/job/job.entity\";\nimport { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\";\nimport { type IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\";\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\n\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>; // Payload type for add\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  queueService = new QueueService<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts\n  );\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - markJobAsFailed\", () => {\n  let jobToFailPermanentlyId: JobIdVO;\n  let jobToRetryId: JobIdVO;\n  const workerIdForFailTest = \"worker-fail\";\n  const errorForFailTest = new Error(\"Test Job Failed\");\n\n  beforeEach(async () => { // This beforeEach is specific to this describe block\n    jobToFailPermanentlyId = JobIdVO.create();\n    await queueService.add(\n      \"fail-me-permanently\",\n      { email: \"f-perm@ex.com\" },\n      { jobId: jobToFailPermanentlyId.value, attempts: 1 }\n    );\n    const activeJobPerm = await queueService.fetchNextJobAndLock(\n      workerIdForFailTest,\n      10000\n    );\n    if (\n      !activeJobPerm ||\n      activeJobPerm.getProps().id.value !== jobToFailPermanentlyId.value\n    )\n      throw new Error(\"Setup failed for jobToFailPermanently\");\n\n    jobToRetryId = JobIdVO.create();\n    await queueService.add(\n      \"fail-me-with-retries\",\n      { email: \"f-retry@ex.com\" },\n      {\n        jobId: jobToRetryId.value,\n        attempts: 3,\n        backoff: { type: \"exponential\", delay: 100 },\n      }\n    );\n    const activeJobRetry = await queueService.fetchNextJobAndLock(\n      workerIdForFailTest,\n      10000\n    );\n    if (!activeJobRetry || activeJobRetry.getProps().id.value !== jobToRetryId.value)\n      throw new Error(\"Setup failed for jobToRetry\");\n  });\n\n  it(\"should mark job as FAILED if attempts exhausted, update DB, and emit event\", async () => {\n    await queueService.markJobAsFailed(\n      jobToFailPermanentlyId,\n      workerIdForFailTest,\n      errorForFailTest\n    );\n\n    const jobFromDb = await jobRepository.findById(jobToFailPermanentlyId);\n    expect(jobFromDb).not.toBeNull();\n    const jobFromDbProps = jobFromDb!.getProps();\n    expect(jobFromDbProps.status).toBe(JobStatus.FAILED);\n    expect(jobFromDbProps.failedReason).toBe(errorForFailTest.message);\n    expect(jobFromDbProps.finishedOn).toBeInstanceOf(Date);\n    expect(queueService.emit).toHaveBeenCalledWith(\n      \"job.failed\",\n      expect.objectContaining({\n        id: jobToFailPermanentlyId,\n        status: JobStatus.FAILED,\n      })\n    );\n  });\n\n  it(\"should mark job as DELAYED if retries are pending, update DB, and emit event\", async () => {\n    await queueService.markJobAsFailed(\n      jobToRetryId,\n      workerIdForFailTest,\n      errorForFailTest\n    );\n\n    const jobFromDb = await jobRepository.findById(jobToRetryId);\n    expect(jobFromDb).not.toBeNull();\n    const jobFromDbProps = jobFromDb!.getProps();\n    expect(jobFromDbProps.status).toBe(JobStatus.DELAYED);\n    expect(jobFromDbProps.failedReason).toBe(errorForFailTest.message);\n    expect(jobFromDbProps.delayUntil).toBeInstanceOf(Date);\n    expect(jobFromDbProps.delayUntil!.getTime()).toBeGreaterThanOrEqual(\n      Date.now() + 90\n    );\n    expect(jobFromDbProps.attemptsMade).toBe(1);\n    expect(queueService.emit).toHaveBeenCalledWith(\n      \"job.failed\",\n      expect.objectContaining({ id: jobToRetryId, status: JobStatus.DELAYED })\n    );\n  });\n\n  it(\"should accept string job ID for markJobAsFailed\", async () => {\n    await queueService.markJobAsFailed(\n      jobToFailPermanentlyId.value,\n      workerIdForFailTest,\n      errorForFailTest\n    );\n    const jobFromDb = await jobRepository.findById(jobToFailPermanentlyId);\n    expect(jobFromDb).not.toBeNull();\n    expect(jobFromDb!.getProps().status).toBe(JobStatus.FAILED);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/test-db.helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/drizzle-queue.facade.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/job-processing.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/queue-maintenance.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/queue-service-core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/services/logger/console-logger.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/services/tool-registry/tool-registry.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/tools/file-system.tool.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/agent-instance.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/dm.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/llm-config.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/persona-template.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/user.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-chat.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/agent-instance.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/dm.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/llm-config.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/persona-template.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/user.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/agent-instance.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/dm.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/llm-config.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/persona-template.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/project.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/user.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/preload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/dashboard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/docs/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/members/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/appearance/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/$configId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/profile/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/dm/$conversationId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(public)/onboarding/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/__root.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/MarkdownRenderer.tsx","messages":[],"suppressedMessages":[{"ruleId":"jsx-a11y/anchor-has-content","severity":2,"message":"Anchors must have content and the content must be accessible by a screen reader.","line":56,"column":57,"nodeType":"JSXOpeningElement","endLine":56,"endColumn":121,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/layout/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/pagination.tsx","messages":[],"suppressedMessages":[{"ruleId":"jsx-a11y/anchor-has-content","severity":2,"message":"Anchors must have content and the content must be accessible by a screen reader.","line":53,"column":5,"nodeType":"JSXOpeningElement","endLine":65,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentLLMConfigSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentPersonaTemplateSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentTemperatureSliderField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatWindow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ConversationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ApiKeyField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/BaseUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ConfigNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ProviderSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/InitialConfigStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/OnboardingWizard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/PersonaList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/WelcomeStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaBackstoryField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaGoalField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaRoleField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaToolsField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/fields/ProjectDescriptionField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/fields/ProjectNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ParticipantListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectContextSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectParticipantsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserProfileForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/AvatarUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/DisplayNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/EmailDisplayField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/layout/UserSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/layout/UserSidebarParts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcMutation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcSubscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/useIPC.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IElectronIPC' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/main.tsx","messages":[],"suppressedMessages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/ui/routeTree.gen'.","line":8,"column":27,"nodeType":"Literal","endLine":8,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.service.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4792,4795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4792,4795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8168,8171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8168,8171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-channels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-chat.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-project.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/result.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/types/entities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]