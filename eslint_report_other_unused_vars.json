[{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/llm-provider-config.entity.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":44,"column":47,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":44,"endColumn":100}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/llm-provider-config/llm-provider-config.entity.ts\nimport { LLMApiKey } from './value-objects/llm-api-key.vo';\nimport { LLMProviderConfigId } from './value-objects/llm-provider-config-id.vo';\nimport { LLMProviderConfigName } from './value-objects/llm-provider-config-name.vo';\nimport { LLMProviderId } from './value-objects/llm-provider-id.vo';\n\n// Interface for optional base URL, could be a VO too if complex validation needed.\nexport class BaseUrl {\n  private readonly _value: string;\n  private constructor(value: string) {\n    try {\n      new URL(value);\n    } catch (error) {\n      throw new Error(`Invalid Base URL format: ${ (error instanceof Error) ? error.message : String(error) }`);\n    }\n    this._value = value;\n  }\n  public static create(value: string): BaseUrl {\n    return new BaseUrl(value);\n  }\n  public value(): string {\n    return this._value;\n  }\n  public equals(other?: BaseUrl): boolean {\n    return other instanceof BaseUrl && this._value === other._value;\n  }\n}\n\n\ninterface LLMProviderConfigProps {\n  id: LLMProviderConfigId;\n  name: LLMProviderConfigName;\n  providerId: LLMProviderId;\n  apiKey: LLMApiKey;\n  baseUrl?: BaseUrl;\n}\n\nexport class LLMProviderConfig {\n  private readonly _id: LLMProviderConfigId;\n  private readonly props: Readonly<Omit<LLMProviderConfigProps, 'id'>>;\n\n  private constructor(props: LLMProviderConfigProps) {\n    this._id = props.id;\n    const { id: _id, ...otherProps } = props; // Rename destructured 'id' to '_id' as it's not used\n    this.props = Object.freeze(otherProps);\n  }\n\n  public static create(props: {\n    id?: LLMProviderConfigId;\n    name: LLMProviderConfigName;\n    providerId: LLMProviderId;\n    apiKey: LLMApiKey;\n    baseUrl?: BaseUrl;\n  }): LLMProviderConfig {\n    const configId = props.id || LLMProviderConfigId.generate();\n    return new LLMProviderConfig({\n      id: configId,\n      name: props.name,\n      providerId: props.providerId,\n      apiKey: props.apiKey,\n      baseUrl: props.baseUrl,\n    });\n  }\n\n  public id(): LLMProviderConfigId {\n    return this._id;\n  }\n\n  public name(): LLMProviderConfigName {\n    return this.props.name;\n  }\n\n  public providerId(): LLMProviderId {\n    return this.props.providerId;\n  }\n\n  public apiKeyForAdapter(): string {\n    return this.props.apiKey.forHeader();\n  }\n\n  public baseUrl(): BaseUrl | undefined {\n    return this.props.baseUrl;\n  }\n\n  // public otherOptions(): Record<string, any> {\n  //   return { ...this.props.otherOptions }; // Return a copy\n  // }\n\n  public equals(other?: LLMProviderConfig): boolean {\n    if (other === null || other === undefined) {\n      return false;\n    }\n    if (!(other instanceof LLMProviderConfig)) {\n      return false;\n    }\n    return this._id.equals(other._id);\n  }\n\n  // Example update methods, returning new instances\n  public changeName(newName: LLMProviderConfigName): LLMProviderConfig {\n    return new LLMProviderConfig({\n      ...this.props,\n      id: this._id,\n      name: newName,\n      // updatedAt: new Date(),\n    });\n  }\n\n  public changeApiKey(newApiKey: LLMApiKey): LLMProviderConfig {\n    return new LLMProviderConfig({\n      ...this.props,\n      id: this._id,\n      apiKey: newApiKey,\n      // updatedAt: new Date(),\n    });\n  }\n\n  public changeBaseUrl(newBaseUrl?: BaseUrl): LLMProviderConfig {\n    return new LLMProviderConfig({\n      ...this.props,\n      id: this._id,\n      baseUrl: newBaseUrl,\n      // updatedAt: new Date(),\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/useIPC.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IElectronIPC' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]