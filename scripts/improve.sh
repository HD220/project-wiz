#!/bin/bash

# Script para an√°lise cont√≠nua de DX e Clean Code com Claude CLI
# Autor: Assistente Claude
# Data: $(date)

set -euo pipefail

# Configura√ß√µes
CLAUDE_CLI="claude"
OUTPUT_FORMAT="json"
SLEEP_BETWEEN_RETRIES=30
TARGET_HEALTH=90

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Prompt base para an√°lise de DX e Clean Code
BASE_PROMPT='Voc√™ √© um especialista em Developer Experience (DX) e Clean Code. Sua tarefa √© EXECUTAR melhorias no c√≥digo e reportar o que foi feito.

IMPORTANTE: Responda SEMPRE em formato JSON v√°lido seguindo exatamente esta estrutura, SOMENTE o JSON SEM QUAISQUER OUTROS DADOS ELE VAI SER DIRETAMENTE PARSEADO:

{
  "health": 85,
  "actions_taken": [
    {
      "type": "refactor",
      "file": "src/utils/helper.js",
      "description": "Renomeei fun√ß√£o getData() para fetchUserData() para melhor clareza",
      "impact": "Melhorou legibilidade e sem√¢ntica"
    },
    {
      "type": "cleanup",
      "file": "src/components/Button.jsx",
      "description": "Removi c√≥digo duplicado e criei hook customizado useButtonState()",
      "impact": "Reduziu complexidade e aumentou reutiliza√ß√£o"
    },
    {
      "type": "documentation",
      "file": "README.md",
      "description": "Adicionei se√ß√£o de instala√ß√£o e exemplos de uso",
      "impact": "Melhorou DX para novos desenvolvedores"
    }
  ],
  "files_modified": [
    "src/utils/helper.js",
    "src/components/Button.jsx", 
    "README.md",
    "package.json"
  ],
  "improvements_made": {
    "dx_improvements": 3,
    "clean_code_improvements": 5,
    "performance_improvements": 2,
    "documentation_improvements": 1
  },
  "next_steps": [
    "Implementar testes unit√°rios para as fun√ß√µes refatoradas",
    "Configurar ESLint com regras mais restritivas",
    "Adicionar TypeScript para maior seguran√ßa de tipos"
  ]
}

INSTRU√á√ïES PRINCIPAIS:

1. **EXECUTE as melhorias** - N√£o apenas analise, mas FA√áA as modifica√ß√µes necess√°rias nos arquivos
2. **REPORTE o que foi feito** - Liste todas as a√ß√µes executadas com detalhes
3. **CALCULE a nova sa√∫de** - Ap√≥s as melhorias, determine o novo score de sa√∫de (0-100)
4. **INDIQUE pr√≥ximos passos** - O que ainda precisa ser feito para atingir 90%

FOCO DE A√á√ÉO:

1. **Developer Experience (DX):**
   - EXECUTE: Melhore setup, documenta√ß√£o, scripts de build
   - EXECUTE: Adicione/melhore ferramentas de desenvolvimento
   - EXECUTE: Implemente melhor debugging e logs
   - EXECUTE: Crie/melhore testes automatizados

2. **Clean Code:**
   - EXECUTE: Renomeie vari√°veis/fun√ß√µes para nomes mais claros
   - EXECUTE: Refatore fun√ß√µes grandes em fun√ß√µes menores
   - EXECUTE: Remova c√≥digo duplicado
   - EXECUTE: Aplique princ√≠pios SOLID

3. **Maintainability:**
   - EXECUTE: Reorganize estrutura de pastas
   - EXECUTE: Separe responsabilidades
   - EXECUTE: Crie componentes reutiliz√°veis
   - EXECUTE: Adicione coment√°rios onde necess√°rio

IMPORTANTE: 
- Analise TODOS os arquivos do diret√≥rio atual recursivamente (ignore node_modules, .git, etc.)
- EXECUTE as melhorias mais impactantes primeiro
- O campo "health" deve refletir a sa√∫de AP√ìS suas modifica√ß√µes
- Continue executando melhorias at√© atingir 90% de sa√∫de

EXECUTE AS MELHORIAS AGORA:'

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" >&2
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

# Fun√ß√£o para verificar se o Claude CLI est√° dispon√≠vel
check_claude_cli() {
    if ! command -v "$CLAUDE_CLI" &> /dev/null; then
        error "Claude CLI n√£o encontrado. Certifique-se de que est√° instalado e no PATH."
        exit 1
    fi
}

# Fun√ß√£o para extrair a sa√∫de do c√≥digo do resultado JSON
extract_health_score() {
    local json_content="$1"
    
    # Tenta extrair o score de sa√∫de do JSON
    local health_score=$(echo "$json_content" | jq -r '
        .health // 
        .score // 
        .health_score // 
        .saude // 
        .pontuacao // 
        (.content | try fromjson | .health) // 
        (.content | try fromjson | .score) //
        0
    ' 2>/dev/null || echo "0")
    
    # Remove % se presente e converte para n√∫mero
    health_score=$(echo "$health_score" | sed 's/%//g' | grep -oE '[0-9]+' | head -1)
    
    echo "${health_score:-0}"
}

# Fun√ß√£o para verificar se o JSON √© v√°lido
validate_json() {
    local json_content="$1"
    
    if echo "$json_content" | jq empty 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Fun√ß√£o para verificar se houve erro de cota
check_quota_error() {
    local content="$1"
    
    if [[ "$content" == *"quota"* ]] || [[ "$content" == *"rate limit"* ]] || [[ "$content" == *"exceeded"* ]] || [[ "$content" == *"too many requests"* ]]; then
        return 0
    fi
    
    # Tenta verificar no JSON estruturado
    local error_msg=$(echo "$content" | jq -r '.error // .message // ""' 2>/dev/null)
    
    if [[ "$error_msg" == *"quota"* ]] || [[ "$error_msg" == *"rate limit"* ]] || [[ "$error_msg" == *"exceeded"* ]]; then
        return 0
    fi
    
    return 1
}

# Fun√ß√£o para construir o prompt com o resultado anterior
build_prompt() {
    local iteration="$1"
    local previous_result="$2"
    
    local prompt="$BASE_PROMPT"
    
    # Se n√£o √© a primeira itera√ß√£o, adiciona o resultado anterior
    if [[ $iteration -gt 1 && -n "$previous_result" ]]; then
        prompt="$prompt

RESULTADO DA ITERA√á√ÉO ANTERIOR:
$previous_result

Com base no que j√° foi executado, continue implementando as melhorias restantes. Foque nos pr√≥ximos passos indicados anteriormente.

EXECUTE novas melhorias e reporte:
1. O que voc√™ FEZ nesta itera√ß√£o
2. Quais arquivos foram MODIFICADOS
3. Qual a nova sa√∫de do c√≥digo ap√≥s suas modifica√ß√µes
4. Pr√≥ximos passos para atingir 90%

IMPORTANTE: Mantenha o formato JSON exato. O campo 'health' deve refletir a sa√∫de AP√ìS suas modifica√ß√µes nesta itera√ß√£o."
    fi
    
    echo "$prompt"
}

# Fun√ß√£o para executar o Claude CLI
execute_claude() {
    local prompt="$1"
    
    # Executa o Claude CLI e captura o resultado
    local result
    result=$(echo "$prompt" | "$CLAUDE_CLI" --dangerously-skip-permissions --output-format json -p 2>&1)
    
    local exit_code=$?
    
    # Retorna o resultado via stdout
    echo "$result"
    
    return $exit_code
}

# Fun√ß√£o para exibir resumo da an√°lise
show_analysis_summary() {
    local json_content="$1"
    
    if ! validate_json "$json_content"; then
        return
    fi
    
    local health=$(echo "$json_content" | jq -r '.health // 0' 2>/dev/null)
    local actions_count=$(echo "$json_content" | jq -r '.actions_taken | length' 2>/dev/null)
    local files_modified=$(echo "$json_content" | jq -r '.files_modified | length' 2>/dev/null)
    local dx_improvements=$(echo "$json_content" | jq -r '.improvements_made.dx_improvements // 0' 2>/dev/null)
    local clean_code_improvements=$(echo "$json_content" | jq -r '.improvements_made.clean_code_improvements // 0' 2>/dev/null)
    
    log "üìä Resumo da Execu√ß√£o:"
    log "   Sa√∫de Atual: ${health}%"
    log "   A√ß√µes Executadas: ${actions_count}"
    log "   Arquivos Modificados: ${files_modified}"
    log "   Melhorias DX: ${dx_improvements}"
    log "   Melhorias Clean Code: ${clean_code_improvements}"
}

# Fun√ß√£o principal
main() {
    log "Iniciando an√°lise cont√≠nua de DX e Clean Code"
    log "Diret√≥rio atual: $(pwd)"
    
    # Verifica√ß√µes iniciais
    check_claude_cli
    
    # Verifica se jq est√° dispon√≠vel
    if ! command -v jq &> /dev/null; then
        error "jq n√£o encontrado. Instale com: sudo apt-get install jq (Ubuntu/Debian) ou brew install jq (macOS)"
        exit 1
    fi
    
    local iteration=1
    local previous_result=""
    local current_health=0
    local claude_result=""
    
    while true; do
        log "=== ITERA√á√ÉO $iteration ==="
        
        # Constr√≥i o prompt
        local prompt=$(build_prompt "$iteration" "$previous_result")
        
        log "Executando an√°lise..."
        
        # Executa o Claude CLI
        if claude_result=$(execute_claude "$prompt"); then
            # Verifica se o JSON √© v√°lido
            if validate_json "$claude_result"; then
                success "An√°lise executada com sucesso"
                
                # Exibe resumo da an√°lise
                show_analysis_summary "$claude_result"
                
                # Extrai o score de sa√∫de
                current_health=$(extract_health_score "$claude_result")
                log "Sa√∫de atual do c√≥digo: ${current_health}%"
                
                # Verifica se atingiu o objetivo
                if [[ $current_health -ge $TARGET_HEALTH ]]; then
                    success "Meta de sa√∫de atingida! (${current_health}% >= ${TARGET_HEALTH}%)"
                    success "An√°lise conclu√≠da ap√≥s $iteration itera√ß√µes"
                    
                    # Exibe pr√≥ximos passos se dispon√≠veis
                    local next_steps=$(echo "$claude_result" | jq -r '.next_steps[]?' 2>/dev/null)
                    if [[ -n "$next_steps" ]]; then
                        log "üöÄ Pr√≥ximos passos recomendados:"
                        echo "$next_steps" | while read -r step; do
                            log "   ‚Ä¢ $step"
                        done
                    fi
                    
                    # Exibe o resultado final
                    echo "$claude_result"
                    break
                fi
                
                # Prepara resultado para pr√≥xima itera√ß√£o
                previous_result="$claude_result"
                
            else
                error "Resposta inv√°lida do Claude (JSON malformado)"
                log "Conte√∫do recebido:"
                echo "$claude_result" >&2
                
                # Verifica se √© erro de cota
                if check_quota_error "$claude_result"; then
                    warning "Erro de cota detectado. Aguardando ${SLEEP_BETWEEN_RETRIES}s antes de tentar novamente..."
                    sleep $SLEEP_BETWEEN_RETRIES
                    continue
                else
                    error "Erro cr√≠tico: JSON malformado sem ser erro de cota"
                    break
                fi
            fi
            
        else
            error "Erro na execu√ß√£o do Claude CLI"
            
            # Verifica se √© erro de cota
            if check_quota_error "$claude_result"; then
                warning "Erro de cota detectado. Aguardando ${SLEEP_BETWEEN_RETRIES}s antes de tentar novamente..."
                sleep $SLEEP_BETWEEN_RETRIES
                continue
            else
                error "Erro cr√≠tico na execu√ß√£o do Claude CLI. Detalhes:"
                echo "$claude_result" >&2
                break
            fi
        fi
        
        iteration=$((iteration + 1))
        
        # Pausa entre itera√ß√µes
        log "Aguardando antes da pr√≥xima itera√ß√£o..."
        sleep 5
    done
    
    # Resultado final
    if [[ $current_health -ge $TARGET_HEALTH ]]; then
        success "üéâ An√°lise conclu√≠da com sucesso!"
        success "Sa√∫de final do c√≥digo: ${current_health}%"
    else
        warning "An√°lise finalizada devido a erro cr√≠tico"
        warning "Sa√∫de final do c√≥digo: ${current_health}%"
    fi
}

# Fun√ß√£o para limpeza em caso de interrup√ß√£o
cleanup() {
    log "Script interrompido."
    exit 1
}

# Captura sinais de interrup√ß√£o
trap cleanup INT TERM

# Executa fun√ß√£o principal
main "$@"
