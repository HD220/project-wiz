#!/bin/bash
set -x
REPORT_FILE="report.txt"

if [ ! -f "$REPORT_FILE" ]; then
    echo "Error: $REPORT_FILE not found."
    exit 1
fi

echo "#!/bin/bash"
echo "# This script was generated by Gemini to help you automate fixing errors."
echo "# It will call the 'gemini' CLI for each error reported in $REPORT_FILE."
echo "# BE AWARE: The '--yolo' flag means Gemini will attempt to fix issues autonomously."
echo "# Review each command before execution if you are unsure."
echo ""

declare -A file_errors_map # Associative array to store errors per file
current_file=""

# Read the report file line by line
while IFS= read -r line; do
    # Skip empty lines or lines that are not error reports (e.g., summary lines)
    if [[ -z "$line" || "$line" == *"problems"* || "$line" == "> project-wiz@"* ]]; then
        continue
    fi

    # Check if the line starts with the project path, indicating a new file
    if [[ "$line" == "/mnt/d/Documentos/Pessoal/Github/project-wiz"* ]]; then
        current_file="$line"
        # Initialize the entry for the new file if it doesn't exist
        if [[ -z "${file_errors_map[$current_file]}" ]]; then
            file_errors_map[$current_file]=""
        fi
    else
        # This is an error detail line
        # Extract the error message (everything after the type, e.g., 'error' or 'warning')
        # Example:   21:7  error  React Hook "useChannelMessagesById" is called conditionally. ...
        error_message=$(echo "$line" | awk '{$1=$2=$3=""; print $0}' | sed 's/^[ 	]*//')

        if [[ -n "$current_file" && -n "$error_message" ]]; then
            # Append the error message to the current file's entry in the map
            # Add a separator if there are already errors for this file
            if [[ -n "${file_errors_map[$current_file]}" ]]; then
                file_errors_map[$current_file]+="; "
            fi
            file_errors_map[$current_file]+="$error_message"
        fi
    fi
done


# Now iterate through the map and generate a command for each file
for file_path in "${!file_errors_map[@]}"; do
    errors_for_file="${file_errors_map[$file_path]}"
    if [[ -n "$errors_for_file" ]]; then
        # Escape double quotes in the error messages for the prompt        # Replace " with \" so that it's correctly passed as part of the string to gemini -p        escaped_errors=$(echo "$errors_for_file" | sed 's/"/\"/g')        # Convert absolute path to relative path with @ prefix
        relative_file_path=$(echo "$file_path" | sed 's|/mnt/d/Documentos/Pessoal/Github/project-wiz/|@|')
        echo "gemini --yolo --model=gemini-2.5-flash -p \"Corrija os seguintes problemas no arquivo $relative_file_path: $escaped_errors. Seguindo as diretrizes de @CLAUDE.md, N√ÉO EXECUTE NENHUM COMANDO DO NODEJS(LINT,TYPE-CHECK,ETC.)\" &"
    fi
done
