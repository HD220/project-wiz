#!/bin/bash

REPORT_FILE="report.txt"

if [ ! -f "$REPORT_FILE" ]; then
    echo "Error: $REPORT_FILE not found."
    exit 1
fi

echo "#!/bin/bash"
echo "# This script was generated by Gemini to help you automate fixing errors."
echo "# It will call the 'gemini' CLI for each error reported in $REPORT_FILE."
echo "# BE AWARE: The '--yolo' flag means Gemini will attempt to fix issues autonomously."
echo "# Review each command before execution if you are unsure."
echo ""

current_file=""

# Read the report file line by line
while IFS= read -r line; do
    # Skip empty lines or lines that are not error reports (e.g., summary lines)
    if [[ -z "$line" || "$line" == *"problems"* || "$line" == "> project-wiz@"* ]]; then
        continue
    fi

    # Check if the line starts with the project path, indicating a new file
    if [[ "$line" == "/mnt/d/Documentos/Pessoal/Github/project-wiz/"* ]]; then
        current_file="$line"
    else
        # This is an error detail line
        # Extract the error message (everything after the type, e.g., 'error' or 'warning')
        # Example:   21:7  error  React Hook "useChannelMessagesById" is called conditionally. ...
        error_message=$(echo "$line" | awk '{$1=$2=$3=""; print $0}' | sed 's/^[ 	]*//')

        if [[ -n "$current_file" && -n "$error_message" ]]; then
            # Construct the gemini CLI command
            # Escape double quotes in the error message for the prompt
            escaped_error_message=$(echo "$error_message" | sed 's/"/\"/g')
            # Convert absolute path to relative path with @ prefix
            relative_file_path=$(echo "$current_file" | sed 's|/mnt/d/Documentos/Pessoal/Github/project-wiz/|@|')
            echo "gemini --yolo --model=gemini-2.5-flash -p \"Corrija o erro em $relative_file_path: $escaped_error_message, seguindo as diretrizes de @CLAUDE.md,, N√ÉO EXECUTE NENHUM COMANDO DO NODEJS(LINT,TYPE-CHECK,ETC.)\""
        fi
        # Do not reset current_file here, as multiple errors can be associated with one file.
        # It will be overwritten when a new file path is encountered.
    fi
done < "$REPORT_FILE"
