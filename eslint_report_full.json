[{"filePath":"/app/src_refactored/core/application/common/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/executable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/ports/use-case.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/events/i-job-event-emitter.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/job-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-agent-executor.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-chat.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-embedding.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-tool-registry.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/abstract-queue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/events/job-event.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-interaction.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-state.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-tool.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/chat.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/generic-agent-executor.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/tool-validation.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent/create-agent.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent/create-agent.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/list-annotations.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/list-annotations.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/remove-annotation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/remove-annotation.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/save-annotation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/save-annotation.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/remove-memory-item.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/remove-memory-item.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/save-memory-item.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/save-memory-item.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-memory-items.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-memory-items.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-similar-memory-items.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-similar-memory-items.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/create-project.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/create-project.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/get-project-details.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/get-project-details.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/create-user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/create-user.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/get-user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/get-user.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.close.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../../../../infrastructure/queue/drizzle/queue-service-core` import should occur after import of `../../../../infrastructure/queue/drizzle/queue-maintenance.service`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":96,"fix":{"range":[897,1415],"text":"// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n"}}],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":34,"nodeType":"Literal","endLine":12,"endColumn":95,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":38,"nodeType":"Literal","endLine":14,"endColumn":103,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":16,"column":41,"nodeType":"Literal","endLine":16,"endColumn":109,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { randomUUID } from 'node:crypto';\n\nimport { vi, describe, it, expect, beforeEach, afterEach, Mock } from 'vitest';\n\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleJobRepository } from '../../../../infrastructure/persistence/drizzle/job/drizzle-job.repository';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { TestDb, createTestDbClient, runMigrations } from '../../../../infrastructure/queue/drizzle/__tests__/test-db.helper';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleQueueFacade as QueueService } from '../../../../infrastructure/queue/drizzle/drizzle-queue.facade';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { JobEntity, JobStatus } from '../../../domain/job/job.entity';\nimport { IJobOptions } from '../../../domain/job/value-objects/job-options.vo';\nimport { WorkerService } from '../worker.service';\n\nimport {\n  TestPayload, TestResult, QUEUE_NAME,\n  defaultWorkerOptions, defaultJobOptions\n} from './worker.service.spec.helper';\n\ndescribe('WorkerService - Close', () => {\n  let db: TestDb;\n  let jobRepository: DrizzleJobRepository;\n  let queueService: QueueService<TestPayload, TestResult>;\n  let workerService: WorkerService<TestPayload, TestResult>;\n  let mockProcessor: Mock<[JobEntity<TestPayload, TestResult>], Promise<TestResult>>;\n\n  const addJobToQueue = async (name: string, payload: TestPayload, opts?: Partial<IJobOptions>) => {\n    const jobOptionsWithId = { ...defaultJobOptions, ...opts };\n    if (payload.id && !jobOptionsWithId.jobId) jobOptionsWithId.jobId = payload.id;\n    return queueService.add(name, payload, jobOptionsWithId);\n  };\n\n  beforeEach(async () => {\n    vi.useFakeTimers();\n    db = createTestDbClient({ memory: true });\n    await runMigrations(db);\n    jobRepository = new DrizzleJobRepository(db);\n\n    // Instantiate dependencies for DrizzleQueueFacade\n    const coreService = new QueueServiceCore<TestPayload, TestResult>(\n      QUEUE_NAME,\n      jobRepository,\n      defaultJobOptions\n    );\n    // DrizzleQueueFacade (queueService) will be the emitter for its sub-services if they are designed to accept one.\n    // However, JobProcessingService and QueueMaintenanceService constructors expect an EventEmitter.\n    // QueueServiceCore itself is an EventEmitter. We can use it.\n    const processingService = new JobProcessingService<TestPayload, TestResult>(\n      jobRepository,\n      coreService, // Use coreService as the EventEmitter\n      QUEUE_NAME\n    );\n    const maintenanceService = new QueueMaintenanceService<TestPayload, TestResult>(\n      jobRepository,\n      coreService, // Use coreService as the EventEmitter\n      QUEUE_NAME\n    );\n\n    queueService = new QueueService<TestPayload, TestResult>(\n      QUEUE_NAME,\n      jobRepository,\n      defaultJobOptions,\n      coreService,\n      processingService,\n      maintenanceService\n    );\n\n    mockProcessor = vi.fn();\n    workerService = new WorkerService(queueService, mockProcessor, defaultWorkerOptions);\n    vi.spyOn(workerService, 'emit');\n  });\n\n  afterEach(async () => {\n    if (!workerService.isClosed) await workerService.close();\n    if (queueService) await queueService.close();\n    vi.clearAllMocks(); vi.restoreAllMocks(); vi.useRealTimers();\n    if (db && typeof db.close === 'function') db.close();\n  });\n\n  it('should stop polling, wait for active jobs, and shutdown gracefully', async () => {\n    const jobPayload = { data: 'closing job 1', id: randomUUID() };\n    const addedJob = await addJobToQueue('close-graceful-job', jobPayload);\n    let jobPromiseResolve: (value: TestResult) => void;\n    const jobProcessingPromise = new Promise<TestResult>(resolve => { jobPromiseResolve = resolve; });\n    mockProcessor.mockImplementationOnce(() => jobProcessingPromise);\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    const closePromise = workerService.close();\n    jobPromiseResolve!({ status: `closed_${addedJob.payload.id}`, id: addedJob.payload.id });\n    await closePromise;\n    expect((await jobRepository.findById(addedJob.id))!.status).toBe(JobStatus.COMPLETED);\n    expect(workerService.isClosed).toBe(true);\n  });\n\n  it('should close immediately if no active jobs', async () => {\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    await workerService.close();\n    expect(workerService.isClosed).toBe(true);\n  }, 7000);\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.error-handling.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../../../../infrastructure/queue/drizzle/queue-service-core` import should occur after import of `../../../../infrastructure/queue/drizzle/queue-maintenance.service`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":96,"fix":{"range":[897,1415],"text":"// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n"}}],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":34,"nodeType":"Literal","endLine":12,"endColumn":95,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":38,"nodeType":"Literal","endLine":14,"endColumn":103,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":16,"column":41,"nodeType":"Literal","endLine":16,"endColumn":109,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { randomUUID } from 'node:crypto';\n\nimport { vi, describe, it, expect, beforeEach, afterEach, Mock } from 'vitest';\n\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleJobRepository } from '../../../../infrastructure/persistence/drizzle/job/drizzle-job.repository';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { TestDb, createTestDbClient, runMigrations } from '../../../../infrastructure/queue/drizzle/__tests__/test-db.helper';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleQueueFacade as QueueService } from '../../../../infrastructure/queue/drizzle/drizzle-queue.facade';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { JobEntity, JobStatus } from '../../../domain/job/job.entity';\nimport { IJobOptions } from '../../../domain/job/value-objects/job-options.vo';\nimport { WorkerService } from '../worker.service';\n\nimport {\n  TestPayload, TestResult, QUEUE_NAME,\n  defaultWorkerOptions, defaultJobOptions\n} from './worker.service.spec.helper';\n\ndescribe('WorkerService - Error Handling and Edge Cases', () => {\n  let db: TestDb;\n  let jobRepository: DrizzleJobRepository;\n  let queueService: QueueService<TestPayload, TestResult>;\n  let workerService: WorkerService<TestPayload, TestResult>;\n  let mockProcessor: Mock<[JobEntity<TestPayload, TestResult>], Promise<TestResult>>;\n\n  const addJobToQueue = async (name: string, payload: TestPayload, opts?: Partial<IJobOptions>) => {\n    const jobOptionsWithId = { ...defaultJobOptions, ...opts };\n    if (payload.id && !jobOptionsWithId.jobId) jobOptionsWithId.jobId = payload.id;\n    return queueService.add(name, payload, jobOptionsWithId);\n  };\n\n  beforeEach(async () => {\n    vi.useFakeTimers();\n    db = createTestDbClient({ memory: true });\n    await runMigrations(db);\n    jobRepository = new DrizzleJobRepository(db);\n\n    const coreService = new QueueServiceCore<TestPayload, TestResult>(\n      QUEUE_NAME,\n      jobRepository,\n      defaultJobOptions\n    );\n    const processingService = new JobProcessingService<TestPayload, TestResult>(\n      jobRepository,\n      coreService, // Use coreService as the EventEmitter\n      QUEUE_NAME\n    );\n    const maintenanceService = new QueueMaintenanceService<TestPayload, TestResult>(\n      jobRepository,\n      coreService, // Use coreService as the EventEmitter\n      QUEUE_NAME\n    );\n\n    queueService = new QueueService<TestPayload, TestResult>(\n      QUEUE_NAME,\n      jobRepository,\n      defaultJobOptions,\n      coreService,\n      processingService,\n      maintenanceService\n    );\n\n    mockProcessor = vi.fn();\n    workerService = new WorkerService(queueService, mockProcessor, defaultWorkerOptions);\n    vi.spyOn(workerService, 'emit');\n    vi.spyOn(queueService, 'fetchNextJobAndLock');\n  });\n\n  afterEach(async () => {\n    if (!workerService.isClosed) await workerService.close();\n    if (queueService) await queueService.close();\n    vi.clearAllMocks(); vi.restoreAllMocks(); vi.useRealTimers();\n    if (db && typeof db.close === 'function') db.close();\n  });\n\n  it('should emit worker.error if queue.fetchNextJobAndLock throws', async () => {\n    const fetchError = new Error('DB connection lost');\n    (queueService.fetchNextJobAndLock as Mock).mockRejectedValueOnce(fetchError);\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    expect(workerService.emit).toHaveBeenCalledWith('worker.error', fetchError);\n  });\n\n  it('should emit worker.job.interrupted if closed during processing', async () => {\n    const jobPayload = { data: 'interrupt me', id: randomUUID() };\n    const addedJob = await addJobToQueue('interrupt-job', jobPayload);\n    const processorPromise = new Promise<TestResult>(() => {});\n    mockProcessor.mockImplementationOnce(() => processorPromise);\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    await workerService.close();\n    expect(workerService.emit).toHaveBeenCalledWith('worker.job.interrupted', expect.objectContaining({ id: addedJob.id }));\n    const jobFromDb = await jobRepository.findById(addedJob.id);\n    expect(jobFromDb!.status).toBe(JobStatus.ACTIVE);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.initialization.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../../../../infrastructure/queue/drizzle/queue-service-core` import should occur after import of `../../../../infrastructure/queue/drizzle/queue-maintenance.service`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":96,"fix":{"range":[854,1372],"text":"// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n"}}],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":4,"column":38,"nodeType":"Literal","endLine":4,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":59,"nodeType":"Literal","endLine":6,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":52,"nodeType":"Literal","endLine":8,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":34,"nodeType":"Literal","endLine":10,"endColumn":95,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":38,"nodeType":"Literal","endLine":12,"endColumn":103,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":41,"nodeType":"Literal","endLine":14,"endColumn":109,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { vi, describe, it, expect, beforeEach, afterEach, Mock } from 'vitest';\n\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleJobRepository } from '../../../../infrastructure/persistence/drizzle/job/drizzle-job.repository';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { TestDb, createTestDbClient, runMigrations } from '../../../../infrastructure/queue/drizzle/__tests__/test-db.helper';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleQueueFacade as QueueService } from '../../../../infrastructure/queue/drizzle/drizzle-queue.facade';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { JobEntity } from '../../../domain/job/job.entity';\nimport { WorkerService } from '../worker.service';\n\nimport {\n  TestPayload, TestResult, QUEUE_NAME,\n  defaultWorkerOptions, defaultJobOptions\n} from './worker.service.spec.helper';\n\ndescribe('WorkerService - Initialization', () => {\n  let db: TestDb;\n  let jobRepository: DrizzleJobRepository;\n  let queueService: QueueService<TestPayload, TestResult>;\n  let workerService: WorkerService<TestPayload, TestResult>;\n  let mockProcessor: Mock<[JobEntity<TestPayload, TestResult>], Promise<TestResult>>;\n\n  beforeEach(async () => {\n    vi.useFakeTimers();\n    db = createTestDbClient({ memory: true });\n    await runMigrations(db);\n    jobRepository = new DrizzleJobRepository(db);\n\n    // Instantiate dependencies for DrizzleQueueFacade\n    const coreService = new QueueServiceCore<TestPayload, TestResult>(\n      QUEUE_NAME,\n      jobRepository,\n      defaultJobOptions\n    );\n    const processingService = new JobProcessingService<TestPayload, TestResult>(\n      jobRepository,\n      coreService, // Use coreService as the EventEmitter\n      QUEUE_NAME\n    );\n    const maintenanceService = new QueueMaintenanceService<TestPayload, TestResult>(\n      jobRepository,\n      coreService, // Use coreService as the EventEmitter\n      QUEUE_NAME\n    );\n\n    queueService = new QueueService<TestPayload, TestResult>(\n      QUEUE_NAME,\n      jobRepository,\n      defaultJobOptions,\n      coreService,\n      processingService,\n      maintenanceService\n    );\n\n    mockProcessor = vi.fn();\n    workerService = new WorkerService(queueService, mockProcessor, defaultWorkerOptions);\n    vi.spyOn(workerService, 'emit');\n  });\n\n  afterEach(async () => {\n    if (!workerService.isClosed) await workerService.close();\n    if (queueService) await queueService.close();\n    vi.clearAllMocks(); vi.restoreAllMocks(); vi.useRealTimers();\n    if (db && typeof db.close === 'function') db.close();\n  });\n\n  it('should create a worker instance', () => {\n    expect(workerService).toBeInstanceOf(WorkerService);\n    expect(workerService.isClosed).toBe(false);\n    expect(workerService.isRunning).toBe(false);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.job-processing.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../../../../infrastructure/queue/drizzle/queue-service-core` import should occur after import of `../../../../infrastructure/queue/drizzle/queue-maintenance.service`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":96,"fix":{"range":[897,1415],"text":"// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QueueServiceCore' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobProcessingService' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QueueMaintenanceService' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":33}],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":34,"nodeType":"Literal","endLine":12,"endColumn":95,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":38,"nodeType":"Literal","endLine":14,"endColumn":103,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":16,"column":41,"nodeType":"Literal","endLine":16,"endColumn":109,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { randomUUID } from 'node:crypto';\n\nimport { vi, describe, it, expect, beforeEach, afterEach, Mock } from 'vitest';\n\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleJobRepository } from '../../../../infrastructure/persistence/drizzle/job/drizzle-job.repository';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { TestDb, createTestDbClient, runMigrations } from '../../../../infrastructure/queue/drizzle/__tests__/test-db.helper';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleQueueFacade as QueueService } from '../../../../infrastructure/queue/drizzle/drizzle-queue.facade';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { JobEntity, JobStatus } from '../../../domain/job/job.entity';\nimport { IJobOptions } from '../../../domain/job/value-objects/job-options.vo';\nimport { WorkerService } from '../worker.service';\n\nimport {\n  TestPayload, TestResult, QUEUE_NAME,\n  defaultWorkerOptions, defaultJobOptions\n} from './worker.service.spec.helper';\n\ndescribe('WorkerService - Run and Job Processing', () => {\n  let db: TestDb;\n  let jobRepository: DrizzleJobRepository;\n  let queueService: QueueService<TestPayload, TestResult>;\n  let workerService: WorkerService<TestPayload, TestResult>;\n  let mockProcessor: Mock<[JobEntity<TestPayload, TestResult>], Promise<TestResult>>;\n\n  const addJobToQueue = async (name: string, payload: TestPayload, opts?: Partial<IJobOptions>) => {\n    const jobOptionsWithId = { ...defaultJobOptions, ...opts };\n    if (payload.id && !jobOptionsWithId.jobId) jobOptionsWithId.jobId = payload.id;\n    return queueService.add(name, payload, jobOptionsWithId);\n  };\n\n  beforeEach(async () => {\n    vi.useFakeTimers();\n    db = createTestDbClient({ memory: true });\n    await runMigrations(db);\n    jobRepository = new DrizzleJobRepository(db);\n    queueService = new QueueService<TestPayload, TestResult>(QUEUE_NAME, jobRepository, defaultJobOptions);\n    mockProcessor = vi.fn();\n    workerService = new WorkerService(queueService, mockProcessor, defaultWorkerOptions);\n    vi.spyOn(workerService, 'emit');\n    vi.spyOn(queueService, 'emit');\n  });\n\n  afterEach(async () => {\n    if (!workerService.isClosed) await workerService.close();\n    if (queueService) await queueService.close();\n    vi.clearAllMocks(); vi.restoreAllMocks(); vi.useRealTimers();\n    if (db && typeof db.close === 'function') db.close();\n  });\n\n  it('should fetch and process a job successfully', async () => {\n    const jobPayload = { data: 'process me', id: randomUUID() };\n    const addedJob = await addJobToQueue('success-job', jobPayload);\n    const expectedResult = { status: 'processed', id: jobPayload.id };\n    mockProcessor.mockResolvedValueOnce(expectedResult);\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    expect(mockProcessor).toHaveBeenCalledTimes(1);\n    const jobFromDb = await jobRepository.findById(addedJob.id);\n    expect(jobFromDb!.status).toBe(JobStatus.COMPLETED);\n    expect(workerService.emit).toHaveBeenCalledWith('worker.job.processed', expect.anything(), expectedResult);\n  });\n\n  it('should handle job processing failure', async () => {\n    const jobPayload = { data: 'fail me', id: randomUUID() };\n    const addedJob = await addJobToQueue('fail-job', jobPayload, { attempts: 1 });\n    const error = new Error('Processing failed');\n    mockProcessor.mockRejectedValueOnce(error);\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    const jobFromDb = await jobRepository.findById(addedJob.id);\n    expect(jobFromDb!.status).toBe(JobStatus.FAILED);\n    expect(workerService.emit).toHaveBeenCalledWith('worker.job.errored', expect.anything(), error);\n  });\n\n  it('should process jobs sequentially', async () => {\n    const job1Payload = { data: 'seq_data1', id: randomUUID() };\n    const job2Payload = { data: 'seq_data2', id: randomUUID() };\n    await addJobToQueue('seq-job1', job1Payload);\n    await addJobToQueue('seq-job2', job2Payload);\n    let job1ProcessorEndsAt: number | null = null;\n    let job2ProcessorStartsAt: number | null = null;\n\n    mockProcessor.mockImplementation(async (job) => {\n      const now = Date.now();\n      if (job.payload.id === job2Payload.id) job2ProcessorStartsAt = now;\n      await new Promise(resolve => setTimeout(resolve, 100));\n      if (job.payload.id === job1Payload.id) job1ProcessorEndsAt = Date.now();\n      return { status: `done_${job.payload.id}`, id: job.payload.id };\n    });\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 100 + 50);\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 100 + 50);\n    expect(job1ProcessorEndsAt).not.toBeNull();\n    expect(job2ProcessorStartsAt).not.toBeNull();\n    expect(job2ProcessorStartsAt!).toBeGreaterThanOrEqual(job1ProcessorEndsAt!);\n    expect(mockProcessor).toHaveBeenCalledTimes(2);\n  });\n\n  it('should handle job.updateProgress and job.addLog', async () => {\n    const jobPayload = { data: 'progress data', id: randomUUID() };\n    const addedJob = await addJobToQueue('progress-log-job', jobPayload);\n    mockProcessor.mockImplementationOnce(async (jobCtx) => {\n      await jobCtx.updateProgress(50);\n      await jobCtx.addLog('Processor log 1', 'INFO');\n      return { status: 'progress_done', id: jobCtx.payload.id };\n    });\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    const jobFromDb = await jobRepository.findById(addedJob.id);\n    expect(jobFromDb!.progress).toBe(50);\n    expect(jobFromDb!.logs[0].message).toBe('Processor log 1');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.lock-renewal.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../../../../infrastructure/queue/drizzle/queue-service-core` import should occur after import of `../../../../infrastructure/queue/drizzle/queue-maintenance.service`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":96,"fix":{"range":[897,1415],"text":"// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QueueServiceCore' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobProcessingService' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QueueMaintenanceService' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":33}],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":34,"nodeType":"Literal","endLine":12,"endColumn":95,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":38,"nodeType":"Literal","endLine":14,"endColumn":103,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":16,"column":41,"nodeType":"Literal","endLine":16,"endColumn":109,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { randomUUID } from 'node:crypto';\n\nimport { vi, describe, it, expect, beforeEach, afterEach, Mock } from 'vitest';\n\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleJobRepository } from '../../../../infrastructure/persistence/drizzle/job/drizzle-job.repository';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { TestDb, createTestDbClient, runMigrations } from '../../../../infrastructure/queue/drizzle/__tests__/test-db.helper';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { DrizzleQueueFacade as QueueService } from '../../../../infrastructure/queue/drizzle/drizzle-queue.facade';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueServiceCore } from '../../../../infrastructure/queue/drizzle/queue-service-core';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { JobProcessingService } from '../../../../infrastructure/queue/drizzle/job-processing.service';\n// eslint-disable-next-line boundaries/element-types -- Integration test needs access to infrastructure\nimport { QueueMaintenanceService } from '../../../../infrastructure/queue/drizzle/queue-maintenance.service';\nimport { JobEntity } from '../../../domain/job/job.entity';\nimport { IJobOptions } from '../../../domain/job/value-objects/job-options.vo';\nimport { WorkerService } from '../worker.service';\n\nimport {\n  TestPayload, TestResult, QUEUE_NAME,\n  defaultWorkerOptions, defaultJobOptions\n} from './worker.service.spec.helper';\n\ndescribe('WorkerService - Lock Renewal', () => {\n  let db: TestDb;\n  let jobRepository: DrizzleJobRepository;\n  let queueService: QueueService<TestPayload, TestResult>;\n  let workerService: WorkerService<TestPayload, TestResult>;\n  let mockProcessor: Mock<[JobEntity<TestPayload, TestResult>], Promise<TestResult>>;\n\n  const addJobToQueue = async (name: string, payload: TestPayload, opts?: Partial<IJobOptions>) => {\n    const jobOptionsWithId = { ...defaultJobOptions, ...opts };\n    if (payload.id && !jobOptionsWithId.jobId) jobOptionsWithId.jobId = payload.id;\n    return queueService.add(name, payload, jobOptionsWithId);\n  };\n\n  beforeEach(async () => {\n    vi.useFakeTimers();\n    db = createTestDbClient({ memory: true });\n    await runMigrations(db);\n    jobRepository = new DrizzleJobRepository(db);\n    queueService = new QueueService<TestPayload, TestResult>(QUEUE_NAME, jobRepository, defaultJobOptions);\n    mockProcessor = vi.fn();\n    workerService = new WorkerService(queueService, mockProcessor, defaultWorkerOptions);\n  });\n\n  afterEach(async () => {\n    if (!workerService.isClosed) await workerService.close();\n    if (queueService) await queueService.close();\n    vi.clearAllMocks(); vi.restoreAllMocks(); vi.useRealTimers();\n    if (db && typeof db.close === 'function') db.close();\n  });\n\n  it('should renew lock periodically for an active job', async () => {\n    const jobPayload = { data: 'renew me', id: randomUUID() };\n    const addedJob = await addJobToQueue('lockrenew-job', jobPayload);\n    let jobProcessorPromiseResolve: (value: TestResult) => void;\n    const jobProcessingPromise = new Promise<TestResult>(resolve => { jobProcessorPromiseResolve = resolve; });\n    mockProcessor.mockImplementationOnce(() => jobProcessingPromise);\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    const initialLockUntil = (await jobRepository.findById(addedJob.id))!.lockUntil;\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.lockDuration! - defaultWorkerOptions.lockRenewTimeBuffer! + 100);\n    expect((await jobRepository.findById(addedJob.id))!.lockUntil!.getTime()).toBeGreaterThan(initialLockUntil!.getTime());\n    jobProcessorPromiseResolve!({ status: 'renewed_done', id: addedJob.payload.id });\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n  });\n\n  it('should stop renewing lock if job finishes', async () => {\n    const jobPayload = { data: 'stop renew', id: randomUUID() };\n    const addedJob = await addJobToQueue('lockstop-job', jobPayload);\n    mockProcessor.mockResolvedValueOnce({ status: 'stopped_done', id: jobPayload.id });\n    workerService.run();\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.pollingIntervalMs! + 50);\n    const lockUntilAtCompletion = (await jobRepository.findById(addedJob.id))!.lockUntil;\n    await vi.advanceTimersByTimeAsync(defaultWorkerOptions.lockDuration!);\n    const jobLater = await jobRepository.findById(addedJob.id);\n    if (lockUntilAtCompletion) expect(jobLater!.lockUntil!.getTime()).toEqual(lockUntilAtCompletion.getTime());\n    else expect(jobLater!.lockUntil).toBeNull();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.spec.helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/worker.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/worker.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/base.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/ports/repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/services/i-logger.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/value-objects/base.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/value-objects/identity.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent-internal-state.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent-persona-template.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-internal-state-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-persona-template-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-max-iterations.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-temperature.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/current-goal.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/current-project-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/general-notes.collection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-backstory.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-goal.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-role.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/tool-names.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/target-agent-role.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/annotation.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/ports/annotation-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/ports/annotation-repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/value-objects/annotation-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/value-objects/annotation-text.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/common/errors.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[464,467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[464,467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job-options.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.serialization.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.state-transitions.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-persistence.mapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-processing.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-state.mutator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/utils/calculate-backoff.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/__tests__/job-id.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/__tests__/job-options.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/activity-history-entry.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/activity-history.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-options.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/llm-provider-config.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/ports/llm-provider-config-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-api-key.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/memory-item.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/ports/memory-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/ports/memory-repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-content.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-embedding.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-source.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-tags.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/ports/project-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/project.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-description.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/ports/source-code-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/source-code.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-docs-path.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-path.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/ports/user-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/user.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-avatar.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-email.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-nickname.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-username.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/file-system.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/job-queue.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/llm-adapter.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/llm-adapter.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/version-control-system.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/tools/tool.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/examples/queue-usage-example.final.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/adapters/llm/mock-llm.adapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/ioc/inversify.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/ioc/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/drizzle.client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.clean.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.countByStatus.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.findNextJobs.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.getByStatus.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.locking.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.remove.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.save-findById.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.stalled.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.update.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/drizzle-job.mapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/drizzle-job.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/repositories/project.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/schema/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/schema/jobs.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/test-db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent-internal-state.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent-persona-template.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/annotation.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/llm-provider-config.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/memory.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/project.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/source-code.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/user.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-add.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../queue-service-core` import should occur after import of `../queue-maintenance.service`","line":20,"column":1,"nodeType":"ImportDeclaration","endLine":20,"endColumn":58,"fix":{"range":[772,968],"text":"import { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\nimport { QueueServiceCore } from \"../queue-service-core\";\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-add.spec.ts\nimport { randomUUID } from \"node:crypto\";\n\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  afterEach,\n} from \"vitest\";\n\n// Newline for import group separation\nimport { JobEntity, JobStatus } from \"../../../../core/domain/job/job.entity\";\nimport { IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\"; // Corrected: Use as value\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\n// import { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\"; // Not directly used in this snippet, but likely needed\nimport { QueueServiceCore } from \"../queue-service-core\";\nimport { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\n\n// Newline for import group separation\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>;\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  const coreService = new QueueServiceCore<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts\n  );\n  const processingService = new JobProcessingService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n  const maintenanceService = new QueueMaintenanceService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n\n  queueService = new QueueService<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts,\n    coreService,\n    processingService,\n    maintenanceService\n  );\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - add\", () => {\n  it(\"should create a job, save it to DB, and emit job.added event\", async () => {\n    const jobData = { email: \"test@example.com\" };\n    const jobName = \"send-welcome-email\";\n\n    const createdJob = await queueService.add(jobName, jobData);\n    const createdJobProps = createdJob.getProps();\n\n    expect(createdJob).toBeInstanceOf(JobEntity);\n    expect(createdJobProps.name).toBe(jobName);\n    expect(createdJobProps.payload).toEqual(jobData);\n    expect(createdJobProps.queueName).toBe(queueName);\n    expect(createdJobProps.options.attempts).toBe(defaultJobOpts.attempts);\n    expect(queueService.emit).toHaveBeenCalledWith(\"job.added\", createdJob);\n\n    // Verify job is in the database\n    const jobFromDb = await jobRepository.findById(createdJobProps.id);\n    expect(jobFromDb).not.toBeNull();\n    const jobFromDbProps = jobFromDb!.getProps();\n    expect(jobFromDbProps.id.value).toBe(createdJobProps.id.value);\n    expect(jobFromDbProps.name).toBe(jobName);\n    expect(jobFromDbProps.payload).toEqual(jobData);\n  });\n\n  it(\"should apply custom options when adding a job, and save to DB\", async () => {\n    const jobData = { email: \"custom@example.com\" };\n    const jobName = \"custom-options-job\";\n    const validCustomJobId = randomUUID();\n    const customOpts: IJobOptions = {\n      attempts: 5,\n      delay: 5000,\n      priority: 1,\n      jobId: validCustomJobId,\n    };\n\n    const createdJob = await queueService.add(jobName, jobData, customOpts);\n    const createdJobProps = createdJob.getProps();\n\n    expect(createdJobProps.id.value).toBe(validCustomJobId);\n    expect(createdJobProps.options.attempts).toBe(5);\n    expect(createdJobProps.options.delay).toBe(5000);\n    expect(createdJobProps.options.priority).toBe(1);\n    expect(createdJobProps.status).toBe(JobStatus.DELAYED);\n\n    const jobFromDb = await jobRepository.findById(createdJobProps.id);\n    expect(jobFromDb).not.toBeNull();\n    const jobFromDbProps = jobFromDb!.getProps();\n    expect(jobFromDbProps.id.value).toBe(validCustomJobId);\n    expect(jobFromDbProps.options.priority).toBe(1);\n  });\n});\n\ndescribe(\"QueueService - addBulk\", () => {\n  it(\"should add multiple jobs to DB, and emit events\", async () => {\n    const jobsToAdd = [\n      { name: \"bulk1\", data: { email: \"b1@example.com\" } },\n      {\n        name: \"bulk2\",\n        data: { email: \"b2@example.com\" },\n        opts: { priority: 1 },\n      },\n    ];\n\n    const addedJobs = await queueService.addBulk(jobsToAdd);\n\n    expect(addedJobs.length).toBe(2);\n    expect(queueService.emit).toHaveBeenCalledTimes(2);\n\n    const job1FromDb = await jobRepository.findById(addedJobs[0].getProps().id);\n    expect(job1FromDb).not.toBeNull();\n    const job1FromDbProps = job1FromDb!.getProps();\n    expect(job1FromDbProps.name).toBe(\"bulk1\");\n    expect(job1FromDbProps.payload).toEqual({ email: \"b1@example.com\" });\n    expect(queueService.emit).toHaveBeenCalledWith(\"job.added\", addedJobs[0]);\n\n    const job2FromDb = await jobRepository.findById(addedJobs[1].getProps().id);\n    expect(job2FromDb).not.toBeNull();\n    const job2FromDbProps = job2FromDb!.getProps();\n    expect(job2FromDbProps.name).toBe(\"bulk2\");\n    expect(job2FromDbProps.options.priority).toBe(1);\n    expect(queueService.emit).toHaveBeenCalledWith(\"job.added\", addedJobs[1]);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-admin.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../queue-service-core` import should occur after import of `../queue-maintenance.service`","line":17,"column":1,"nodeType":"ImportDeclaration","endLine":17,"endColumn":58,"fix":{"range":[692,888],"text":"import { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\nimport { QueueServiceCore } from \"../queue-service-core\";\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-admin.spec.ts\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  afterEach,\n} from \"vitest\";\n\nimport { JobStatus } from \"../../../../core/domain/job/job.entity\"; // JobEntity itself might not be needed directly\nimport { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\"; // Needed for creating jobs for getJobsByStatus\nimport { IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\";\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\nimport { QueueServiceCore } from \"../queue-service-core\";\nimport { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\n\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>;\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  const coreService = new QueueServiceCore<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts\n  );\n  const processingService = new JobProcessingService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n  const maintenanceService = new QueueMaintenanceService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n\n  queueService = new QueueService<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts,\n    coreService,\n    processingService,\n    maintenanceService\n  );\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - pause\", () => {\n  it(\"should emit queue.paused event\", async () => {\n    await queueService.pause();\n    expect(queueService.emit).toHaveBeenCalledWith(\"queue.paused\");\n  });\n});\n\ndescribe(\"QueueService - resume\", () => {\n  it(\"should emit queue.resumed event\", async () => {\n    await queueService.resume();\n    expect(queueService.emit).toHaveBeenCalledWith(\"queue.resumed\");\n  });\n});\n\ndescribe(\"QueueService - countJobsByStatus\", () => {\n  it(\"should call jobRepository.countJobsByStatus and return the counts\", async () => {\n    await queueService.add(\"w1\", { email: \"w1@w.c\" });\n    await queueService.add(\"w2\", { email: \"w2@w.c\" });\n    const _jf = await queueService.add(\n      \"f1\",\n      { email: \"f1@f.c\" },\n      { attempts: 1 }\n    );\n    const activeJf = await queueService.fetchNextJobAndLock(\"w\", 1); // Lock the job to make it active potentially\n    if (activeJf) { // Ensure job was fetched before trying to fail it\n        await queueService.markJobAsFailed(activeJf.id, \"w\", new Error(\"fail\"));\n    }\n\n\n    const statuses = [JobStatus.WAITING, JobStatus.FAILED];\n    const counts = await queueService.countJobsByStatus(statuses);\n\n    expect(counts[JobStatus.WAITING]).toBe(2);\n    // If activeJf was successfully fetched and failed\n    if (activeJf) {\n        expect(counts[JobStatus.FAILED]).toBe(1);\n    } else {\n        // If activeJf was null (e.g. another test run interfered or timing)\n        // This part of the assertion might be flaky if activeJf is not guaranteed.\n        // Consider what the count should be if the job wasn't processed.\n        expect(counts[JobStatus.FAILED]).toBeUndefined(); // Or 0, depending on desired behavior if no failed jobs\n    }\n  });\n});\n\ndescribe(\"QueueService - getJobsByStatus\", () => {\n  it(\"should call jobRepository.getJobsByStatus and return mapped jobs\", async () => {\n    const jc1 = await queueService.add(\"jc1\", { email: \"jc1@c.c\" }, {jobId: JobIdVO.create().value});\n    const activeJc1 = await queueService.fetchNextJobAndLock(\"w\", 1);\n    if (activeJc1) {\n        await queueService.markJobAsCompleted(activeJc1.id, \"w\", {\n            status: \"ok\",\n        });\n    }\n\n\n    const jc2 = await queueService.add(\"jc2\", { email: \"jc2@c.c\" }, {jobId: JobIdVO.create().value});\n    const activeJc2 = await queueService.fetchNextJobAndLock(\"w\", 1);\n    if (activeJc2) {\n        await queueService.markJobAsCompleted(activeJc2.id, \"w\", {\n            status: \"ok\",\n        });\n    }\n\n\n    const statuses = [JobStatus.COMPLETED];\n    const result = await queueService.getJobsByStatus(statuses, 0, 10, true);\n\n    // Depending on whether jobs were successfully completed\n    const expectedCompletedCount = (activeJc1 ? 1 : 0) + (activeJc2 ? 1 : 0);\n    expect(result.length).toBe(expectedCompletedCount);\n\n    if (activeJc1 && result.some(job => job.id.equals(jc1.id))) {\n      expect(result.find(job => job.id.equals(jc1.id))!.status).toBe(JobStatus.COMPLETED);\n    }\n    if (activeJc2 && result.some(job => job.id.equals(jc2.id))) {\n      expect(result.find(job => job.id.equals(jc2.id))!.status).toBe(JobStatus.COMPLETED);\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-get.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../queue-service-core` import should occur after import of `../queue-maintenance.service`","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":58,"fix":{"range":[451,647],"text":"import { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\nimport { QueueServiceCore } from \"../queue-service-core\";\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-get.spec.ts\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  afterEach,\n} from \"vitest\";\n\nimport { type IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\";\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\nimport { QueueServiceCore } from \"../queue-service-core\";\nimport { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\n// import { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\"; // Not directly used here but JobEntity uses it\n\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>;\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  const coreService = new QueueServiceCore<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts\n  );\n  const processingService = new JobProcessingService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n  const maintenanceService = new QueueMaintenanceService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n\n  queueService = new QueueService<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts,\n    coreService,\n    processingService,\n    maintenanceService\n  );\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - getJob\", () => {\n  it(\"should retrieve a job from DB by JobIdVO\", async () => {\n    const jobData = { email: \"find@me.com\" };\n    const jobName = \"find-me\";\n    // Need to add a job first to get it\n    const addedJob = await queueService.add(jobName, jobData);\n    const foundJob = await queueService.getJob(addedJob.getProps().id);\n\n    expect(foundJob).not.toBeNull();\n    expect(foundJob!.getProps().id.value).toBe(addedJob.getProps().id.value);\n    expect(foundJob!.getProps().name).toBe(jobName);\n  });\n\n  it(\"should retrieve a job from DB by string ID\", async () => {\n    const jobData = { email: \"find@me-str.com\" };\n    const jobName = \"find-me-str\";\n    // Need to add a job first to get it\n    const addedJob = await queueService.add(jobName, jobData);\n    const foundJob = await queueService.getJob(addedJob.getProps().id.value);\n\n    expect(foundJob).not.toBeNull();\n    expect(foundJob!.getProps().id.value).toBe(addedJob.getProps().id.value);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-maintenance.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../queue-service-core` import should occur after import of `../queue-maintenance.service`","line":17,"column":1,"nodeType":"ImportDeclaration","endLine":17,"endColumn":58,"fix":{"range":[612,808],"text":"import { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\nimport { QueueServiceCore } from \"../queue-service-core\";\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-maintenance.spec.ts\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  afterEach,\n} from \"vitest\";\n\nimport { JobEntity, JobStatus } from \"../../../../core/domain/job/job.entity\";\nimport { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\";\nimport { IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\";\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\nimport { QueueServiceCore } from \"../queue-service-core\";\nimport { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\n\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>;\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  const coreService = new QueueServiceCore<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts\n  );\n  const processingService = new JobProcessingService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n  const maintenanceService = new QueueMaintenanceService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n\n  queueService = new QueueService<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts,\n    coreService,\n    processingService,\n    maintenanceService\n  );\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - startMaintenance (Stalled Jobs)\", () => {\n  beforeEach(() => {\n    vi.useFakeTimers();\n  });\n  afterEach(async () => {\n    // Ensure maintenance is stopped and timers are cleared for other test files\n    if (queueService && queueService[\"maintenanceTimer\"]) {\n      await queueService.stopMaintenance();\n    }\n    await vi.runAllTimersAsync(); // Process any remaining timers\n    vi.useRealTimers();\n  });\n\n  it(\"should periodically check for stalled jobs in DB and handle them\", async () => {\n    const stalledJob1Id = JobIdVO.create();\n    let job1 = JobEntity.create({\n      queueName,\n      name: \"stalled1\",\n      payload: { email: \"s1@ex.com\" },\n      options: { attempts: 1, jobId: stalledJob1Id.value },\n    });\n    // Manually set job as active and stalled\n    job1.props.status = JobStatus.ACTIVE;\n    job1.props.workerId = \"stalled-worker\";\n    job1.props.lockUntil = new Date(Date.now() - 100000); // Lock expired\n    job1.props.processedOn = new Date(Date.now() - 100001);\n    job1.props.attemptsMade = 1; // Already attempted once\n    await jobRepository.save(job1);\n\n    const stalledJob2Id = JobIdVO.create();\n    let job2 = JobEntity.create({\n      queueName,\n      name: \"stalled2\",\n      payload: { email: \"s2@ex.com\" },\n      options: { attempts: 2, jobId: stalledJob2Id.value }, // Allows for one retry\n    });\n    job2.props.status = JobStatus.ACTIVE;\n    job2.props.workerId = \"stalled-worker-2\";\n    job2.props.lockUntil = new Date(Date.now() - 100000); // Lock expired\n    job2.props.processedOn = new Date(Date.now() - 100001);\n    job2.props.attemptsMade = 1; // First attempt processed, now stalled\n    await jobRepository.save(job2);\n\n    queueService.startMaintenance();\n\n    // Allow the first maintenance run\n    await vi.advanceTimersByTimeAsync(1); // Ensure current tasks complete\n    await vi.advanceTimersByTimeAsync(queueService[\"maintenanceIntervalMs\"]);\n\n    const job1AfterStall = await jobRepository.findById(stalledJob1Id);\n    expect(job1AfterStall!.status).toBe(JobStatus.FAILED); // No more attempts\n    expect(job1AfterStall!.failedReason).toContain(\"Stalled\");\n\n    const job2AfterStall = await jobRepository.findById(stalledJob2Id);\n    expect(job2AfterStall!.status).toBe(JobStatus.WAITING); // Should be re-queued\n    expect(job2AfterStall!.stalledCount).toBe(1);\n    expect(job2AfterStall!.workerId).toBeNull(); // Lock should be cleared\n\n    const findStalledJobsSpy = vi.spyOn(jobRepository, \"findStalledJobs\");\n    // Advance to next interval\n    await vi.advanceTimersByTimeAsync(queueService[\"maintenanceIntervalMs\"] + 1);\n    expect(findStalledJobsSpy).toHaveBeenCalledTimes(1); // Should have run again\n\n    // Cleanup for this specific test block\n    await queueService.stopMaintenance();\n    await vi.runAllTimersAsync();\n    findStalledJobsSpy.mockRestore();\n  });\n});\n\ndescribe(\"QueueService - clean\", () => {\n  it(\"should call jobRepository.clean and return the count\", async () => {\n    const gracePeriodMs = 60000;\n    const limit = 10;\n    const status = JobStatus.COMPLETED;\n\n    // Add a job that will be completed and become old\n    const jobToCleanId = JobIdVO.create();\n    await queueService.add(\"job-to-clean\", { email: \"clean@example.com\" }, { jobId: jobToCleanId.value });\n    const fetchedJob = await queueService.fetchNextJobAndLock(\"worker-clean\", 1000);\n    expect(fetchedJob).not.toBeNull();\n    expect(fetchedJob!.id.value).toBe(jobToCleanId.value);\n\n    // Mark as completed\n    await queueService.markJobAsCompleted(fetchedJob!.id, \"worker-clean\", { status: \"done\" });\n\n    // Manually update its finishedOn to be in the past, beyond grace period\n    const jobEntity = await jobRepository.findById(fetchedJob!.id);\n    expect(jobEntity).not.toBeNull();\n    jobEntity!.props.finishedOn = new Date(Date.now() - gracePeriodMs * 2);\n    await jobRepository.update(jobEntity!); // Use repository's update which handles date conversion\n\n    const cleanedCount = await queueService.clean(gracePeriodMs, limit, status);\n    expect(cleanedCount).toBe(1);\n\n    const jobAfterClean = await jobRepository.findById(fetchedJob!.id);\n    expect(jobAfterClean).toBeNull();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-updates.spec.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`../queue-service-core` import should occur after import of `../queue-maintenance.service`","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":58,"fix":{"range":[529,725],"text":"import { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\nimport { QueueServiceCore } from \"../queue-service-core\";\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-updates.spec.ts\nimport {\n  vi,\n  describe,\n  it,\n  expect,\n  beforeEach,\n  beforeAll,\n  afterEach,\n} from \"vitest\";\n\nimport { JobIdVO } from \"../../../../core/domain/job/value-objects/job-id.vo\";\nimport { IJobOptions } from \"../../../../core/domain/job/value-objects/job-options.vo\";\nimport { DrizzleJobRepository } from \"../../../persistence/drizzle/job/drizzle-job.repository\";\nimport { DrizzleQueueFacade as QueueService } from \"../drizzle-queue.facade\";\nimport { QueueServiceCore } from \"../queue-service-core\";\nimport { JobProcessingService } from \"../job-processing.service\";\nimport { QueueMaintenanceService } from \"../queue-maintenance.service\";\n// import { JobEntity } from \"../../../../core/domain/job/job.entity\"; // Might be needed for some expect.objectContaining\n\nimport {\n  TestDb,\n  createTestDbClient,\n  runMigrations,\n  clearDatabaseTables,\n} from \"./test-db.helper\";\n\n// Top-level variables for test context\nlet db: TestDb;\nlet jobRepository: DrizzleJobRepository;\nlet queueService: QueueService<{ email: string }, { status: string }>;\nconst queueName = \"test-email-queue\";\nconst defaultJobOpts: IJobOptions = {\n  attempts: 1,\n  delay: 0,\n  priority: 0,\n  removeOnComplete: false,\n  removeOnFail: false,\n  maxStalledCount: 3,\n};\n\nbeforeAll(async () => {\n  db = createTestDbClient({ memory: true });\n  await runMigrations(db);\n});\n\nbeforeEach(async () => {\n  vi.clearAllMocks();\n  await clearDatabaseTables(db);\n\n  jobRepository = new DrizzleJobRepository(db);\n  const coreService = new QueueServiceCore<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts\n  );\n  const processingService = new JobProcessingService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n  const maintenanceService = new QueueMaintenanceService<{ email: string }, { status: string }>(\n    jobRepository,\n    coreService, // Use coreService as the EventEmitter\n    queueName\n  );\n\n  queueService = new QueueService<{ email: string }, { status: string }>(\n    queueName,\n    jobRepository,\n    defaultJobOpts,\n    coreService,\n    processingService,\n    maintenanceService\n  );\n  vi.spyOn(queueService, \"emit\");\n});\n\nafterEach(async () => {\n  if (queueService) {\n    await queueService.close();\n  }\n  vi.restoreAllMocks();\n});\n\ndescribe(\"QueueService - updateJobProgress\", () => {\n  let jobId: JobIdVO;\n  const workerId = \"worker-progress\";\n\n  beforeEach(async () => {\n    jobId = JobIdVO.create();\n    await queueService.add(\n      \"progress-me\",\n      { email: \"progress@example.com\" },\n      { jobId: jobId.value }\n    );\n    const activeJob = await queueService.fetchNextJobAndLock(workerId, 10000);\n    if (!activeJob || activeJob.id.value !== jobId.value)\n      throw new Error(\"Setup failed for updateJobProgress\");\n  });\n\n  it(\"should update progress in DB, and emit event\", async () => {\n    await queueService.updateJobProgress(jobId, workerId, 50);\n    let jobFromDb = await jobRepository.findById(jobId);\n    expect(jobFromDb!.progress).toBe(50);\n    expect(queueService.emit).toHaveBeenCalledWith(\n      \"job.progress\",\n      expect.objectContaining({ id: jobId, progress: 50 })\n    );\n\n    await queueService.updateJobProgress(jobId, workerId, {\n      stage: \"processing\",\n    });\n    jobFromDb = await jobRepository.findById(jobId);\n    expect(jobFromDb!.progress).toEqual({ stage: \"processing\" });\n    expect(queueService.emit).toHaveBeenCalledWith(\n      \"job.progress\",\n      expect.objectContaining({\n        id: jobId,\n        progress: { stage: \"processing\" },\n      })\n    );\n  });\n\n  it(\"should not update progress if job not found or worker mismatch\", async () => {\n    const nonExistentJobId = JobIdVO.create();\n    await queueService.updateJobProgress(nonExistentJobId, workerId, 75);\n    // Check that no emit happened for nonExistentJobId for progress\n    expect(queueService.emit).not.toHaveBeenCalledWith(\n      \"job.progress\",\n      expect.objectContaining({ id: nonExistentJobId })\n    );\n\n\n    await queueService.updateJobProgress(jobId, \"other-worker\", 75);\n    const jobFromDb = await jobRepository.findById(jobId);\n    expect(jobFromDb!.progress).not.toBe(75); // Progress should remain as it was\n  });\n});\n\ndescribe(\"QueueService - addJobLog\", () => {\n  let jobId: JobIdVO;\n  const workerId = \"worker-log\";\n\n  beforeEach(async () => {\n    jobId = JobIdVO.create();\n    await queueService.add(\n      \"log-me\",\n      { email: \"log@example.com\" },\n      { jobId: jobId.value }\n    );\n    const activeJob = await queueService.fetchNextJobAndLock(workerId, 10000);\n    if (!activeJob || activeJob.id.value !== jobId.value)\n      throw new Error(\"Setup failed for addJobLog\");\n  });\n\n  it(\"should add log to DB, and emit event\", async () => {\n    const message = \"Test log message\";\n    const level = \"DEBUG\";\n    await queueService.addJobLog(jobId, workerId, message, level);\n\n    const jobFromDb = await jobRepository.findById(jobId);\n    expect(jobFromDb!.logs.length).toBe(1);\n    expect(jobFromDb!.logs[0].message).toBe(message);\n    expect(jobFromDb!.logs[0].level).toBe(level);\n    expect(jobFromDb!.logs[0].timestamp).toBeInstanceOf(Date);\n    expect(queueService.emit).toHaveBeenCalledWith(\n      \"job.log\",\n      expect.objectContaining({ id: jobId })\n    );\n  });\n\n  it(\"should not add log if job not found or worker mismatch\", async () => {\n    const nonExistentJobId = JobIdVO.create();\n    await queueService.addJobLog(nonExistentJobId, workerId, \"test\", \"INFO\");\n    expect(queueService.emit).not.toHaveBeenCalledWith(\n      \"job.log\",\n      expect.objectContaining({ id: nonExistentJobId })\n    );\n\n    await queueService.addJobLog(jobId, \"other-worker\", \"test\", \"INFO\");\n    const jobFromDb = await jobRepository.findById(jobId);\n    expect(jobFromDb!.logs.length).toBe(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.extendJobLock.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.fetchNextJobAndLock.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.markJobAsCompleted.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.markJobAsFailed.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/test-db.helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/drizzle-queue.facade.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/job-processing.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/queue-maintenance.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/queue-service-core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/services/logger/console-logger.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/services/tool-registry/tool-registry.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/tools/file-system.tool.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/agent-instance.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/dm.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/llm-config.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/persona-template.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/user.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-chat.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/agent-instance.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/dm.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/llm-config.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/persona-template.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/user.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/agent-instance.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/dm.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/llm-config.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/persona-template.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/project.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/user.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/preload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/dashboard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/docs/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/members/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/appearance/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/$configId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/profile/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/dm/$conversationId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(public)/onboarding/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/__root.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/MarkdownRenderer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/layout/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentLLMConfigSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentPersonaTemplateSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentTemperatureSliderField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatWindow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ConversationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ApiKeyField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/BaseUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ConfigNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ProviderSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/InitialConfigStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/OnboardingWizard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/PersonaList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/WelcomeStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaBackstoryField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaGoalField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaRoleField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaToolsField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/fields/ProjectDescriptionField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/fields/ProjectNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ParticipantListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectContextSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectParticipantsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserProfileForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/AvatarUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/DisplayNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/EmailDisplayField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/layout/UserSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/layout/UserSidebarParts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcMutation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcSubscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/useIPC.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IElectronIPC' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/main.tsx","messages":[],"suppressedMessages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/ui/routeTree.gen'.","line":8,"column":27,"nodeType":"Literal","endLine":8,"endColumn":47,"suppressions":[{"kind":"directive","justification":"File generated by TanStack Router"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.service.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4792,4795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4792,4795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8168,8171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8168,8171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-channels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-chat.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-project.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/result.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/types/entities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]