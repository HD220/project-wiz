[{"filePath":"/app/src_refactored/presentation/ui/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/dashboard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/edit/index.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":63,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2871,2899],"text":"Template de Persona com ID &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2871,2899],"text":"Template de Persona com ID &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2871,2899],"text":"Template de Persona com ID &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2871,2899],"text":"Template de Persona com ID &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":63,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2911,2928],"text":"&quot; não encontrado."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2911,2928],"text":"&ldquo; não encontrado."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2911,2928],"text":"&#34; não encontrado."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2911,2928],"text":"&rdquo; não encontrado."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":164,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6453,6481],"text":"Template de Persona com ID &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6453,6481],"text":"Template de Persona com ID &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6453,6481],"text":"Template de Persona com ID &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6453,6481],"text":"Template de Persona com ID &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":164,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6493,6510],"text":"&quot; não encontrado."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6493,6510],"text":"&ldquo; não encontrado."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6493,6510],"text":"&#34; não encontrado."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6493,6510],"text":"&rdquo; não encontrado."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createFileRoute, useRouter, useParams, Link } from '@tanstack/react-router';\nimport { ArrowLeft, Loader2, ServerCrash } from 'lucide-react';\nimport React from 'react';\nimport { toast } from 'sonner';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport { PersonaTemplateForm, PersonaTemplateFormData } from '@/presentation/ui/features/persona/components/PersonaTemplateForm';\nimport { useIpcMutation } from '@/presentation/ui/hooks/ipc/useIpcMutation';\nimport { useIpcQuery } from '@/presentation/ui/hooks/ipc/useIpcQuery';\n\nimport { IPC_CHANNELS } from '@/shared/ipc-channels';\nimport type {\n  GetPersonaTemplateDetailsRequest,\n  GetPersonaTemplateDetailsResponseData,\n  UpdatePersonaTemplateRequest,\n  UpdatePersonaTemplateResponseData,\n  IPCResponse\n} from '@/shared/ipc-types';\n\n// Helper for loading/error states\ninterface EditPersonaTemplateLoadingErrorDisplayProps {\n  isLoading: boolean;\n  error: Error | null | undefined;\n}\nfunction EditPersonaTemplateLoadingErrorDisplay({ isLoading, error }: EditPersonaTemplateLoadingErrorDisplayProps) {\n  if (isLoading) {\n    return (\n      <div className=\"p-8 text-center flex flex-col items-center justify-center min-h-[300px]\">\n        <Loader2 className=\"h-10 w-10 animate-spin text-sky-500 mb-4\" />\n        <p className=\"text-lg text-slate-600 dark:text-slate-400\">Carregando dados do template...</p>\n      </div>\n    );\n  }\n  if (error) {\n     return (\n      <div className=\"p-8 text-center flex flex-col items-center justify-center min-h-[300px] bg-red-50 dark:bg-red-900/10 rounded-lg\">\n        <ServerCrash className=\"h-12 w-12 text-red-500 dark:text-red-400 mb-4\" />\n        <h2 className=\"text-xl font-semibold text-red-700 dark:text-red-300 mb-2\">Falha ao carregar template</h2>\n        <p className=\"text-sm text-red-600 dark:text-red-400 mb-4\">{error.message}</p>\n        <Button variant=\"outline\" className=\"mt-4\" asChild>\n            {/* Link back to the list, as the specific template might not exist or be accessible */}\n            <Link to=\"/personas\"><ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Lista de Personas</Link>\n        </Button>\n      </div>\n    );\n  }\n  return null;\n}\n\n// Helper for rendering the form\ninterface EditPersonaTemplateFormRendererProps {\n  templateId: string;\n  personaTemplate: GetPersonaTemplateDetailsResponseData;\n  handleSubmit: (formData: PersonaTemplateFormData) => Promise<void>;\n  isSubmitting: boolean;\n}\nfunction EditPersonaTemplateFormRenderer({templateId, personaTemplate, handleSubmit, isSubmitting}: EditPersonaTemplateFormRendererProps) {\n   if (!personaTemplate) {\n    // Should ideally be caught by the page component before calling this renderer\n    return (\n      <div className=\"p-8 text-center\">\n        <p>Template de Persona com ID \"{templateId}\" não encontrado.</p>\n         <Button variant=\"outline\" className=\"mt-4\" asChild>\n            <Link to=\"/personas\"><ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Lista de Personas</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  const initialValues: Partial<PersonaTemplateFormData> = {\n    name: personaTemplate.name,\n    role: personaTemplate.role,\n    goal: personaTemplate.goal,\n    backstory: personaTemplate.backstory,\n    toolNames: personaTemplate.toolNames || [],\n  };\n\n  return (\n    <div className=\"p-4 md:p-6 lg:p-8 max-w-3xl mx-auto\">\n       <Button variant=\"outline\" size=\"sm\" className=\"mb-4\" asChild>\n          <Link to=\"/personas/$templateId\" params={{templateId}}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Detalhes\n          </Link>\n        </Button>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Editar Template de Persona: {personaTemplate.name}</CardTitle>\n          <CardDescription>\n            Modifique as características base deste template de Agente IA.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <PersonaTemplateForm\n            onSubmit={handleSubmit}\n            initialValues={initialValues}\n            isSubmitting={isSubmitting}\n            submitButtonText=\"Salvar Alterações\"\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n\nfunction EditPersonaTemplatePage() {\n  const router = useRouter();\n  const params = useParams({ from: '/(app)/personas/$templateId/edit/' });\n  const templateId = params.templateId;\n\n  const { data: personaTemplate, isLoading: isLoadingTemplate, error: templateError, refetch } = useIpcQuery<\n    GetPersonaTemplateDetailsRequest,\n    GetPersonaTemplateDetailsResponseData\n  >(\n    IPC_CHANNELS.GET_PERSONA_TEMPLATE_DETAILS,\n    { templateId },\n    {\n      staleTime: 5 * 60 * 1000,\n      onError: (err) => {\n        toast.error(`Erro ao buscar detalhes do template: ${err.message}`);\n      }\n    }\n  );\n\n  const updatePersonaMutation = useIpcMutation<\n    UpdatePersonaTemplateRequest,\n    IPCResponse<UpdatePersonaTemplateResponseData>\n  >(\n    IPC_CHANNELS.UPDATE_PERSONA_TEMPLATE,\n    {\n      onSuccess: (response) => {\n        if (response.success && response.data) {\n          toast.success(`Template \"${response.data.name}\" atualizado com sucesso!`);\n          refetch();\n          // Refetch to update initialValues and header name\n          // Navigate back to the details page\n          router.navigate({ to: '/personas/$templateId', params: { templateId: response.data.id }, replace: true });\n        } else {\n          toast.error(`Falha ao atualizar o template: ${response.error?.message || 'Erro desconhecido.'}`);\n        }\n      },\n      onError: (error) => {\n        toast.error(`Falha ao atualizar o template: ${error.message}`);\n      },\n    }\n  );\n\n  const handleSubmit = async (formData: PersonaTemplateFormData) => {\n    console.log('Dados atualizados do template de persona:', templateId, formData);\n    updatePersonaMutation.mutate({ templateId, data: formData });\n  };\n\n  const loadingOrError = EditPersonaTemplateLoadingErrorDisplay({isLoading: isLoadingTemplate, error: templateError, templateId});\n  if (loadingOrError) {\n    return loadingOrError;\n  }\n\n  // If personaTemplate is null after loading without error, it means not found.\n  if (!personaTemplate) {\n    return (\n      <div className=\"p-8 text-center\">\n         <ServerCrash className=\"h-12 w-12 text-slate-500 dark:text-slate-400 mb-4\" />\n        <p className=\"text-lg\">Template de Persona com ID \"{templateId}\" não encontrado.</p>\n         <Button variant=\"outline\" className=\"mt-4\" asChild>\n            <Link to=\"/personas\"><ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Lista de Personas</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <EditPersonaTemplateFormRenderer\n      templateId={templateId}\n      personaTemplate={personaTemplate}\n      handleSubmit={handleSubmit}\n      isSubmitting={updatePersonaMutation.isLoading}\n    />\n  );\n}\n\nexport const Route = createFileRoute('/(app)/personas/$templateId/edit/')({\n  component: EditPersonaTemplatePage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/docs/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/index.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":25,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1186,1226],"text":"Informações chave e estatísticas sobre &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1186,1226],"text":"Informações chave e estatísticas sobre &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1186,1226],"text":"Informações chave e estatísticas sobre &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1186,1226],"text":"Informações chave e estatísticas sobre &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":25,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1240,1242],"text":"&quot;."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1240,1242],"text":"&ldquo;."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1240,1242],"text":"&#34;."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1240,1242],"text":"&rdquo;."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createFileRoute, Outlet, useParams, Link, useRouter } from '@tanstack/react-router';\nimport { ArrowLeft, Settings, Play, Pause, CheckCircle, Clock, AlertTriangle, ChevronDown, Trash2 } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { toast } from 'sonner';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/presentation/ui/components/ui/dropdown-menu';\nimport { ProjectContextSidebar } from '@/presentation/ui/features/project/components/layout/ProjectContextSidebar';\nimport { ProjectParticipantsSidebar } from '@/presentation/ui/features/project/components/layout/ProjectParticipantsSidebar';\nimport { Project } from '@/presentation/ui/features/project/components/ProjectListItem';\n\n\nconst OverviewTabContent = ({ project }: { project: Project }) => (\n  <div className=\"space-y-6\">\n    <Card>\n      <CardHeader>\n        <CardTitle>Resumo do Projeto</CardTitle>\n        <CardDescription>Informações chave e estatísticas sobre \"{project.name}\".</CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-4 md:grid-cols-2\">\n        <div>\n          <h4 className=\"font-medium mb-1\">Status Atual</h4>\n          <p className=\"text-sm text-slate-700 dark:text-slate-300\">{project.status}</p>\n        </div>\n        <div>\n          <h4 className=\"font-medium mb-1\">Última Atividade</h4>\n          <p className=\"text-sm text-slate-700 dark:text-slate-300\">{project.lastActivity}</p>\n        </div>\n        <div>\n          <h4 className=\"font-medium mb-1\">Agentes Envolvidos</h4>\n          <p className=\"text-sm text-slate-700 dark:text-slate-300\">{project.agentCount}</p>\n        </div>\n        <div>\n          <h4 className=\"font-medium mb-1\">Total de Tarefas (Conceitual)</h4>\n          <p className=\"text-sm text-slate-700 dark:text-slate-300\">{project.taskCount}</p>\n        </div>\n        <div className=\"md:col-span-2\">\n          <h4 className=\"font-medium mb-1\">Descrição Completa</h4>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400 whitespace-pre-line\">\n            {project.description || \"Nenhuma descrição detalhada fornecida.\"}\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n    <Card>\n      <CardHeader>\n        <CardTitle>Atividade Recente (Placeholder)</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n          Feed de atividades recentes do projeto aparecerá aqui...\n        </p>\n      </CardContent>\n    </Card>\n  </div>\n);\n\n// Mock data - replace with actual data fetching\nconst mockProjectsData: Record<string, Project> = {\n  mockId1: { id: '1', name: 'Projeto Phoenix', description: 'Reconstrução da plataforma principal...', status: 'active', lastActivity: '2 horas atrás', agentCount: 5, taskCount: 23 },\n  mockId2: { id: '2', name: 'Operação Quimera', description: 'Integração de múltiplos serviços...', status: 'paused', lastActivity: '1 dia atrás', agentCount: 2, taskCount: 8 },\n  mockId3: { id: '3', name: 'Iniciativa Netuno', description: 'Desenvolvimento de um novo data lake...', status: 'planning', lastActivity: '5 dias atrás', agentCount: 1, taskCount: 2 },\n};\n\nconst statusDetails: Record<Project['status'], { label: string; icon: React.ElementType; colorClass: string }> = {\n  active: { label: 'Ativo', icon: Play, colorClass: 'text-green-500 dark:text-green-400' },\n  paused: { label: 'Pausado', icon: Pause, colorClass: 'text-yellow-500 dark:text-yellow-400' },\n  planning: { label: 'Planejamento', icon: Clock, colorClass: 'text-blue-500 dark:text-blue-400' },\n  completed: { label: 'Concluído', icon: CheckCircle, colorClass: 'text-slate-500 dark:text-slate-400' },\n  archived: { label: 'Arquivado', icon: AlertTriangle, colorClass: 'text-red-500 dark:text-red-400' },\n};\n\n// This component now acts as the LAYOUT for /projects/$projectId and its children (tabs)\nfunction ProjectDetailLayoutPage() {\n  const params = useParams({ from: '/(app)/projects/$projectId/' });\n  const projectId = params.projectId;\n  const [project, setProject] = useState<Project | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const router = useRouter();\n  const currentPath = router.state.location.pathname;\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    setTimeout(() => {\n      const foundProject = mockProjectsData[projectId];\n      setProject(foundProject || null);\n      setIsLoading(false);\n      if (!foundProject) {\n        toast.error(`Projeto com ID \"${projectId}\" não encontrado.`);\n      }\n    }, 300);\n  }, [projectId]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-full items-center justify-center p-8\">\n        Carregando detalhes do projeto...\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div className=\"p-8 text-center\">\n        <h2 className=\"text-xl font-semibold mb-2\">Projeto não encontrado</h2>\n        <Button asChild variant=\"outline\">\n          <Link to=\"/projects\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Projetos\n          </Link>\n        </Button>\n      </div>\n    );\n  }\n\n  const currentStatusDetail = statusDetails[project.status];\n\n  // The main AppSidebar is already part of the (app)/_layout.tsx\n  // This page will have its own ProjectContextSidebar and the main content area with Outlet\n  return (\n    <div className=\"flex h-full\">\n      <ProjectContextSidebar project={project} className=\"h-full\" />\n\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"p-4 md:p-6 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 flex-shrink-0\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-50\">\n                {project.name}\n              </h1>\n              <div className=\"mt-1 flex items-center space-x-2\">\n                <currentStatusDetail.icon className={`h-4 w-4 ${currentStatusDetail.colorClass}`} />\n                <span className={`text-xs font-medium ${currentStatusDetail.colorClass}`}>\n                  {currentStatusDetail.label}\n                </span>\n                <span className=\"text-xs text-slate-500 dark:text-slate-400\">| Última atividade: {project.lastActivity}</span>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                 <Link to=\"./settings\" params={{projectId: project.id}}>\n                    <Settings className=\"mr-1.5 h-3.5 w-3.5\" /> Configurações\n                 </Link>\n              </Button>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Ações <ChevronDown className=\"ml-2 h-3.5 w-3.5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem>\n                    <Play className=\"mr-2 h-4 w-4\" /> Ativar/Continuar\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Pause className=\"mr-2 h-4 w-4\" /> Pausar Projeto\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem className=\"text-red-500 focus:text-red-600 dark:focus:text-red-500 dark:focus:bg-red-900/50\">\n                    <Trash2 className=\"mr-2 h-4 w-4\" /> Excluir Projeto\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </header>\n\n        {/* Content Area for Tabs (rendered by Outlet) or Overview */}\n        <div className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n            {(currentPath === `/projects/${params.projectId}` || currentPath === `/projects/${params.projectId}/`) ? (\n                <OverviewTabContent project={project} />\n            ) : (\n                <Outlet />\n            )}\n        </div>\n      </div>\n\n      {/* Right Sidebar for Participants */}\n      <ProjectParticipantsSidebar className=\"h-full\" />\n    </div>\n  );\n}\n\n// This route now acts as a layout route for its children (the tabs)\nexport const Route = createFileRoute('/(app)/projects/$projectId/')({\n  component: ProjectDetailLayoutPage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/members/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/appearance/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/$configId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/profile/index.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unused-vars').","line":34,"column":3,"severity":1,"nodeType":null,"fix":{"range":[1470,1531],"text":" "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCurrentAvatar' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { zodResolver } from '@hookform/resolvers/zod';\nimport { createFileRoute, Link } from '@tanstack/react-router';\nimport { ArrowLeft, UserCircle, UploadCloud } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'sonner';\nimport { z } from 'zod';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/presentation/ui/components/ui/avatar';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/presentation/ui/components/ui/form';\nimport { Input } from '@/presentation/ui/components/ui/input';\n\nconst profileFormSchema = z.object({\n  displayName: z.string().min(2, 'O nome deve ter pelo menos 2 caracteres.').max(50, 'O nome não pode exceder 50 caracteres.'),\n  // Email geralmente não é editável pelo usuário diretamente\n  email: z.string().email('Email inválido.').optional(),\n  // avatarFile: z.instanceof(File).optional(), // Para upload de arquivo real\n});\n\ntype ProfileFormData = z.infer<typeof profileFormSchema>;\n\n// Mock user data\nconst mockUser = {\n  displayName: 'J. Doe',\n  email: 'j.doe@example.com',\n  // Placeholder avatar\n  avatarUrl: '/avatars/01.png',\n};\n\nfunction UserProfilePage() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  // Para exibir o avatar\n  const [currentAvatar, setCurrentAvatar] = useState<string | null>(mockUser.avatarUrl);\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      displayName: mockUser.displayName,\n      email: mockUser.email,\n    },\n  });\n\n  const onSubmit = async (data: ProfileFormData) => {\n    setIsSubmitting(true);\n    console.log('Dados do perfil submetidos:', data);\n    // Simular salvamento\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    // Atualizar mock (apenas para demo)\n    mockUser.displayName = data.displayName;\n    // Se houvesse upload de avatar, aqui seria o local para processá-lo\n    toast.success('Perfil atualizado com sucesso (simulado)!');\n    setIsSubmitting(false);\n  };\n\n  return (\n    <div className=\"p-4 md:p-6 lg:p-8 max-w-2xl mx-auto\">\n      <Button variant=\"outline\" size=\"sm\" className=\"mb-4\" asChild>\n        <Link to=\"/settings\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Configurações\n        </Link>\n      </Button>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Perfil do Usuário</CardTitle>\n          <CardDescription>Gerencie suas informações pessoais e preferências.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex flex-col items-center space-y-3\">\n            <Avatar className=\"h-24 w-24 ring-2 ring-offset-2 dark:ring-offset-slate-900 ring-sky-500\">\n              <AvatarImage src={currentAvatar || undefined} alt={form.watch('displayName')} />\n              <AvatarFallback className=\"text-3xl\">\n                {form.watch('displayName')?.substring(0, 1).toUpperCase() || <UserCircle size={40}/>}\n              </AvatarFallback>\n            </Avatar>\n            <Button variant=\"outline\" size=\"sm\" className=\"relative\">\n               <UploadCloud className=\"mr-2 h-4 w-4\" />\n              Alterar Avatar (Não implementado)\n              {/* <Input type=\"file\" className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                     accept=\"image/*\"\n                     onChange={(e) => {\n                        if (e.target.files && e.target.files[0]) {\n                           // form.setValue('avatarFile', e.target.files[0]);\n                           // setCurrentAvatar(URL.createObjectURL(e.target.files[0]));\n                           toast.info(\"Upload de avatar ainda não implementado.\");\n                        }\n                     }}\n              /> */}\n            </Button>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"displayName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome de Exibição</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Seu nome\" {...field} />\n                    </FormControl>\n                    <FormDescription>Como seu nome aparecerá na aplicação.</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"seu@email.com\" {...field} disabled />\n                    </FormControl>\n                    <FormDescription>Seu endereço de email (não pode ser alterado aqui).</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end pt-2\">\n                <Button type=\"submit\" disabled={isSubmitting || !form.formState.isDirty}>\n                  {isSubmitting ? 'Salvando...' : 'Salvar Alterações'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(app)/settings/profile/')({\n  component: UserProfilePage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/dm/$conversationId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/index.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":117,"column":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createFileRoute, Link } from '@tanstack/react-router';\nimport { MessageSquareText, Settings, UserCircle, Activity, Users, Bot as BotIcon } from 'lucide-react';\nimport React from 'react';\n\n// AvatarImage not used in this version\nimport { Avatar, AvatarFallback } from '@/presentation/ui/components/ui/avatar';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\n\n// Mock data for quick stats or recent activity (can be expanded)\nconst userStatsMock = {\n  // From mockDirectMessages in UserSidebar\n  unreadDms: 3,\n  // From mockDirectMessages filtering agents\n  activeAgents: 2,\n  // Example\n  projectsInvolved: 3,\n};\n\n// Define a more specific type for Link 'to' props for type safety with TanStack Router\ntype RecentActivityLink =\n  | '/user/dm/$conversationId'\n  | '/projects/$projectId'\n  | '/settings/llm'\n  | '/settings/appearance'\n  | '/settings/profile'\n  | '/settings';\n\n// Define a more specific type for the `params` prop of the Link component\n// This helps satisfy the `no-explicit-any` ESLint rule.\n// It's a union of possible parameter objects for the links in recentUserActivityMock.\ntype ActivityLinkParams =\n  | { conversationId: string }\n  | { projectId: string }\n  // For links that don't have params like /settings/appearance\n  | undefined;\n\nconst recentUserActivityMock: {id: string, text: string, time: string, type: string, linkTo: RecentActivityLink, icon: React.ElementType, params?: ActivityLinkParams}[] = [\n    {id: '1', text: \"Nova mensagem de CoderBot-Alpha.\", time: \"5m atrás\", type: \"dm\", linkTo: \"/user/dm/$conversationId\", params: {conversationId: 'agent001'}, icon: BotIcon},\n    {id: '2', text: \"Alice (Designer) enviou uma nova mensagem.\", time: \"10m atrás\", type: \"dm\", linkTo: \"/user/dm/$conversationId\", params: {conversationId: 'userAlice'}, icon: UserCircle},\n    // No params needed\n    {id: '3', text: \"Você atualizou suas configurações de Aparência.\", time: \"3h atrás\", type: \"settings\", linkTo: \"/settings/appearance\", icon: Settings},\n    {id: '4', text: \"Nova atividade no Projeto Phoenix.\", time: \"1d atrás\", type: \"project\", linkTo: \"/projects/$projectId\", params: {projectId: 'mockId1'}, icon: Activity},\n];\n\nfunction UserPageHeader() {\n  return (\n    <header className=\"mb-8\">\n      <h1 className=\"text-2xl md:text-3xl font-bold text-slate-800 dark:text-slate-100\">\n        Sua Área Pessoal\n      </h1>\n      <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n        Bem-vindo! Gerencie suas conversas diretas, acompanhe atividades e acesse suas configurações.\n      </p>\n    </header>\n  );\n}\n\nfunction UserPageHeader() {\n  return (\n    <header className=\"mb-8\">\n      <h1 className=\"text-2xl md:text-3xl font-bold text-slate-800 dark:text-slate-100\">\n        Sua Área Pessoal\n      </h1>\n      <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n        Bem-vindo! Gerencie suas conversas diretas, acompanhe atividades e acesse suas configurações.\n      </p>\n    </header>\n  );\n}\n\nfunction UserQuickStats() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n      <Card className=\"hover:shadow-md transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Mensagens Não Lidas</CardTitle>\n          <MessageSquareText className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.unreadDms}</div>\n          <p className=\"text-xs text-muted-foreground\">Em suas DMs</p>\n        </CardContent>\n      </Card>\n      <Card className=\"hover:shadow-md transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Agentes Contatados</CardTitle>\n          <BotIcon className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.activeAgents}</div>\n          <p className=\"text-xs text-muted-foreground\">Com quem você interagiu</p>\n        </CardContent>\n      </Card>\n      <Card className=\"hover:shadow-md transition-shadow md:col-span-2 lg:col-span-1\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Projetos Envolvidos</CardTitle>\n          {/* Changed icon to Users */}\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.projectsInvolved}</div>\n          <p className=\"text-xs text-muted-foreground\">Que você participa</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction UserIndexPage() {\n  // This page is the default content shown when navigating to /user/\n  // It serves as a user-specific dashboard or landing spot within their personal area.\n\n  return (\n    <div className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto bg-slate-50 dark:bg-slate-800/20\">\nfunction UserPageHeader() {\n  return (\n    <header className=\"mb-8\">\n      <h1 className=\"text-2xl md:text-3xl font-bold text-slate-800 dark:text-slate-100\">\n        Sua Área Pessoal\n      </h1>\n      <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n        Bem-vindo! Gerencie suas conversas diretas, acompanhe atividades e acesse suas configurações.\n      </p>\n    </header>\n  );\n}\n\nfunction UserQuickStats() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n      <Card className=\"hover:shadow-md transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Mensagens Não Lidas</CardTitle>\n          <MessageSquareText className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.unreadDms}</div>\n          <p className=\"text-xs text-muted-foreground\">Em suas DMs</p>\n        </CardContent>\n      </Card>\n      <Card className=\"hover:shadow-md transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Agentes Contatados</CardTitle>\n          <BotIcon className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.activeAgents}</div>\n          <p className=\"text-xs text-muted-foreground\">Com quem você interagiu</p>\n        </CardContent>\n      </Card>\n      <Card className=\"hover:shadow-md transition-shadow md:col-span-2 lg:col-span-1\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Projetos Envolvidos</CardTitle>\n          {/* Changed icon to Users */}\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.projectsInvolved}</div>\n          <p className=\"text-xs text-muted-foreground\">Que você participa</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction UserQuickAccess() {\n  return (\n    <div className=\"lg:col-span-1 space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Acesso Rápido</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex flex-col space-y-2\">\n          <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n            <Link to=\"/user/dm/$conversationId\" params={{conversationId: 'agent001'}}>\n              <MessageSquareText className=\"mr-2 h-4 w-4 text-sky-500\"/>\n              Conversar com CoderBot\n            </Link>\n          </Button>\n          <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n            <Link to=\"/settings/profile\">\n              <UserCircle className=\"mr-2 h-4 w-4 text-green-500\"/>\n              Editar Meu Perfil\n            </Link>\n          </Button>\n            <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n            <Link to=\"/settings\">\n              <Settings className=\"mr-2 h-4 w-4 text-slate-500\"/>\n              Ver Todas Configurações\n            </Link>\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction UserIndexPage() {\n  // This page is the default content shown when navigating to /user/\n  // It serves as a user-specific dashboard or landing spot within their personal area.\n\n  return (\n    <div className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto bg-slate-50 dark:bg-slate-800/20\">\nfunction UserPageHeader() {\n  return (\n    <header className=\"mb-8\">\n      <h1 className=\"text-2xl md:text-3xl font-bold text-slate-800 dark:text-slate-100\">\n        Sua Área Pessoal\n      </h1>\n      <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n        Bem-vindo! Gerencie suas conversas diretas, acompanhe atividades e acesse suas configurações.\n      </p>\n    </header>\n  );\n}\n\nfunction UserQuickStats() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n      <Card className=\"hover:shadow-md transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Mensagens Não Lidas</CardTitle>\n          <MessageSquareText className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.unreadDms}</div>\n          <p className=\"text-xs text-muted-foreground\">Em suas DMs</p>\n        </CardContent>\n      </Card>\n      <Card className=\"hover:shadow-md transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Agentes Contatados</CardTitle>\n          <BotIcon className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.activeAgents}</div>\n          <p className=\"text-xs text-muted-foreground\">Com quem você interagiu</p>\n        </CardContent>\n      </Card>\n      <Card className=\"hover:shadow-md transition-shadow md:col-span-2 lg:col-span-1\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Projetos Envolvidos</CardTitle>\n          {/* Changed icon to Users */}\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStatsMock.projectsInvolved}</div>\n          <p className=\"text-xs text-muted-foreground\">Que você participa</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction UserQuickAccess() {\n  return (\n    <div className=\"lg:col-span-1 space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Acesso Rápido</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex flex-col space-y-2\">\n          <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n            <Link to=\"/user/dm/$conversationId\" params={{conversationId: 'agent001'}}>\n              <MessageSquareText className=\"mr-2 h-4 w-4 text-sky-500\"/>\n              Conversar com CoderBot\n            </Link>\n          </Button>\n          <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n            <Link to=\"/settings/profile\">\n              <UserCircle className=\"mr-2 h-4 w-4 text-green-500\"/>\n              Editar Meu Perfil\n            </Link>\n          </Button>\n            <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n            <Link to=\"/settings\">\n              <Settings className=\"mr-2 h-4 w-4 text-slate-500\"/>\n              Ver Todas Configurações\n            </Link>\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction UserRecentActivity() {\n  return (\n    <div className=\"lg:col-span-2\">\n      <Card>\n        <CardHeader>\n          <CardTitle  className=\"text-lg\">Atividade Recente</CardTitle>\n          <CardDescription>Suas últimas interações e notificações importantes.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {recentUserActivityMock.length > 0 ? (\n            <ul className=\"space-y-3\">\n              {recentUserActivityMock.map(activity => {\n                const Icon = activity.icon;\n                return (\n                  <li key={activity.id} className=\"flex items-start space-x-3 p-2 rounded-md hover:bg-slate-50 dark:hover:bg-slate-800/30\">\n                    <Avatar className=\"h-8 w-8 mt-0.5\">\n                      <AvatarFallback className=\"bg-slate-200 dark:bg-slate-700\">\n                        <Icon className=\"h-4 w-4 text-slate-500 dark:text-slate-400\"/>\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <Link\n                        to={activity.linkTo}\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        // Using 'as any' here for mock data demo, real params are typed\n                        params={activity.params as any}\n                        className=\"hover:underline text-sm text-slate-700 dark:text-slate-200\"\n                      >\n                        {activity.text}\n                      </Link>\n                      <span className=\"block text-xs text-slate-500 dark:text-slate-400\">{activity.time}</span>\n                    </div>\n                  </li>\n                )})}\n            </ul>\n          ) : (\n            <p className=\"text-sm text-slate-500 dark:text-slate-400 text-center py-4\">Nenhuma atividade recente para mostrar.</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction UserIndexPage() {\n  // This page is the default content shown when navigating to /user/\n  // It serves as a user-specific dashboard or landing spot within their personal area.\n\n  return (\n    <div className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto bg-slate-50 dark:bg-slate-800/20\">\n      <UserPageHeader />\n      <UserQuickStats />\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <UserQuickAccess />\n        <UserRecentActivity />\n      </div>\n\n      <div className=\"mt-12 text-center\">\n        <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n          Para iniciar uma nova conversa, use a barra lateral à esquerda.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(app)/user/')({\n  component: UserIndexPage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(public)/onboarding/index.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":80,"column":55,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":80,"endColumn":93}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createFileRoute, useRouter } from '@tanstack/react-router';\n// Added useState\nimport React, { useState } from 'react';\n// For feedback on LLM save\nimport { toast } from 'sonner';\n\n// Import type\nimport { LLMConfigFormData } from '@/presentation/ui/features/llm/components/LLMConfigForm';\nimport { InitialConfigStep } from '@/presentation/ui/features/onboarding/components/InitialConfigStep';\nimport { OnboardingWizard } from '@/presentation/ui/features/onboarding/components/OnboardingWizard';\nimport { WelcomeStep } from '@/presentation/ui/features/onboarding/components/WelcomeStep';\n\nfunction OnboardingPageComponent() {\n  const router = useRouter();\n  const [isLLMConfigSaved, setIsLLMConfigSaved] = useState(false);\n  const [isSubmittingLLM, setIsSubmittingLLM] = useState(false);\n\n\n  const handleLLMConfigSaved = (data: LLMConfigFormData) => {\n    // This callback is triggered by InitialConfigStep when its form is submitted successfully\n    console.log(\"LLM Config saved during onboarding:\", data);\n    // No toast here, as InitialConfigStep already shows one.\n    setIsLLMConfigSaved(true);\n    // The OnboardingWizard will typically handle navigation to the next step\n    // or this component can trigger it if the wizard is controlled.\n    // For now, we assume the wizard's \"Next\" button will become active or change behavior.\n  };\n\n  const handleFinishOnboarding = () => {\n    if (!isLLMConfigSaved) {\n      toast.error(\"Por favor, salve uma configuração LLM para continuar.\");\n      // Optionally, force navigation to the LLM config step if the wizard is complex\n      // setCurrentStep('initial-config'); // This would require more state management in OnboardingWizard\n      return;\n    }\n    router.navigate({ to: '/dashboard', replace: true });\n  };\n\n  // Define the steps for the wizard\n  const onboardingSteps = [\n    {\n      id: 'welcome',\n      title: 'Bem-vindo ao Project Wiz!',\n      content: <WelcomeStep />,\n    },\n    {\n      id: 'initial-config',\n      title: 'Configuração Inicial Essencial',\n      content: (\n        <InitialConfigStep\n            onConfigSaved={handleLLMConfigSaved}\n            isSubmitting={isSubmittingLLM}\n            setIsSubmitting={setIsSubmittingLLM}\n        />\n      ),\n    },\n    {\n      id: 'summary',\n      title: 'Pronto para Começar!',\n      content: (\n        <div className=\"text-center\">\n          <h3 className=\"text-xl font-semibold mb-2\">Configuração Concluída!</h3>\n          <p className=\"text-slate-700 dark:text-slate-300\">\n            {isLLMConfigSaved\n              ? \"Sua configuração LLM foi salva. Você está pronto para explorar o Project Wiz!\"\n              : \"Quase lá! Complete a configuração do LLM para finalizar.\"}\n          </p>\n          {!isLLMConfigSaved && (\n            <p className=\"text-sm text-yellow-600 dark:text-yellow-400 mt-2\">\n                A configuração do LLM é necessária para prosseguir.\n            </p>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-100 dark:bg-slate-900\">\n      <div className=\"w-full max-w-xl lg:max-w-2xl\"> {/* Increased max-width for LLM form */}\n        <OnboardingWizard\n          steps={onboardingSteps}\n          onFinish={handleFinishOnboarding}\n          wizardTitle=\"Configuração do Project Wiz\"\n          // Pass a prop to disable \"Next\" on LLM step if not saved, or \"Finish\" on summary\n          // This logic would need to be added to OnboardingWizard component itself.\n          // For simplicity now, the summary step message and onFinish check handle it.\n          // This logic would need to be added to OnboardingWizard component itself.\n          isStepBlocked={ (stepId: string) => stepId === 'summary' && !isLLMConfigSaved }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(public)/onboarding/')({\n  component: OnboardingPageComponent,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/__root.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/MarkdownRenderer.tsx","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'a' is too short (< 2).","line":55,"column":5,"nodeType":"Identifier","messageId":"tooShort","endLine":55,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport ReactMarkdown, { Options } from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n// import rehypeRaw from 'rehype-raw'; // Optional: if you need to render raw HTML from markdown\n// For syntax highlighting:\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'; // Choose a theme\n\nimport { cn } from '@/presentation/ui/lib/utils';\n\ninterface MarkdownRendererProps {\n  content: string | null | undefined;\n  // Custom classes for the wrapper div\n  className?: string;\n  // Custom classes specifically for Tailwind Prose\n  proseClassName?: string;\n  // Allow overriding default HTML element rendering\n  components?: Options['components'];\n}\n\nexport function MarkdownRenderer({\n  content,\n  className,\n  proseClassName,\n  components: customComponents,\n}: MarkdownRendererProps) {\n  if (content === null || content === undefined) {\n    return null;\n  }\n\n  // Base prose classes for Tailwind Typography. Can be extended or overridden by `proseClassName`.\n  const defaultProseSetup = cn(\n    // General styling\n    \"prose prose-sm dark:prose-invert max-w-none\",\n    // Spacing for common elements\n    \"prose-p:my-1.5 prose-headings:my-3 prose-ul:my-1.5 prose-ol:my-1.5 prose-li:my-0.5\",\n    // Blockquotes\n    \"prose-blockquote:my-2 prose-blockquote:not-italic prose-blockquote:border-l-4 prose-blockquote:pl-3 prose-blockquote:text-slate-600 dark:prose-blockquote:text-slate-400\",\n    // Reset <pre> for custom code block styling or syntax highlighter\n    \"prose-pre:my-2 prose-pre:p-0 prose-pre:bg-transparent prose-pre:rounded-md\",\n    // Inline code\n    \"prose-code:px-1 prose-code:py-0.5 prose-code:text-xs prose-code:font-mono prose-code:rounded prose-code:bg-slate-100 dark:prose-code:bg-slate-800\",\n    // Links\n    \"prose-a:text-sky-600 hover:prose-a:text-sky-700 dark:prose-a:text-sky-400 dark:hover:prose-a:text-sky-300 hover:prose-a:underline\",\n    // Tables\n    \"prose-table:my-2 prose-table:text-sm prose-thead:border-b prose-th:px-2 prose-th:py-1 prose-th:font-semibold prose-td:px-2 prose-td:py-1 prose-tr:border-b\",\n    // Allow parent to provide additional/override prose classes\n    proseClassName,\n  );\n\n  // Default component overrides, can be merged with or overridden by `customComponents` prop\n  const defaultComponents: Options['components'] = {\n\n    // Open links in new tab\n    a: ({node: _node, ...props}) => <a {...props} target=\"_blank\" rel=\"noopener noreferrer\" />,\n\n    // Custom styling for code blocks (pre > code)\n    // This is a basic version. For syntax highlighting, you'd integrate react-syntax-highlighter here.\n    // `node` is used here, so no underscore\n    code({ node, className: langClassName, children, ...props }) {\n      const match = /language-(\\w+)/.exec(langClassName || '');\n      const language = match ? match[1] : null;\n\n      // Fenced code block\n      if (node?.parentElement?.tagName === 'pre') {\n        return (\n          <div className=\"my-2 bg-slate-100 dark:bg-slate-800 rounded-md overflow-hidden text-xs\">\n            {language && (\n              <div className=\"px-3 py-1 text-xs text-slate-500 dark:text-slate-400 border-b border-slate-200 dark:border-slate-700\">\n                {language}\n              </div>\n            )}\n            <pre className=\"p-3 overflow-x-auto\"><code className={cn(\"font-mono\", langClassName)} {...props}>{children}</code></pre>\n          </div>\n        );\n      }\n\n      // Inline code (already styled by prose-code:)\n      return (\n        <code className={langClassName} {...props}>\n          {children}\n        </code>\n      );\n    },\n  };\n\n  const mergedComponents = { ...defaultComponents, ...customComponents };\n\n  return (\n    <div className={cn(defaultProseSetup, className)}>\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        // rehypePlugins={[rehypeRaw]} // Uncomment if rendering raw HTML from markdown is needed and trusted\n        components={mergedComponents}\n      >\n        {content}\n      </ReactMarkdown>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/layout/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/calendar.tsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'className' is missing in props validation","line":125,"column":18,"nodeType":"Property","messageId":"missingPropType","endLine":125,"endColumn":27},{"ruleId":"react/prop-types","severity":2,"message":"'rootRef' is missing in props validation","line":125,"column":29,"nodeType":"Property","messageId":"missingPropType","endLine":125,"endColumn":36},{"ruleId":"react/prop-types","severity":2,"message":"'className' is missing in props validation","line":135,"column":21,"nodeType":"Property","messageId":"missingPropType","endLine":135,"endColumn":30},{"ruleId":"react/prop-types","severity":2,"message":"'orientation' is missing in props validation","line":135,"column":32,"nodeType":"Property","messageId":"missingPropType","endLine":135,"endColumn":43}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\";\nimport * as React from \"react\";\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\";\n\nimport { Button, buttonVariants } from \"@/ui/components/ui/button\"; // Corrected path\nimport { cn } from \"@/ui/lib/utils\"; // Corrected path\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"];\n}) {\n  const defaultClassNames = getDefaultClassNames();\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"flex gap-4 flex-col md:flex-row relative\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex flex-col w-full gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames.dropdown),\n        caption_label: cn(\n          \"select-none font-medium\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"flex w-full mt-2\", defaultClassNames.week),\n        week_number_header: cn(\n          \"select-none w-(--cell-size)\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-[0.8rem] select-none text-muted-foreground\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"rounded-l-md bg-accent\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          );\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            );\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            );\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          );\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          );\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames();\n\n  const ref = React.useRef<HTMLButtonElement>(null);\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus();\n  }, [modifiers.focused]);\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Calendar, CalendarDayButton };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/skeleton.tsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":37,"fix":{"range":[36,36],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`react` import should occur before import of `@/ui/lib/utils`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":27,"fix":{"range":[0,64],"text":"import React from \"react\";\nimport { cn } from \"@/ui/lib/utils\";\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { cn } from \"@/ui/lib/utils\";\nimport React from \"react\";\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentLLMConfigSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentPersonaTemplateSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentTemperatureSliderField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatWindow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ConversationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigList.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":21,"column":23,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":21,"endColumn":62},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":29,"column":39,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":29,"endColumn":87},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":30,"column":42,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":30,"endColumn":92}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Icons for edit/delete\nimport { Pencil, Trash2 } from 'lucide-react';\nimport React from 'react';\n\n// To display provider type\nimport { Badge } from '@/presentation/ui/components/ui/badge';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/presentation/ui/components/ui/table';\n\n// This type would ideally come from a shared location or be generated from backend types\nexport interface LLMConfig {\n  id: string;\n  name: string;\n  providerId: string; // e.g., 'openai', 'deepseek', 'ollama'\n  // apiKey: string; // Sensitive, usually not displayed directly\n  baseUrl?: string;\n  // createdAt: string; // Or Date object\n}\n\ninterface LLMConfigListProps {\n  configs: LLMConfig[];\n  onEdit: (configId: string) => void; // Will navigate to /settings/llm/$configId/edit\n  onDelete: (config: LLMConfig) => void; // Pass full config object for delete confirmation\n}\n\nconst providerDisplayNames: Record<string, string> = {\n  openai: 'OpenAI',\n  deepseek: 'DeepSeek',\n  ollama: 'Ollama',\n};\n\nexport function LLMConfigList({ configs, onEdit, onDelete }: LLMConfigListProps) {\n  if (!configs || configs.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-slate-500 dark:text-slate-400\">\n          Nenhuma configuração de LLM encontrada.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Nome da Configuração</TableHead>\n            <TableHead>Provedor</TableHead>\n            <TableHead>URL Base</TableHead>\n            <TableHead className=\"text-right\">Ações</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {configs.map((config) => (\n            <TableRow key={config.id}>\n              <TableCell className=\"font-medium\">{config.name}</TableCell>\n              <TableCell>\n                <Badge variant=\"outline\">\n                  {providerDisplayNames[config.providerId] || config.providerId}\n                </Badge>\n              </TableCell>\n              <TableCell>{config.baseUrl || 'N/A'}</TableCell>\n              <TableCell className=\"text-right space-x-2\">\n                <Button variant=\"ghost\" size=\"icon\" onClick={() => onEdit(config.id)} title=\"Editar Configuração\">\n                  <Pencil className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Editar</span>\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" onClick={() => onDelete(config)} title=\"Excluir Configuração\">\n                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  <span className=\"sr-only\">Excluir</span>\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ApiKeyField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/BaseUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ConfigNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ProviderSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/InitialConfigStep.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":7,"column":53,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":7,"endColumn":104},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":8,"column":27,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":8,"endColumn":75},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":9,"column":54,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":9,"endColumn":111},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":34,"column":26,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":34,"endColumn":65},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":54,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2486,2635],"text":"\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de &quot;Configurações\" da aplicação.\n      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2486,2635],"text":"\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de &ldquo;Configurações\" da aplicação.\n      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2486,2635],"text":"\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de &#34;Configurações\" da aplicação.\n      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2486,2635],"text":"\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de &rdquo;Configurações\" da aplicação.\n      "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":54,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2486,2635],"text":"\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de \"Configurações&quot; da aplicação.\n      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2486,2635],"text":"\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de \"Configurações&ldquo; da aplicação.\n      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2486,2635],"text":"\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de \"Configurações&#34; da aplicação.\n      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2486,2635],"text":"\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de \"Configurações&rdquo; da aplicação.\n      "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { toast } from 'sonner';\n\nimport { LLMConfigForm, LLMConfigFormData } from '@/presentation/ui/features/llm/components/LLMConfigForm';\n\ninterface InitialConfigStepProps {\n  onConfigSaved: (data: LLMConfigFormData) => void; // Callback when LLM config is successfully \"saved\"\n  isSubmitting?: boolean; // Optional: if parent controls submission state\n  setIsSubmitting?: (isSubmitting: boolean) => void; // Optional: to let this component control parent's state\n}\n\nexport function InitialConfigStep({ onConfigSaved, isSubmitting: parentIsSubmitting, setIsSubmitting: parentSetIsSubmitting }: InitialConfigStepProps) {\n  // Use local submitting state if parent doesn't provide one\n  const [internalIsSubmitting, internalSetIsSubmitting] = React.useState(false);\n  const isSubmitting = parentIsSubmitting ?? internalIsSubmitting;\n  const setIsSubmitting = parentSetIsSubmitting ?? internalSetIsSubmitting;\n\n\n  const handleSubmit = async (data: LLMConfigFormData) => {\n    setIsSubmitting(true);\n    console.log('LLM Config data from Onboarding:', data);\n\n    // Simulate saving the LLM configuration\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    // In a real app, you'd call an IPC handler here.\n    // For now, we assume success and call the callback.\n\n    // Important: Add the new config to the mock DB or a global store if other parts of the app need it immediately\n    // For example, if mockLlmConfigsDb is accessible (e.g. via a Zustand store or by passing it down):\n    // const newConfigId = `config-${Date.now()}`;\n    // mockLlmConfigsDb[newConfigId] = { ...data, id: newConfigId };\n\n    toast.success(`Configuração LLM \"${data.name}\" salva com sucesso (simulado)!`);\n    onConfigSaved(data); // Notify parent that config is \"saved\"\n    setIsSubmitting(false);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <h3 className=\"text-xl font-semibold mb-1\">Configuração Inicial Essencial</h3>\n        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n          Para que os Agentes IA do Project Wiz funcionem, eles precisam de acesso a um\n          Provedor de Modelo de Linguagem (LLM). Por favor, configure seu primeiro provedor.\n        </p>\n      </div>\n      <LLMConfigForm\n        onSubmit={handleSubmit}\n        isSubmitting={isSubmitting}\n        submitButtonText=\"Salvar Configuração LLM e Continuar\"\n      />\n       <p className=\"mt-3 text-xs text-slate-500 dark:text-slate-400 text-center\">\n        Você poderá adicionar mais provedores ou modificar esta configuração posteriormente\n        na seção de \"Configurações\" da aplicação.\n      </p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/OnboardingWizard.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":17,"column":74,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":17,"endColumn":107},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":35,"column":61,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":35,"endColumn":107},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":47,"column":22,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":47,"endColumn":87},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":72,"column":99,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":72,"endColumn":125}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, ReactNode } from 'react';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport { Progress } from '@/presentation/ui/components/ui/progress';\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  content: ReactNode;\n}\n\ninterface OnboardingWizardProps {\n  steps: OnboardingStep[];\n  onFinish: () => void;\n  wizardTitle?: string;\n  isStepBlocked?: (stepId: string, currentStepIndex: number) => boolean; // Optional: to block next/finish\n}\n\nexport function OnboardingWizard({\n  steps,\n  onFinish,\n  wizardTitle = \"Onboarding\",\n  isStepBlocked\n}: OnboardingWizardProps) {\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n\n  const currentStep = steps[currentStepIndex];\n  const progressValue = ((currentStepIndex + 1) / steps.length) * 100;\n\n  // Determine if the current step should block progression\n  const isBlocked = isStepBlocked ? isStepBlocked(currentStep.id, currentStepIndex) : false;\n\n  const goToNextStep = () => {\n    if (isBlocked && currentStepIndex < steps.length - 1) { // Check if current step is blocked for \"Next\"\n        // Optionally show a message, but parent component (OnboardingPage) shows toast for LLM\n        return;\n    }\n    setCurrentStepIndex((prev) => Math.min(prev + 1, steps.length - 1));\n  };\n\n  const goToPreviousStep = () => {\n    setCurrentStepIndex((prev) => Math.max(prev - 1, 0));\n  };\n\n  const handleFinishClick = () => {\n    if (isBlocked) { // Check if current step (likely summary) is blocked for \"Finish\"\n         // Parent (OnboardingPage) handles the specific toast message for LLM config not saved\n        return;\n    }\n    onFinish();\n  }\n\n\n  if (!currentStep) {\n    return <div>Error: No current step defined.</div>;\n  }\n\n  // Determine if the \"Next\" or \"Finish\" button should be disabled\n  // The \"Next\" button is disabled if the current step is blocked by the isStepBlocked condition.\n  // The \"Finish\" button is also disabled if the current (last) step is blocked.\n  const isNextButtonDisabled = isBlocked && (currentStepIndex < steps.length - 1);\n  const isFinishButtonDisabled = isBlocked && (currentStepIndex === steps.length - 1);\n\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">{wizardTitle}</CardTitle>\n        <CardDescription>{currentStep.title} (Etapa {currentStepIndex + 1} de {steps.length})</CardDescription>\n      </CardHeader>\n      <CardContent className=\"min-h-[250px] md:min-h-[300px] py-6 flex flex-col justify-center\"> {/* Increased min-height */}\n        {currentStep.content}\n      </CardContent>\n      <CardFooter className=\"flex flex-col items-center space-y-4 pt-6\">\n        <Progress value={progressValue} className=\"w-full mb-4\" />\n        <div className=\"flex w-full justify-between\">\n          <Button variant=\"outline\" onClick={goToPreviousStep} disabled={currentStepIndex === 0}>\n            Anterior\n          </Button>\n          {currentStepIndex < steps.length - 1 ? (\n            <Button onClick={goToNextStep} disabled={isNextButtonDisabled}>\n              Próximo\n            </Button>\n          ) : (\n            <Button onClick={handleFinishClick} disabled={isFinishButtonDisabled}>\n              Finalizar\n            </Button>\n          )}\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/PersonaList.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":1,"column":46,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":1,"endColumn":72},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":7,"column":51,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":7,"endColumn":81},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":14,"column":29,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":14,"endColumn":92},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":61,"column":35,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":61,"endColumn":85},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":68,"column":65,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":68,"endColumn":104}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CheckCircle2 } from 'lucide-react'; // Icon for selected state\nimport React from 'react';\n\n// Button import removed as it's not used\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/presentation/ui/components/ui/card';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { cn } from '@/presentation/ui/lib/utils'; // For conditional class names\n\n// Define the Persona type\nexport interface Persona {\n  id: string;\n  name: string;\n  description: string;\n  icon?: React.ElementType; // Placeholder for an icon component or URL string for an image\n  tags?: string[];\n}\n\n// Define props for the PersonaList component\ninterface PersonaListProps {\n  personas: Persona[];\n  selectedPersonaId?: string | null;\n  onSelectPersona: (personaId: string) => void;\n  className?: string;\n  cardClassName?: string;\n}\n\n// Placeholder personas data (will be passed as a prop in a real scenario)\nconst placeholderPersonas: Persona[] = [\n  {\n    id: 'developer',\n    name: 'Software Developer',\n    description: 'Helps with coding tasks, debugging, and software design.',\n    tags: ['Coding', 'Debugging', 'Development'],\n    // icon: Code, // Example if using lucide-react icons directly\n  },\n  {\n    id: 'writer',\n    name: 'Content Writer',\n    description: 'Assists in writing articles, blog posts, and other content.',\n    tags: ['Writing', 'Content Creation', 'Marketing'],\n    // icon: FileText,\n  },\n  {\n    id: 'researcher',\n    name: 'Researcher',\n    description: 'Helps gather information, summarize findings, and analyze data.',\n    tags: ['Research', 'Analysis', 'Data'],\n    // icon: Search,\n  },\n  {\n    id: 'project_manager',\n    name: 'Project Manager',\n    description: 'Assists in planning, organizing, and managing project tasks.',\n    tags: ['Planning', 'Organization', 'Management'],\n    // icon: Briefcase,\n  },\n];\n\n\nexport function PersonaList({\n  personas = placeholderPersonas, // Use placeholder if no personas prop is provided\n  selectedPersonaId,\n  onSelectPersona,\n  className,\n  cardClassName,\n}: PersonaListProps) {\n  return (\n    <ScrollArea className={cn(\"h-[400px] w-full\", className)}> {/* Default height, can be overridden */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-1\">\n        {/* Content for rendering persona items will be added in the next step */}\n        {personas.map((persona) => (\n          <Card\n            key={persona.id}\n            onClick={() => onSelectPersona(persona.id)}\n            className={cn(\n              \"cursor-pointer transition-all hover:shadow-lg dark:hover:bg-slate-800/60\",\n              selectedPersonaId === persona.id\n                ? \"border-sky-500 dark:border-sky-400 ring-2 ring-sky-500 dark:ring-sky-400 bg-sky-50 dark:bg-sky-900/30\"\n                : \"border-slate-200 dark:border-slate-700 hover:border-slate-300 dark:hover:border-slate-600\",\n              cardClassName\n            )}\n          >\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-lg\">{persona.name}</CardTitle>\n                  {persona.icon && <persona.icon className=\"w-8 h-8 mt-2 text-slate-600 dark:text-slate-400\" />}\n                </div>\n                {selectedPersonaId === persona.id && (\n                  <CheckCircle2 className=\"w-6 h-6 text-sky-500 dark:text-sky-400\" />\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <CardDescription className=\"text-sm mb-3\">{persona.description}</CardDescription>\n              {persona.tags && persona.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-1.5\">\n                  {persona.tags.map(tag => (\n                    <span key={tag} className=\"px-2 py-0.5 text-xs bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full\">\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n            {/* Optionally, a select button within the card if preferred over clicking the whole card\n            <CardFooter>\n              <Button\n                variant={selectedPersonaId === persona.id ? \"default\" : \"outline\"}\n                className=\"w-full\"\n                onClick={(e) => { e.stopPropagation(); onSelectPersona(persona.id); }}\n              >\n                {selectedPersonaId === persona.id ? \"Selected\" : \"Select\"}\n              </Button>\n            </CardFooter>\n            */}\n          </Card>\n        ))}\n        {personas.length === 0 && (\n          <p className=\"col-span-full text-center text-slate-500 dark:text-slate-400 py-10\">\n            No personas available for selection.\n          </p>\n        )}\n      </div>\n    </ScrollArea>\n  );\n}\n\nexport default PersonaList;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/WelcomeStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaBackstoryField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaGoalField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaRoleField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaToolsField.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":12,"column":48,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":12,"endColumn":70}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { X } from 'lucide-react';\nimport React from 'react';\nimport { Control, Controller } from 'react-hook-form';\n\nimport { Badge } from '@/presentation/ui/components/ui/badge';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport {\n  FormDescription,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/presentation/ui/components/ui/form'; // FormControl removed\nimport { Input } from '@/presentation/ui/components/ui/input';\n\nimport type { PersonaTemplateFormData } from '../PersonaTemplateForm';\n\n// TODO: Consider moving this to a shared config or fetching from backend if dynamic\nconst AVAILABLE_TOOLS = [\n  { id: 'filesystem', label: 'File System (Leitura/Escrita)' },\n  { id: 'terminal', label: 'Terminal (Executar Comandos)' },\n  { id: 'codeEditor', label: 'Editor de Código (Visualizar/Modificar)' },\n  { id: 'search', label: 'Busca Web/Local' },\n  { id: 'testRunner', label: 'Executor de Testes' },\n  { id: 'issueTracker', label: 'Rastreador de Issues' },\n  { id: 'browserDevTools', label: 'Ferramentas de Desenvolvedor do Navegador' },\n  { id: 'taskManager', label: 'Gerenciador de Tarefas (Interno)' },\n];\n\n// Base props for field components\ninterface FormFieldProps {\n  control: Control<PersonaTemplateFormData>;\n}\n\ninterface PersonaToolsFieldProps extends FormFieldProps {\n  currentToolInput: string;\n  setCurrentToolInput: React.Dispatch<React.SetStateAction<string>>;\n  handleAddTool: () => void;\n  handleRemoveTool: (tool: string) => void;\n}\n\nexport function PersonaToolsField({ control, currentToolInput, setCurrentToolInput, handleAddTool, handleRemoveTool }: PersonaToolsFieldProps) {\n  return (\n    <FormItem>\n      <FormLabel>Ferramentas Permitidas</FormLabel>\n      <div className=\"flex items-center gap-2\">\n        <Input\n          placeholder=\"Digite o nome de uma ferramenta (ex: filesystem)\"\n          value={currentToolInput}\n          onChange={(event) => setCurrentToolInput(event.target.value)}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter' && currentToolInput.trim() !== '') {\n              event.preventDefault();\n              handleAddTool();\n            }\n          }}\n          className=\"flex-grow\"\n        />\n        <Button type=\"button\" variant=\"outline\" onClick={handleAddTool} disabled={!currentToolInput.trim()}>\n          Adicionar\n        </Button>\n      </div>\n      <FormDescription>\n        Liste as ferramentas que esta persona poderá utilizar (pressione Enter ou clique Adicionar).\n        Exemplos: {AVAILABLE_TOOLS.slice(0,3).map(tool => tool.id).join(', ')}...\n      </FormDescription>\n      <Controller\n        control={control}\n        name=\"toolNames\"\n        render={({ field }) => (\n          <div className=\"mt-2 space-x-2 space-y-2\">\n            {field.value?.map((tool) => (\n              <Badge key={tool} variant=\"secondary\" className=\"whitespace-nowrap\">\n                {tool}\n                <button\n                  type=\"button\"\n                  className=\"ml-1.5 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                  onClick={() => handleRemoveTool(tool)}\n                >\n                  <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                </button>\n              </Badge>\n            ))}\n          </div>\n        )}\n      />\n      <FormMessage />\n    </FormItem>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectCard.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":3,"column":61,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":3,"endColumn":99},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":23,"column":34,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":23,"endColumn":67},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":25,"column":22,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":25,"endColumn":52},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":47,"column":33,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":47,"endColumn":71},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":51,"column":48,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":51,"endColumn":98}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link }\n  from '@tanstack/react-router';\nimport { Star, GitFork, CalendarDays } from 'lucide-react'; // Example icons, removed ExternalLink\nimport React from 'react';\n\nimport { Badge } from '@/presentation/ui/components/ui/badge';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/presentation/ui/components/ui/card';\nimport { cn } from '@/presentation/ui/lib/utils';\n\n\n// Define the ProjectSummary type/interface\nexport interface ProjectSummary {\n  id: string;\n  name: string;\n  description: string;\n  lastUpdatedAt?: string | Date; // Could be string or Date object\n  tags?: string[];\n  imageUrl?: string; // Optional image for the card\n  // Example additional fields for a more \"discord-like\" project card feel\n  starCount?: number;\n  forkCount?: number;\n  owner?: {\n    name: string;\n    avatarUrl?: string;\n  };\n}\n\ninterface ProjectCardProps {\n  project: ProjectSummary;\n  className?: string;\n}\n\nexport function ProjectCard({ project, className }: ProjectCardProps) {\n  const lastUpdatedText = project.lastUpdatedAt\n    ? `Updated ${new Date(project.lastUpdatedAt).toLocaleDateString()}`\n    : 'Not updated recently';\n\n  return (\n    <Link\n      to=\"/projects/$projectId\" // TanStack Router v1 style path param\n      params={{ projectId: project.id }}\n      className={cn(\"block hover:shadow-lg transition-shadow duration-200 rounded-lg\", className)}\n    >\n      <Card className=\"h-full flex flex-col\"> {/* Ensure card itself takes full height of Link */}\n        {project.imageUrl && (\n          <img\n            src={project.imageUrl}\n            alt={`${project.name} preview`}\n            className=\"w-full h-32 object-cover rounded-t-lg\"\n          />\n        )}\n        <CardHeader>\n          <CardTitle className=\"text-lg\">{project.name}</CardTitle>\n          {project.owner && (\n            <div className=\"flex items-center text-xs text-slate-500 dark:text-slate-400 mt-1\">\n              {project.owner.avatarUrl && (\n                <img src={project.owner.avatarUrl} alt={project.owner.name} className=\"w-4 h-4 rounded-full mr-1.5\" />\n              )}\n              <span>{project.owner.name}</span>\n            </div>\n          )}\n        </CardHeader>\n        <CardContent className=\"flex-grow\">\n          <CardDescription className=\"text-sm line-clamp-3\">{project.description}</CardDescription>\n          {project.tags && project.tags.length > 0 && (\n            <div className=\"mt-3 flex flex-wrap gap-1.5\">\n              {project.tags.map((tag) => (\n                <Badge key={tag} variant=\"secondary\">{tag}</Badge>\n              ))}\n            </div>\n          )}\n        </CardContent>\n        <CardFooter className=\"text-xs text-slate-500 dark:text-slate-400 flex justify-between items-center pt-4\">\n          <div className=\"flex items-center\">\n            <CalendarDays className=\"w-3.5 h-3.5 mr-1.5\" />\n            <span>{lastUpdatedText}</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {project.starCount !== undefined && (\n              <span className=\"flex items-center\">\n                <Star className=\"w-3.5 h-3.5 mr-1\" /> {project.starCount}\n              </span>\n            )}\n            {project.forkCount !== undefined && (\n              <span className=\"flex items-center\">\n                <GitFork className=\"w-3.5 h-3.5 mr-1\" /> {project.forkCount}\n              </span>\n            )}\n            {/* <ExternalLink className=\"w-4 h-4 hover:text-slate-700 dark:hover:text-slate-300\" /> */}\n          </div>\n        </CardFooter>\n      </Card>\n    </Link>\n  );\n}\n\nexport default ProjectCard;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectList.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":4,"column":63,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":4,"endColumn":99},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":44,"column":43,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":44,"endColumn":104}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { toast } from 'sonner';\n\nimport { Project, ProjectListItem } from './ProjectListItem'; // Assuming Project type is exported\n\ninterface ProjectListProps {\n  projects: Project[];\n  viewMode: 'grid' | 'list';\n}\n\nexport function ProjectList({ projects, viewMode }: ProjectListProps) {\n\n  const handleDeleteProject = (projectId: string) => {\n    // Placeholder for actual delete logic\n    // e.g., call an IPC method, then refetch or update local state\n    const currentProject = projects.find(project => project.id === projectId);\n    toast.warning(`Exclusão do projeto \"${currentProject?.name}\" (simulado).`, {\n      description: \"Esta funcionalidade ainda não está conectada ao backend.\",\n    });\n    // Example: setProjects(prev => prev.filter(project => project.id !== projectId));\n  };\n\n  const handleEditProject = (projectId: string) => {\n    const currentProject = projects.find(project => project.id === projectId);\n    toast.info(`Edição do projeto \"${currentProject?.name}\" (simulado).`, {\n      description: \"Redirecionamento para formulário de edição (a ser implementado).\",\n    });\n    // Example: router.navigate({ to: `/projects/${projectId}/edit` });\n  };\n\n  const handleToggleProjectStatus = (projectId: string, currentStatus: Project['status']) => {\n    const currentProject = projects.find(project => project.id === projectId);\n    const newStatus = currentStatus === 'active' ? 'pausado' : 'ativo';\n    toast.info(`Status do projeto \"${currentProject?.name}\" alterado para ${newStatus} (simulado).`, {\n       description: \"Esta funcionalidade ainda não está conectada ao backend.\",\n    });\n    // Example: Update project status via API and refetch or update local state\n  };\n\n\n  if (viewMode === 'list') {\n    return (\n      <div className=\"flow-root\">\n        <div className=\"-my-2 sm:-my-4\"> {/* Negative margins to align with parent padding if needed */}\n          <div className=\"divide-y divide-slate-200 dark:divide-slate-700\">\n            {projects.map((project) => (\n              <ProjectListItem\n                key={project.id}\n                project={project}\n                viewMode=\"list\"\n                onDelete={handleDeleteProject}\n                onEdit={handleEditProject}\n                onToggleStatus={handleToggleProjectStatus}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Grid View\n  return (\n    <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n      {projects.map((project) => (\n        <ProjectListItem\n          key={project.id}\n          project={project}\n          viewMode=\"grid\"\n          onDelete={handleDeleteProject}\n          onEdit={handleEditProject}\n          onToggleStatus={handleToggleProjectStatus}\n        />\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectListItem.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":2,"column":99,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":2,"endColumn":118},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":31,"column":43,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":31,"endColumn":69},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":32,"column":43,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":32,"endColumn":67},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":33,"column":83,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":33,"endColumn":108},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'ProjectListItem' has too many lines (104). Maximum allowed is 100.","line":44,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":153,"endColumn":2},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":48,"column":29,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":48,"endColumn":82},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":57,"column":85,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":57,"endColumn":106}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router';\nimport { Briefcase, MoreHorizontal, Trash2, Edit3, PlayCircle, PauseCircle } from 'lucide-react'; // Added Play/Pause\nimport React from 'react';\n\nimport { Badge } from '@/ui/components/ui/badge';\nimport { Button } from '@/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/ui/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/ui/components/ui/dropdown-menu';\nimport { Separator } from '@/ui/components/ui/separator';\n\nexport interface Project {\n  id: string;\n  name: string;\n  description: string;\n  lastActivity: string;\n  status: 'active' | 'paused' | 'planning' | 'completed' | 'archived';\n  agentCount: number;\n  taskCount: number;\n  // imageUrl?: string; // Optional image for the project card\n}\n\ninterface ProjectListItemProps {\n  project: Project;\n  viewMode: 'grid' | 'list';\n  onDelete?: (projectId: string) => void; // Optional delete handler\n  onEdit?: (projectId: string) => void;   // Optional edit handler\n  onToggleStatus?: (projectId: string, currentStatus: Project['status']) => void; // Optional status toggle\n}\n\nconst statusMap: Record<Project['status'], { label: string; color: string; icon?: React.ElementType }> = {\n  active: { label: 'Ativo', color: 'bg-green-500 dark:bg-green-400' },\n  paused: { label: 'Pausado', color: 'bg-yellow-500 dark:bg-yellow-400' },\n  planning: { label: 'Planejamento', color: 'bg-blue-500 dark:bg-blue-400' },\n  completed: { label: 'Concluído', color: 'bg-slate-500 dark:bg-slate-400' },\n  archived: { label: 'Arquivado', color: 'bg-slate-700 dark:bg-slate-600' },\n};\n\nexport function ProjectListItem({ project, viewMode, onDelete, onEdit, onToggleStatus }: ProjectListItemProps) {\n  const projectStatus = statusMap[project.status] || statusMap.planning;\n\n  const handleToggleStatus = (event: React.MouseEvent) => {\n    event.preventDefault(); // Prevent link navigation if button is inside a Link\n    event.stopPropagation();\n    onToggleStatus?.(project.id, project.status);\n  }\n\n  const projectActions = (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7 data-[state=open]:bg-slate-100 dark:data-[state=open]:bg-slate-800\"\n          onClick={(event) => { event.preventDefault(); event.stopPropagation(); }} // Prevent card click\n        >\n          <MoreHorizontal className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Mais opções</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" onClick={(event) => { event.preventDefault(); event.stopPropagation(); }}>\n        {onEdit && <DropdownMenuItem onClick={() => onEdit(project.id)}>\n          <Edit3 className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Editar\n        </DropdownMenuItem>}\n        {project.status !== 'completed' && project.status !== 'archived' && onToggleStatus && (\n          <DropdownMenuItem onClick={handleToggleStatus}>\n            {project.status === 'active' ? <PauseCircle className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" /> : <PlayCircle className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />}\n            {project.status === 'active' ? 'Pausar Projeto' : 'Ativar Projeto'}\n          </DropdownMenuItem>\n        )}\n        <DropdownMenuSeparator />\n        {onDelete && <DropdownMenuItem className=\"text-red-600 dark:text-red-500 focus:text-red-600 dark:focus:text-red-500 focus:bg-red-50 dark:focus:bg-red-900/50\" onClick={() => onDelete(project.id)}>\n          <Trash2 className=\"mr-2 h-3.5 w-3.5\" />\n          Excluir\n        </DropdownMenuItem>}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n\n\n  if (viewMode === 'list') {\n    return (\n      <Link to=\"/projects/$projectId\" params={{ projectId: project.id }} className=\"block hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors rounded-lg\">\n        <div className=\"flex items-center justify-between p-3 sm:p-4 border-b border-slate-200 dark:border-slate-700\">\n          <div className=\"flex items-center space-x-3 sm:space-x-4 flex-1 min-w-0\">\n            <div className={`p-2 rounded-md hidden sm:block ${projectStatus.color} opacity-20`}>\n               <Briefcase className={`h-5 w-5 ${projectStatus.color.replace('bg-', 'text-')}`} />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-semibold text-slate-800 dark:text-slate-100 truncate\" title={project.name}>\n                {project.name}\n              </p>\n              <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\" title={project.description}>\n                {project.description || \"Sem descrição\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"hidden md:flex items-center space-x-4 text-xs text-slate-500 dark:text-slate-400 mx-4\">\n            <div>Agentes: {project.agentCount}</div>\n            <div>Tarefas: {project.taskCount}</div>\n          </div>\n          <div className=\"flex items-center space-x-2 flex-shrink-0\">\n             <Badge style={{ backgroundColor: projectStatus.color }} className=\"text-xs text-white dark:text-black font-medium\">\n                {projectStatus.label}\n             </Badge>\n            {projectActions}\n          </div>\n        </div>\n      </Link>\n    );\n  }\n\n  // Grid View (Card)\n  return (\n    <Card className=\"flex flex-col h-full hover:shadow-lg transition-shadow duration-200\">\n      <Link to=\"/projects/$projectId\" params={{ projectId: project.id }} className=\"flex flex-col flex-grow\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className={`p-2 rounded-md ${projectStatus.color} opacity-20`}>\n               <Briefcase className={`h-6 w-6 ${projectStatus.color.replace('bg-', 'text-')}`} />\n            </div>\n            {/* Placeholder for project image/icon if available */}\n            {/* {project.imageUrl ? <img src={project.imageUrl} alt={project.name} className=\"w-12 h-12 rounded-lg object-cover\"/> : <Briefcase className=\"w-10 h-10 text-slate-400\" />} */}\n            <Badge style={{ backgroundColor: projectStatus.color }} className=\"text-xs text-white dark:text-black font-medium\">\n              {projectStatus.label}\n            </Badge>\n          </div>\n          <CardTitle className=\"mt-3 text-lg truncate\" title={project.name}>{project.name}</CardTitle>\n          <CardDescription className=\"text-xs h-8 line-clamp-2\" title={project.description}>\n            {project.description || \"Sem descrição\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex-grow pb-3\">\n          {/* Could add more info here like key members, tech stack icons, etc. */}\n           <div className=\"text-xs text-slate-500 dark:text-slate-400 space-y-1\">\n            <p>Agentes: <span className=\"font-medium text-slate-700 dark:text-slate-300\">{project.agentCount}</span></p>\n            <p>Tarefas Ativas: <span className=\"font-medium text-slate-700 dark:text-slate-300\">{project.taskCount}</span></p>\n          </div>\n        </CardContent>\n      </Link>\n      <Separator className=\"my-0\" />\n      <CardFooter className=\"p-3 flex items-center justify-between\">\n        <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n          Última atividade: {project.lastActivity}\n        </p>\n        {projectActions}\n      </CardFooter>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectSidebar.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":1,"column":48,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":1,"endColumn":68},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":2,"column":124,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":2,"endColumn":141},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":13,"column":21,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":13,"endColumn":50},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":19,"column":92,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":19,"endColumn":108},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":20,"column":35,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":20,"endColumn":51},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":25,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":25,"endColumn":95},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":45,"column":36,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":45,"endColumn":50}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1199,1202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1199,1202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router'; // Removed useParams\nimport { ChevronRight, LayoutDashboard, CheckSquare, MessageSquare, FileText, Settings2, Hash, Plus } from 'lucide-react'; // Removed Folder\nimport React from 'react';\n\nimport { Button } from '@/ui/components/ui/button';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/ui/components/ui/collapsible';\nimport { ScrollArea } from '@/ui/components/ui/scroll-area';\nimport { Separator } from '@/ui/components/ui/separator';\n\n// Helper for NavLink, similar to AppSidebar but might have different base paths or active states\ninterface ProjectNavLinkProps {\n  to: string;\n  basePath: string; // e.g., /projects/$projectId\n  children: React.ReactNode;\n  icon?: React.ElementType;\n  // exact?: boolean; // For matching exact paths - REMOVED as unused by Link's activeProps\n}\n\nfunction ProjectNavLink({ to, basePath, children, icon: iconProp }: ProjectNavLinkProps) { // Removed exact\n  const IconComponent = iconProp; // Alias for JSX\n  const fullPath = `${basePath}${to.startsWith('/') ? to : `/${to}`}`;\n  return (\n    <Link\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      to={fullPath as any} // Cast to any for dynamically constructed paths in this mock setup\n      className=\"flex items-center space-x-2 px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-md\"\n      activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50' }}\n    >\n      {IconComponent && <IconComponent className=\"h-4 w-4\" />}\n      <span>{children}</span>\n    </Link>\n  );\n}\n\n\ninterface ProjectSidebarProps {\n  className?: string;\n  // projectId would likely be a prop, or read from router params if this component is route-aware\n}\n\nexport function ProjectSidebar({ className }: ProjectSidebarProps) {\n  // In a real scenario, projectId would come from router params or props.\n  // const params = useParams(); // if used in a route component\n  // const projectId = params.projectId;\n  const projectId = \"{projectId}\"; // Placeholder\n\n  // Placeholder data\n  const project = {\n    name: 'Projeto Alpha',\n    // id: projectId,\n  };\n\n  const channels = [\n    { id: 'general', name: 'general', type: 'text' },\n    { id: 'random', name: 'random', type: 'text' },\n    { id: 'dev-logs', name: 'dev-logs', type: 'text' },\n  ];\n\n  return (\n    // This component itself is the content of a ResizablePanel.\n    // The ResizablePanel, ResizablePanelGroup, and ResizableHandle would be used in a parent layout.\n    <div className={`flex flex-col h-full bg-slate-100 dark:bg-slate-900 ${className || ''}`}>\n      {/* Project Header */}\n      <div className=\"p-4 border-b border-slate-200 dark:border-slate-700\">\n        <h2 className=\"text-lg font-semibold text-slate-800 dark:text-slate-100 truncate\">{project.name}</h2>\n        {/* Could add a dropdown here for project actions */}\n      </div>\n\n      <ScrollArea className=\"flex-grow\">\n        <nav className=\"py-3 px-2\">\n          {/* Project Navigation */}\n          <div className=\"space-y-1 mb-4\">\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/overview\" icon={LayoutDashboard}>Overview</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/tasks\" icon={CheckSquare}>Tasks</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/discussions\" icon={MessageSquare}>Discussions</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/files\" icon={FileText}>Files</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/settings\" icon={Settings2}>Settings</ProjectNavLink>\n          </div>\n\n          <Separator className=\"my-3\" />\n\n          {/* Channels/Sections List */}\n          <div>\n            <Collapsible defaultOpen>\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-start px-3 py-2 text-sm font-medium\">\n                  <ChevronRight className=\"h-4 w-4 mr-2 transform transition-transform duration-200 group-[data-state=open]:rotate-90\" />\n                  Channels\n                  <Plus className=\"ml-auto h-4 w-4 text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"pt-1 space-y-0.5 ml-3 border-l border-slate-200 dark:border-slate-700 pl-3\">\n                {channels.map(channel => (\n                  <Link\n                    key={channel.id}\n                    to={`/projects/${projectId}/channels/${channel.id}`}\n                    className=\"flex items-center space-x-2 px-2 py-1.5 text-sm text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-800 rounded-md\"\n                    activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium' }}\n                  >\n                    <Hash className=\"h-3.5 w-3.5\" />\n                    <span className=\"truncate\">{channel.name}</span>\n                  </Link>\n                ))}\n                {channels.length === 0 && (\n                  <p className=\"px-2 py-1.5 text-xs text-slate-500 dark:text-slate-400\">No channels.</p>\n                )}\n              </CollapsibleContent>\n            </Collapsible>\n          </div>\n          {/* Add more collapsible sections if needed, e.g., DMs, Apps */}\n        </nav>\n      </ScrollArea>\n\n      {/* Optional Footer for sidebar actions */}\n      {/* <div className=\"p-2 mt-auto border-t border-slate-200 dark:border-slate-700\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start\">Some Action</Button>\n      </div> */}\n    </div>\n  );\n}\n\nexport default ProjectSidebar;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/fields/ProjectDescriptionField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/fields/ProjectNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectContextSidebar.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":1,"column":48,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":1,"endColumn":108},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":6,"column":69,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":6,"endColumn":91},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":32,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":32,"endColumn":90},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":37,"column":103,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":37,"endColumn":150},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":45,"column":92,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":45,"endColumn":107},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":52,"column":102,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":52,"endColumn":154},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":69,"column":14,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":69,"endColumn":32},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":72,"column":48,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":72,"endColumn":81},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":83,"column":99,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":83,"endColumn":126},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":92,"column":81,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":92,"endColumn":105},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":158,"column":41,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":158,"endColumn":73}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router'; // Removed useParams and useRouter as they are not used here\nimport { BarChart2, MessageSquareText, BookText, Settings2, Users, ChevronDown, Hash, PlusCircle } from 'lucide-react';\nimport React from 'react';\n// Added Hash and PlusCircle to imports, removed GripVertical as it's not used\n\nimport { Avatar, AvatarFallback } from '@/ui/components/ui/avatar'; // Removed AvatarImage\nimport { Button } from '@/ui/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/ui/components/ui/dropdown-menu\";\nimport { ScrollArea } from '@/ui/components/ui/scroll-area';\nimport { Separator } from '@/ui/components/ui/separator';\nimport { cn } from '@/ui/lib/utils';\n\n\n// Re-using Project type, assuming it's available or defined similarly elsewhere\ninterface Project {\n  id: string;\n  name: string;\n  description?: string;\n  // Add other relevant fields if needed for the sidebar header, e.g., project icon/color\n}\n\ninterface ProjectSectionLinkProps {\n  to: string;\n  label: string;\n  icon: React.ElementType; // Renamed prop from 'icon' to 'IconElement' in implementation\n  projectId: string;\n  // isActive prop removed as Link component handles active state\n}\n\nfunction ProjectSectionLink({ to, label, icon: iconComponent, projectId }: ProjectSectionLinkProps) { // Renamed icon to iconComponent for convention\n  return (\n    <Link\n      to={to}\n      params={{ projectId }}\n      resetScroll={false}\n      className={cn(\n        \"flex items-center space-x-2.5 px-3 py-2 text-sm rounded-md transition-colors\",\n        \"text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700/60\" // Base classes\n      )}\n      activeProps={{\n        // Classes to apply when the link is active\n        className: \"!bg-sky-100 dark:!bg-sky-700/60 !text-sky-700 dark:!text-sky-200 font-medium\"\n      }}\n    >\n      {iconComponent && React.createElement(iconComponent, { className: \"h-4 w-4 flex-shrink-0\" })} {/* Ensure icon is flex-shrink-0 if space is tight */}\n      <span className=\"truncate\">{label}</span>\n    </Link>\n  );\n}\n\n\ninterface ProjectContextSidebarProps {\n  project: Project | null;\n  className?: string;\n  // currentPath prop removed as it's not used for active state determination anymore\n}\n\nexport function ProjectContextSidebar({ project, className }: ProjectContextSidebarProps) {\n  // const params = useParams({ from: '/(app)/projects/$projectId' }); // Not strictly needed if projectId comes from props\n\n  if (!project) {\n    return ( // Skeleton loader\n      <aside className={cn(\"w-60 flex-shrink-0 bg-slate-100 dark:bg-slate-800/70 p-4 border-r border-slate-200 dark:border-slate-700\", className)}>\n        <div className=\"h-10 bg-slate-200 dark:bg-slate-700 rounded animate-pulse mb-4\"></div>\n        {[...Array(5)].map((_item, index) => ( // Renamed _ to _item, i to index\n          <div key={index} className=\"h-8 bg-slate-200 dark:bg-slate-700 rounded animate-pulse mb-2\"></div>\n        ))}\n      </aside>\n    );\n  }\n\n  // For TanStack Router links from within a layout for a parameterized route (e.g., /projects/$projectId),\n  // relative links like './settings' are often preferred for child routes.\n  // Absolute paths need to include the dynamic params correctly.\n  const sections = [\n    { value: 'overview', label: 'Visão Geral', icon: BarChart2, to: `/projects/${project.id}/` }, // Trailing slash for index\n    { value: 'chat', label: 'Chat/Canais', icon: MessageSquareText, to: `/projects/${project.id}/chat` },\n    { value: 'docs', label: 'Documentação', icon: BookText, to: `/projects/${project.id}/docs` },\n    { value: 'members', label: 'Membros & Agentes', icon: Users, to: `/projects/${project.id}/members` },\n    { value: 'settings', label: 'Configurações', icon: Settings2, to: `/projects/${project.id}/settings` },\n  ];\n\n  // Placeholder for mock channels\n  const mockChannels = [\n    { id: 'ch_geral', name: 'geral', to: `/projects/${project.id}/chat/geral`}, // Example channel route\n    { id: 'ch_dev', name: 'desenvolvimento', to: `/projects/${project.id}/chat/dev`},\n    { id: 'ch_bugs', name: 'bugs', to: `/projects/${project.id}/chat/bugs`},\n  ];\n\n  return (\n    <aside className={cn(\"w-60 flex-shrink-0 bg-slate-100 dark:bg-slate-800/70 flex flex-col border-r border-slate-200 dark:border-slate-700 h-full\", className)}>\n      {/* Project Header */}\n      <div className=\"p-3 border-b border-slate-200 dark:border-slate-700\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"w-full justify-between items-center h-auto px-2 py-1.5\">\n              <div className=\"flex items-center space-x-2 min-w-0\">\n                <Avatar className=\"h-7 w-7 text-xs\">\n                  {/* Placeholder for project image or color-coded avatar */}\n                  <AvatarFallback className=\"bg-sky-500 text-white\">\n                    {project.name.substring(0,1).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"text-sm font-semibold truncate text-slate-800 dark:text-slate-100\" title={project.name}>\n                  {project.name}\n                </span>\n              </div>\n              <ChevronDown className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-52 ml-2\" align=\"start\">\n            <DropdownMenuLabel>Ações do Projeto</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>Convidar Membros (N/I)</DropdownMenuItem>\n            <DropdownMenuItem asChild>\n              {/* Link to project settings using its relative path from $projectId */}\n              <Link to={`/projects/${project.id}/settings`} params={{projectId: project.id}}>Configurações do Projeto</Link>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-red-500 focus:text-red-500 dark:focus:text-red-500\">Arquivar Projeto (N/I)</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <nav className=\"p-2 space-y-1\">\n          {sections.map(section => (\n            <ProjectSectionLink\n              key={section.value}\n              to={section.to}\n              label={section.label}\n              icon={section.icon}\n              projectId={project.id}\n            />\n          ))}\n        </nav>\n\n        {/* Placeholder for other contextual lists like \"Channels\" or \"Active Agents in Project\" */}\n        <div className=\"p-3 mt-2\">\n            <Separator className=\"my-2\"/>\n            <h4 className=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider px-1 mb-1.5 flex justify-between items-center\">\n                <span>Canais</span>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5\" onClick={() => alert(\"Novo canal (N/I)\")}>\n                    <PlusCircle className=\"h-3.5 w-3.5\"/>\n                </Button>\n            </h4>\n            <div className=\"space-y-0.5\">\n                {mockChannels.map(channel => (\n                     <ProjectSectionLink\n                        key={channel.id}\n                        to={channel.to} // Use the defined channel route\n                        label={`# ${channel.name}`}\n                        icon={Hash}\n                        projectId={project.id}\n                    />\n                ))}\n            </div>\n        </div>\n      </ScrollArea>\n\n      {/* Optional Footer for the project sidebar - Removed GripVertical as it's not imported and purpose unclear here */}\n      {/*\n      <div className=\"p-2 border-t border-slate-200 dark:border-slate-700\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start text-xs\">\n            Menu do Projeto\n        </Button>\n      </div>\n      */}\n    </aside>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectParticipantsSidebar.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":58,"column":93,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":58,"endColumn":107},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":59,"column":91,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":59,"endColumn":104}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Users, Bot as BotIcon, UserCircle2, Search, UserPlus, Zap, CheckCircle, AlertTriangle, ListChecks } from 'lucide-react';\nimport React, { useState } from 'react';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/presentation/ui/components/ui/avatar';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Input } from '@/presentation/ui/components/ui/input';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/presentation/ui/components/ui/tooltip';\nimport { cn } from '@/presentation/ui/lib/utils';\n\ninterface Participant {\n  id: string;\n  name: string;\n  avatarUrl?: string;\n  type: 'human' | 'agent';\n  roleOrPersona?: string;\n  status?: 'online' | 'offline' | 'busy' | 'running' | 'idle' | 'error';\n}\n\nconst mockParticipants: Participant[] = [\n  { id: 'user1', name: 'Alice Wonderland', avatarUrl: '/avatars/01.png', type: 'human', roleOrPersona: 'Admin', status: 'online' },\n  { id: 'user2', name: 'Bob Construtor', avatarUrl: '/avatars/02.png', type: 'human', roleOrPersona: 'Desenvolvedor', status: 'offline' },\n  { id: 'agent001', name: 'CoderBot-Alpha', avatarUrl: '/avatars/agent-coder.png', type: 'agent', roleOrPersona: 'Eng. Software Sênior', status: 'running' },\n  { id: 'agent002', name: 'TestMaster-7000', avatarUrl: '/avatars/agent-qa.png', type: 'agent', roleOrPersona: 'Analista de QA', status: 'idle' },\n  { id: 'user3', name: 'Charlie Reviewer', type: 'human', roleOrPersona: 'Revisor', status: 'busy' },\n  { id: 'agent007', name: 'Deployatron', type: 'agent', roleOrPersona: 'DevOps Specialist', status: 'error'},\n];\n\nconst statusIndicatorMap: Record<Required<Participant>['status'], { color: string; label: string, icon?: React.ElementType }> = {\n  online: { color: 'bg-green-500', label: 'Online', icon: CheckCircle },\n  offline: { color: 'bg-slate-400', label: 'Offline' },\n  busy: { color: 'bg-yellow-500', label: 'Ocupado' },\n  running: { color: 'bg-sky-500', label: 'Executando', icon: Zap },\n  idle: { color: 'bg-slate-500', label: 'Ocioso', icon: ListChecks },\n  error: { color: 'bg-red-500', label: 'Erro', icon: AlertTriangle },\n};\n\ninterface ProjectParticipantsSidebarProps {\n  className?: string;\n  // projectId?: string; // Se precisar buscar participantes específicos do projeto\n}\n\nexport function ProjectParticipantsSidebar({ className }: ProjectParticipantsSidebarProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const participants = mockParticipants;\n\n  const filteredParticipants = participants.filter(participant =>\n    participant.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (participant.roleOrPersona || '').toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const humanParticipants = filteredParticipants.filter(person => person.type === 'human'); // p to person\n  const agentParticipants = filteredParticipants.filter(agent => agent.type === 'agent'); // p to agent\n\n  const renderParticipant = (participant: Participant) => {\n    const statusInfo = participant.status ? statusIndicatorMap[participant.status] : null;\n    return (\n      <div key={participant.id} className=\"flex items-center space-x-3 p-2 hover:bg-slate-200 dark:hover:bg-slate-700/60 rounded-md cursor-pointer\"\n           onClick={() => alert(`Perfil de ${participant.name} (N/I)`)}\n      >\n        <Avatar className=\"h-8 w-8 text-xs relative\">\n          {participant.avatarUrl && <AvatarImage src={participant.avatarUrl} alt={participant.name} />}\n          <AvatarFallback className={cn(participant.type === 'agent' ? \"bg-emerald-600 dark:bg-emerald-500\" : \"bg-purple-600 dark:bg-purple-500\", \"text-white\")}>\n            {participant.type === 'agent' ? <BotIcon size={14}/> : participant.name.substring(0,1).toUpperCase() || <UserCircle2 size={14}/>}\n          </AvatarFallback>\n          {statusInfo && (\n            <TooltipProvider delayDuration={100}>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                   <span className={`absolute right-0 bottom-0 block h-2.5 w-2.5 rounded-full ring-1 ring-background ${statusInfo.color}`} />\n                </TooltipTrigger>\n                <TooltipContent side=\"left\" className=\"text-xs p-1\">\n                  {statusInfo.icon && <statusInfo.icon className=\"h-3 w-3 mr-1 inline-block\" />}\n                  {statusInfo.label}\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          )}\n        </Avatar>\n        <div className=\"flex-1 min-w-0\">\n          <p className=\"text-sm font-medium text-slate-800 dark:text-slate-100 truncate\" title={participant.name}>\n            {participant.name}\n          </p>\n          <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\" title={participant.roleOrPersona}>\n            {participant.roleOrPersona || (participant.type === 'agent' ? 'Agente IA' : 'Membro')}\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <aside className={cn(\"w-64 flex-shrink-0 bg-slate-100 dark:bg-slate-800/70 border-l border-slate-200 dark:border-slate-700 flex flex-col h-full\", className)}>\n      <header className=\"p-3.5 border-b border-slate-200 dark:border-slate-700\">\n        <h3 className=\"text-sm font-semibold text-slate-700 dark:text-slate-200 mb-2\">Participantes</h3>\n         <div className=\"relative\">\n          <Search className=\"absolute left-2.5 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-slate-400 dark:text-slate-500\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Buscar participantes...\"\n            className=\"h-8 pl-9 text-xs\"\n            value={searchTerm}\n            onChange={(event) => setSearchTerm(event.target.value)}\n          />\n        </div>\n      </header>\n\n      <ScrollArea className=\"flex-1\">\n        {humanParticipants.length > 0 && (\n          <div className=\"p-2 pt-1\">\n            <h4 className=\"text-xs font-semibold text-slate-500 dark:text-slate-400 px-2 my-2 flex items-center\">\n              <Users className=\"mr-1.5 h-4 w-4\" /> Membros ({humanParticipants.length})\n            </h4>\n            <div className=\"space-y-0.5\">\n              {humanParticipants.map(renderParticipant)}\n            </div>\n          </div>\n        )}\n\n        {agentParticipants.length > 0 && (\n          <div className=\"p-2 pt-1\">\n             {humanParticipants.length > 0 && <Separator className=\"my-2\"/>}\n            <h4 className=\"text-xs font-semibold text-slate-500 dark:text-slate-400 px-2 my-2 flex items-center\">\n              <BotIcon className=\"mr-1.5 h-4 w-4\" /> Agentes IA ({agentParticipants.length})\n            </h4>\n            <div className=\"space-y-0.5\">\n              {agentParticipants.map(renderParticipant)}\n            </div>\n          </div>\n        )}\n\n        {filteredParticipants.length === 0 && (\n             <p className=\"p-4 text-center text-xs text-slate-500 dark:text-slate-400\">\n              {searchTerm ? \"Nenhum participante.\" : \"Sem participantes.\"}\n            </p>\n        )}\n      </ScrollArea>\n       <footer className=\"p-2.5 border-t border-slate-200 dark:border-slate-700 flex-shrink-0\">\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full text-xs\">\n                <UserPlus className=\"mr-2 h-3.5 w-3.5\"/> Convidar / Adicionar\n            </Button>\n       </footer>\n    </aside>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserProfileForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserSidebar.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":2,"column":78,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":2,"endColumn":100},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":15,"column":29,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":15,"endColumn":71},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":19,"column":81,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":19,"endColumn":121},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":26,"column":21,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":26,"endColumn":40},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":40,"column":43,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":40,"endColumn":60},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":41,"column":23,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":41,"endColumn":64},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":45,"column":35,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":45,"endColumn":67},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":78,"column":49,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":78,"endColumn":66},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":101,"column":76,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":101,"endColumn":116}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router';\nimport { MessageSquare, Settings, Plus, Users, Search } from 'lucide-react'; // Removed User import\nimport React from 'react';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/presentation/ui/components/ui/avatar';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\n// Separator import removed\n\n\n// Helper for NavLink\ninterface UserNavLinkProps {\n  to: string;\n  children: React.ReactNode;\n  icon?: React.ElementType; // Prop name changed from 'Icon' to 'icon'\n  // Add other props like exact if needed for active state matching\n}\n\nfunction UserNavLink({ to, children, icon: iconComponent }: UserNavLinkProps) { // Parameter name changed for convention\n  // Assuming user-specific routes might be prefixed, e.g., /user/profile\n  // For now, direct paths as passed.\n  const fullPath = to.startsWith('/') ? to : `/user/${to}`;\n\n  return (\n    <Link\n      to={fullPath} // Removed 'as any'\n      className=\"flex items-center space-x-3 px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-md\"\n      activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-semibold' }}\n    >\n      {iconComponent && React.createElement(iconComponent, { className: \"h-4 w-4\" })}\n      <span>{children}</span>\n    </Link>\n  );\n}\n\ninterface DirectMessageItemProps {\n  id: string;\n  name: string;\n  avatarUrl?: string;\n  status?: 'online' | 'offline' | 'idle'; // Example status\n  isActive?: boolean; // Example if this DM is currently active\n}\n\nfunction DirectMessageItem({ id, name, avatarUrl, status = 'offline', isActive }: DirectMessageItemProps) {\n    const basePath = '/user/dms'; // Placeholder base path for DMs\n    const initials = name.split(' ').map(namePart => namePart[0]).join('').substring(0,2).toUpperCase();\n    return (\n        <Link\n            to={`${basePath}/${id}`}\n            className={`flex items-center space-x-3 px-3 py-1.5 text-sm group rounded-md\n                        ${isActive\n                            ? 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium'\n                            : 'text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-800'}`}\n            activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium' }}\n        >\n            <Avatar className=\"h-6 w-6 text-xs\">\n                <AvatarImage src={avatarUrl} alt={name} />\n                <AvatarFallback className={`${status === 'online' ? 'border-2 border-green-500' : ''}`}>\n                    {initials}\n                </AvatarFallback>\n            </Avatar>\n            <span className=\"truncate flex-1\">{name}</span>\n            {/* Optional: Unread count or close button on hover */}\n            {/* <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5 opacity-0 group-hover:opacity-100\">X</Button> */}\n        </Link>\n    );\n}\n\n\ninterface UserSidebarProps {\n  className?: string;\n}\n\nexport function UserSidebar({ className }: UserSidebarProps) {\n  // Placeholder data\n  const currentUser = {\n    name: 'Jules Agent',\n    avatarUrl: 'https://github.com/shadcn.png', // Example avatar\n    status: 'online',\n  };\n\n  const directMessages: DirectMessageItemProps[] = [\n    { id: '1', name: 'Alice Wonderland', avatarUrl: 'https://randomuser.me/api/portraits/women/44.jpg', status: 'online', isActive: true },\n    { id: '2', name: 'Bob The Builder', avatarUrl: 'https://randomuser.me/api/portraits/men/44.jpg', status: 'offline' },\n    { id: '3', name: 'Charlie Chaplin', avatarUrl: 'https://randomuser.me/api/portraits/men/46.jpg', status: 'idle' },\n  ];\n\n  return (\n    <div className={`flex flex-col h-full bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 w-60 ${className || ''}`}>\n      {/* Top section (e.g., Search DMs or \"Find or start a conversation\") */}\n      <div className=\"p-3 border-b border-slate-200 dark:border-slate-700\">\n        <Button variant=\"secondary\" className=\"w-full justify-start text-sm text-slate-500 dark:text-slate-400\">\n            <Search className=\"h-4 w-4 mr-2\"/> Find or start a conversation\n        </Button>\n      </div>\n\n      <ScrollArea className=\"flex-grow px-2 py-2\">\n        <nav className=\"space-y-0.5\">\n          <UserNavLink to=\"/friends\" icon={Users}>Friends</UserNavLink>\n          {/* <UserNavLink to=\"/nitro\" icon={Zap}>Nitro</UserNavLink> Placeholder */}\n          <UserNavLink to=\"/shop\" icon={MessageSquare}>Shop</UserNavLink> {/* Using MessageSquare as placeholder */}\n        </nav>\n\n        <div className=\"mt-3 px-1\">\n            <div className=\"flex justify-between items-center mb-1\">\n                <h3 className=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider px-2\">\n                    Direct Messages\n                </h3>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\">\n                    <Plus className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n                    <span className=\"sr-only\">Create DM</span>\n                </Button>\n            </div>\n            <div className=\"space-y-0.5\">\n                {directMessages.map(dm => <DirectMessageItem key={dm.id} {...dm} />)}\n            </div>\n        </div>\n      </ScrollArea>\n\n      {/* User Panel Footer */}\n      <div className=\"p-2 mt-auto border-t border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src={currentUser.avatarUrl} alt={currentUser.name} />\n            <AvatarFallback>{currentUser.name.split(' ').map(namePart => namePart[0]).join('').substring(0,2).toUpperCase()}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 truncate\">\n            <p className=\"text-sm font-medium truncate\">{currentUser.name}</p>\n            <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\">{currentUser.status}</p>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\">\n            <Settings className=\"h-4 w-4\" />\n            <span className=\"sr-only\">User Settings</span>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UserSidebar;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/AvatarUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/DisplayNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/EmailDisplayField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/layout/UserSidebar.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":6,"column":82,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":6,"endColumn":92},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":7,"column":53,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":7,"endColumn":63},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":15,"column":44,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":15,"endColumn":54},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":16,"column":51,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":16,"endColumn":61},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":17,"column":62,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":17,"endColumn":72},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":18,"column":73,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":18,"endColumn":88},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":19,"column":38,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":19,"endColumn":48},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":21,"column":55,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":21,"endColumn":101},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":22,"column":134,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":22,"endColumn":152},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'UserSidebar' has too many lines (166). Maximum allowed is 100.","line":30,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":207,"endColumn":2},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":107,"column":57,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":107,"endColumn":102}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link, useRouter } from '@tanstack/react-router';\nimport { Settings, UserCircle, MessageSquarePlus, Search, Palette, Bot as BotIcon, Loader2, AlertTriangle } from 'lucide-react';\nimport React, { useState, useMemo } from 'react';\nimport { toast } from 'sonner';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/ui/components/ui/avatar'; // CHANGED\nimport { Button } from '@/ui/components/ui/button'; // CHANGED\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/ui/components/ui/dropdown-menu'; // CHANGED\nimport { Input } from '@/ui/components/ui/input'; // CHANGED\nimport { ScrollArea } from '@/ui/components/ui/scroll-area'; // CHANGED\nimport { useIpcSubscription } from '@/ui/hooks/ipc/useIpcSubscription'; // ALREADY @/ui\nimport { cn } from '@/ui/lib/utils'; // CHANGED\n\nimport { IPC_CHANNELS } from '@/shared/ipc-channels'; // This is correct, as shared is not under /ui\nimport type { DirectMessageItem, GetDMConversationsListResponseData, DMConversationsUpdatedEventPayload } from '@/shared/ipc-types'; // This is correct\n\nconst currentUserMock = {\n  name: 'J. Doe',\n  email: 'j.doe@example.com',\n  avatarUrl: '/avatars/user-main.png',\n};\n\nexport function UserSidebar() {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { data: dmConversations, isLoading, error } = useIpcSubscription<\n    null,\n    GetDMConversationsListResponseData,\n    DMConversationsUpdatedEventPayload\n  >(\n    IPC_CHANNELS.GET_DM_CONVERSATIONS_LIST,\n    null,\n    IPC_CHANNELS.DM_CONVERSATION_UPDATED_EVENT,\n    {\n      getSnapshot: (_prevData, eventPayload) => eventPayload,\n      onError: (err) => {\n        toast.error(`Erro ao carregar DMs: ${err.message}`);\n      }\n    }\n  );\n\n  const [selectedDmId, setSelectedDmId] = useState<string | null>(() => {\n    const currentPath = typeof window !== 'undefined' ? window.location.pathname : '';\n    const dmPathMatch = currentPath.match(/\\/user\\/dm\\/([^/]+)/);\n    return dmPathMatch ? dmPathMatch[1] : null;\n  });\n\n  React.useEffect(() => {\n    if (dmConversations && dmConversations.length > 0) {\n      const currentSelectionExists = dmConversations.some(dm => dm.id === selectedDmId);\n      if (!currentSelectionExists && !selectedDmId) {\n        setSelectedDmId(dmConversations[0].id);\n      } else if (!currentSelectionExists && selectedDmId) {\n         setSelectedDmId(dmConversations[0].id);\n      }\n    } else if (dmConversations && dmConversations.length === 0) {\n        setSelectedDmId(null);\n    }\n  }, [dmConversations, selectedDmId]);\n\n  const filteredDMs = useMemo(() => {\n    if (!dmConversations) return [];\n    return dmConversations.filter(dm =>\n      dm.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [dmConversations, searchTerm]);\n\n  const handleNewDm = () => {\n    toast.info(\"Funcionalidade 'Nova Mensagem Direta' ainda não implementada.\");\n  };\n\n  const renderDmList = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex flex-col items-center justify-center p-4 text-xs text-slate-500 dark:text-slate-400 h-full\">\n          <Loader2 className=\"h-6 w-6 animate-spin mb-2\" />\n          Carregando conversas...\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n         <div className=\"flex flex-col items-center justify-center p-4 text-xs text-red-600 dark:text-red-400 h-full\">\n          <AlertTriangle className=\"h-6 w-6 mb-2\" />\n          <span>Erro ao carregar DMs.</span>\n        </div>\n      );\n    }\n\n    if (!filteredDMs || filteredDMs.length === 0) {\n      return (\n        <p className=\"p-4 text-center text-xs text-slate-500 dark:text-slate-400\">\n          {searchTerm ? \"Nenhuma conversa encontrada.\" : \"Sem mensagens diretas ainda.\"}\n        </p>\n      );\n    }\n\n    return filteredDMs.map((dm: DirectMessageItem) => ( // DirectMessageItem is from shared/ipc-types\n      <Link\n        key={dm.id}\n        to=\"/user/dm/$conversationId\"\n        params={{ conversationId: dm.id }}\n        className={cn(\n          \"flex items-center gap-2.5 p-2 rounded-md text-left transition-colors group\",\n          selectedDmId === dm.id\n            ? \"bg-sky-100 dark:bg-sky-700/60 text-sky-700 dark:text-sky-200 font-medium\"\n            : \"text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700/50\"\n        )}\n        onClick={() => setSelectedDmId(dm.id)}\n        activeProps={{ className: \"!bg-sky-100 dark:!bg-sky-700/60 !text-sky-700 dark:!text-sky-200 font-medium\" }}\n      >\n        <Avatar className=\"h-7 w-7 text-xs flex-shrink-0\">\n          <AvatarImage src={dm.avatarUrl} alt={dm.name} />\n          <AvatarFallback className={cn(\n            \"text-white\",\n            dm.type === 'agent' ? \"bg-emerald-500\" : \"bg-purple-500\"\n          )}>\n            {dm.type === 'agent' ? <BotIcon size={14}/> : dm.name.substring(0,1).toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium truncate group-hover:text-slate-800 dark:group-hover:text-slate-100\">{dm.name}</span>\n            {dm.timestamp && <span className=\"text-[10px] text-slate-400 dark:text-slate-500 flex-shrink-0\">{dm.timestamp}</span>}\n          </div>\n          <div className=\"flex justify-between items-center\">\n            {dm.lastMessage && <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate mt-0.5\">{dm.lastMessage}</p>}\n            {dm.unreadCount && dm.unreadCount > 0 && (\n              <span className=\"ml-auto text-[10px] bg-red-500 text-white font-semibold rounded-full px-1.5 py-0.5 leading-none\">\n                {dm.unreadCount}\n              </span>\n            )}\n          </div>\n        </div>\n      </Link>\n    ));\n  };\n\n  return (\n    <aside className=\"w-72 flex-shrink-0 bg-slate-100 dark:bg-slate-800/70 flex flex-col border-r border-slate-200 dark:border-slate-700 h-full\">\n      <div className=\"p-3 border-b border-slate-200 dark:border-slate-700\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"w-full justify-start items-center h-auto px-1 py-1\">\n              <Avatar className=\"h-8 w-8 mr-2\">\n                <AvatarImage src={currentUserMock.avatarUrl} alt={currentUserMock.name} />\n                <AvatarFallback>{currentUserMock.name.substring(0,1).toUpperCase()}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0 text-left\">\n                <p className=\"text-sm font-semibold truncate text-slate-800 dark:text-slate-100\">{currentUserMock.name}</p>\n                <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\">{currentUserMock.email}</p>\n              </div>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-64 ml-1\" align=\"start\" side=\"bottom\">\n            <DropdownMenuLabel>Minha Conta</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onSelect={() => router.navigate({ to: '/settings/profile' })}>\n              <UserCircle className=\"mr-2 h-4 w-4\" /> Perfil\n            </DropdownMenuItem>\n            <DropdownMenuItem onSelect={() => router.navigate({ to: '/settings/appearance' })}>\n              <Palette className=\"mr-2 h-4 w-4\" /> Aparência\n            </DropdownMenuItem>\n            <DropdownMenuItem onSelect={() => router.navigate({ to: '/settings' })}>\n              <Settings className=\"mr-2 h-4 w-4\" /> Todas Configurações\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-red-500 focus:text-red-500 dark:focus:text-red-500\">\n              Sair (Logout - N/I)\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      <div className=\"p-3 space-y-2 border-b border-slate-200 dark:border-slate-700 flex-shrink-0\">\n        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" onClick={handleNewDm}>\n          <MessageSquarePlus className=\"mr-2 h-4 w-4\" /> Nova Mensagem Direta\n        </Button>\n        <div className=\"relative\">\n          <Search className=\"absolute left-2.5 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-slate-500 dark:text-slate-400\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Buscar DMs ou iniciar nova...\"\n            className=\"h-8 pl-9\"\n            value={searchTerm}\n            onChange={(event) => setSearchTerm(event.target.value)}\n          />\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <nav className=\"p-2 space-y-0.5\">\n          {renderDmList()}\n        </nav>\n      </ScrollArea>\n    </aside>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcMutation.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":41,"column":20,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":41,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\n\ninterface IpcMutationState<TResponse> {\n  data: TResponse | null;\n  isLoading: boolean;\n  error: Error | null;\n}\n\ntype MutateFunction<TResponse, TRequest> = (params: TRequest) => Promise<TResponse | undefined>;\n\ninterface IpcMutationResult<TResponse, TRequest> extends IpcMutationState<TResponse> {\n  mutate: MutateFunction<TResponse, TRequest>;\n  reset: () => void;\n}\n\n/**\n * Custom hook to perform an IPC mutation (invoke for write operations) to the main process.\n * Manages loading, data, and error states for create, update, delete operations.\n *\n * @param channel The IPC channel to invoke.\n * @returns An object containing data, isLoading, error, a mutate function, and a reset function.\n */\nexport function useIpcMutation<TResponse, TRequest = undefined>(\n  channel: string\n): IpcMutationResult<TResponse, TRequest> {\n  const [data, setData] = useState<TResponse | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const mutate = useCallback(async (params: TRequest): Promise<TResponse | undefined> => {\n    if (!window.electron || !window.electron.ipcRenderer) {\n      const errMessage = 'Electron IPC renderer not available. Ensure preload script is correctly configured.';\n      console.error(errMessage);\n      setError(new Error(errMessage));\n      setIsLoading(false);\n      return undefined;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setData(null); // Reset previous data on new mutation\n\n    try {\n      // console.log(`useIpcMutation: Invoking channel ${channel} with params:`, params);\n      const result = await window.electron.ipcRenderer.invoke<TResponse>(channel, params);\n      // console.log(`useIpcMutation: Received result for channel ${channel}:`, result);\n      setData(result);\n      return result;\n    } catch (err: unknown) {\n      console.error(`Error invoking IPC channel ${channel} for mutation:`, err);\n      if (err instanceof Error) {\n        setError(err);\n      } else if (typeof err === 'object' && err !== null && 'message' in err) {\n        setError(new Error(String((err as { message: unknown }).message)));\n      } else {\n        setError(new Error(String(err || 'An unknown error occurred during mutation')));\n      }\n      setData(null);\n      return undefined;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [channel]);\n\n  const reset = useCallback(() => {\n    setData(null);\n    setIsLoading(false);\n    setError(null);\n  }, []);\n\n  return { data, isLoading, error, mutate, reset };\n}\n\n// Example Usage (for documentation purposes, not to be run here):\n/*\n  // In a component:\n  // const { mutate: createProject, isLoading: isCreating, error: createError, data: newProjectData } =\n  //   useIpcMutation<CreateProjectResponse, CreateProjectRequest>(CREATE_PROJECT_CHANNEL);\n\n  // const handleCreateProject = async (formData) => {\n  //   const result = await createProject({ name: formData.name, description: formData.description });\n  //   if (result) {\n  //     // Handle successful creation\n  //     console.log('Project created:', result.project);\n  //   } else {\n  //     // Handle error (already set in createError)\n  //     console.error('Failed to create project');\n  //   }\n  // };\n\n  // To reset the state of the mutation (e.g., after displaying an error or success message)\n  // resetCreateProjectState(); // Assuming you aliased reset when destructuring or call directly: mutationResult.reset()\n*/\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcQuery.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":27,"column":82,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":27,"endColumn":109},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":55,"column":22,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":55,"endColumn":44},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":59,"column":26,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":59,"endColumn":88},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":65,"column":37,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":65,"endColumn":101}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\n\ninterface IpcQueryState<T> {\n  data: T | null;\n  isLoading: boolean;\n  error: Error | null;\n  refetch: () => void;\n}\n\n/**\n * Custom hook to perform an IPC query (invoke) to the main process.\n * Manages loading, data, and error states, similar to react-query.\n *\n * @param channel The IPC channel to invoke.\n * @param params Parameters to send with the IPC call.\n * @param options Optional configuration.\n * @param options.enabled Whether the query should automatically run. Defaults to true.\n *                      If false, the query will not run until `refetch` is called.\n * @returns An object containing data, isLoading, error, and a refetch function.\n */\nexport function useIpcQuery<TResponse, TRequest = undefined>(\n  channel: string,\n  params?: TRequest,\n  options: { enabled?: boolean } = { enabled: true }\n): IpcQueryState<TResponse> {\n  const [data, setData] = useState<TResponse | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(options.enabled || false); // Start loading if enabled\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchData = useCallback(async () => {\n    if (!window.electron || !window.electron.ipcRenderer) {\n      console.error('Electron IPC renderer not available. Ensure preload script is correctly configured.');\n      setError(new Error('Electron IPC renderer not available.'));\n      setIsLoading(false);\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // console.log(`useIpcQuery: Invoking channel ${channel} with params:`, params);\n      const result = await window.electron.ipcRenderer.invoke<TResponse>(channel, params);\n      // console.log(`useIpcQuery: Received result for channel ${channel}:`, result);\n      setData(result);\n    } catch (err: unknown) {\n      console.error(`Error invoking IPC channel ${channel}:`, err);\n      if (err instanceof Error) {\n        setError(err);\n      } else if (typeof err === 'object' && err !== null && 'message' in err) {\n        setError(new Error(String((err as { message: unknown }).message)));\n      } else {\n        setError(new Error(String(err || 'An unknown error occurred')));\n      }\n      setData(null); // Clear data on error\n    } finally {\n      setIsLoading(false);\n    }\n  }, [channel, params]); // `params` are part of dependencies to refetch if they change\n\n  useEffect(() => {\n    if (options.enabled) {\n      fetchData();\n    }\n  }, [fetchData, options.enabled]); // Rerun if fetchData (channel/params) or enabled status changes\n\n  const refetch = useCallback(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return { data, isLoading, error, refetch };\n}\n\n// Example Usage (for documentation purposes, not to be run here):\n/*\n  // In a component:\n  // No parameters\n  // const { data: projectsData, isLoading: isLoadingProjects, error: projectsError, refetch: refetchProjects } =\n  //   useIpcQuery<GetProjectsResponse>(GET_PROJECTS_CHANNEL);\n\n  // With parameters\n  // const { data: projectDetails, isLoading: isLoadingDetails, error: detailsError, refetch: refetchDetails } =\n  //   useIpcQuery<GetProjectDetailsResponse, GetProjectDetailsRequest>(\n  //     GET_PROJECT_DETAILS_CHANNEL,\n  //     { projectId: 'some-id' }\n  //   );\n\n  // Query initially disabled\n  // const { data: userData, isLoading: isLoadingUser, refetch: fetchUser } =\n  //   useIpcQuery<GetUserProfileResponse>(GET_USER_PROFILE_CHANNEL, undefined, { enabled: false });\n  // ... later call fetchUser() when needed\n*/\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcSubscription.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":8,"column":22,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":8,"endColumn":59},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":19,"column":56,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":19,"endColumn":79},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":25,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":25,"endColumn":83},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchArgs'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":93,"suggestions":[{"desc":"Update the dependencies array to be: [fetchChannel, optionsOnError, enabled, providedInitialData, fetchArgs]","fix":{"range":[2262,2349],"text":"[fetchChannel, optionsOnError, enabled, providedInitialData, fetchArgs]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":64,"column":21,"nodeType":"CallExpression","endLine":64,"endColumn":46},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":81,"column":23,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":81,"endColumn":84},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":82,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":82,"endColumn":80},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":93,"column":26,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":93,"endColumn":46},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":99,"column":24,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":99,"endColumn":68},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":107,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":107,"endColumn":113},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":109,"column":44,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":109,"endColumn":107},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'enabled' and 'setStore'. Either include them or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [enabled, eventChannel, getSnapshot, setStore]","fix":{"range":[4418,4445],"text":"[enabled, eventChannel, getSnapshot, setStore]"}}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState, useSyncExternalStore } from 'react';\nimport { toast } from 'sonner';\n\ninterface IpcSubscriptionOptions<InitialData, EventPayload> {\n  getSnapshot: (prevData: InitialData | null, eventPayload: EventPayload) => InitialData | null;\n  onError?: (error: Error) => void;\n  initialData?: InitialData | null;\n  enabled?: boolean; // To enable/disable the subscription\n}\n\n// Helper hook for initial data fetching\nfunction useInitialIpcData<Args, InitialData>(\n  fetchChannel: string,\n  fetchArgs: Args,\n  optionsOnError?: (error: Error) => void,\n  providedInitialData: InitialData | null = null,\n  enabled: boolean = true\n) {\n  const [isLoading, setIsLoading] = useState(enabled); // Only load if enabled\n  const [error, setError] = useState<Error | null>(null);\n  const [dataStore, setDataStore] = useState<{ data: InitialData | null }>({ data: providedInitialData });\n\n  useEffect(() => {\n    if (!enabled) {\n      setIsLoading(false); // If not enabled, set loading to false and don't fetch\n      // Reset data if it was previously fetched and now disabled? Optional.\n      // setDataStore({ data: providedInitialData });\n      return;\n    }\n\n    let isMounted = true;\n    setIsLoading(true);\n    setError(null);\n\n    if (!window.electronIPC) {\n      const errMsg = 'Electron IPC bridge not found.';\n      setError(new Error(errMsg));\n      setIsLoading(false);\n      if (optionsOnError) optionsOnError(new Error(errMsg)); else toast.error(errMsg);\n      return;\n    }\n\n    window.electronIPC.invoke(fetchChannel, fetchArgs)\n      .then(response => {\n        if (!isMounted) return;\n        if (response.success) {\n          setDataStore({ data: response.data as InitialData });\n        } else {\n          const err = new Error(response.error?.message || `Failed to fetch initial data from ${fetchChannel}`);\n          setError(err);\n          if (optionsOnError) optionsOnError(err); else toast.error(err.message);\n        }\n      })\n      .catch(err => {\n        if (!isMounted) return;\n        setError(err);\n        if (optionsOnError) optionsOnError(err); else toast.error(err.message);\n      })\n      .finally(() => {\n        if (isMounted) setIsLoading(false);\n      });\n\n    return () => { isMounted = false; };\n  }, [fetchChannel, JSON.stringify(fetchArgs), optionsOnError, enabled, providedInitialData]);\n\n  return { isLoading, error, dataStore, setDataStore };\n}\n\n\nexport function useIpcSubscription<Args, InitialData, EventPayload>(\n  initialFetchChannel: string,\n  initialFetchArgs: Args,\n  eventChannel: string,\n  options: IpcSubscriptionOptions<InitialData, EventPayload>\n) {\n  const { getSnapshot, onError: optionsOnError, initialData: providedInitialData = null, enabled = true } = options;\n\n  const {\n    isLoading: initialLoading,\n    error: initialError,\n    dataStore: store, // store from initial fetch will be the base for subscription\n    setDataStore: setStore // setStore will be used by the subscription handler\n  } = useInitialIpcData(initialFetchChannel, initialFetchArgs, optionsOnError, providedInitialData, enabled);\n\n  // Subscription logic for useSyncExternalStore\n  const subscribe = useCallback((onStoreChange: () => void) => {\n    if (!enabled || !window.electronIPC) {\n        if (!window.electronIPC && enabled) console.warn('IPC bridge not available for subscription.');\n        return () => {};\n    }\n    if (!window.electronIPC) {\n        console.warn('IPC bridge not available for subscription in useIpcSubscription.');\n        return () => {}; // No-op unsubscribe\n    }\n\n    const handler = (eventPayload: EventPayload) => {\n      console.log(`useIpcSubscription: Event received on ${eventChannel}:`, eventPayload);\n      setStore(prevStore => ({ data: getSnapshot(prevStore.data, eventPayload) }));\n      onStoreChange(); // Notify useSyncExternalStore of the change\n    };\n\n    console.log(`useIpcSubscription: Subscribing to ${eventChannel}`);\n    const unsubscribeFn = window.electronIPC.on(eventChannel, handler);\n\n    return () => {\n      console.log(`useIpcSubscription: Unsubscribing from ${eventChannel}`);\n      if (unsubscribeFn) { // It might be null if window.electronIPC.on is not fully implemented or returns void\n        unsubscribeFn();\n      } else if (window.electronIPC.off) { // Fallback if `on` doesn't return unsubscribe but `off` exists\n        window.electronIPC.off(eventChannel, handler);\n      }\n    };\n  }, [eventChannel, getSnapshot]);\n\n  // Getter for useSyncExternalStore\n  const getStoreSnapshot = useCallback(() => store.data, [store]);\n\n  // useSyncExternalStore to manage the data from the event channel\n  const data = useSyncExternalStore(subscribe, getStoreSnapshot, getStoreSnapshot);\n\n  // The main hook's isLoading and error now correctly come from the initial data fetch.\n  return { data, isLoading: initialLoading, error: initialError };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/use-mobile.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":3,"column":37,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":3,"endColumn":76}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\n\nconst MOBILE_WIDTH_THRESHOLD = 768; // Example threshold for mobile devices\n\nexport function useIsMobile(): boolean {\n  const [isMobile, setIsMobile] = React.useState(false);\n\n  React.useEffect(() => {\n    const checkDevice = () => {\n      setIsMobile(window.innerWidth < MOBILE_WIDTH_THRESHOLD);\n    };\n\n    // Check on mount\n    checkDevice();\n\n    // Add resize listener\n    window.addEventListener('resize', checkDevice);\n\n    // Cleanup listener on unmount\n    return () => {\n      window.removeEventListener('resize', checkDevice);\n    };\n  }, []);\n\n  return isMobile;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/useIPC.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":3,"column":57,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":3,"endColumn":76},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":5,"column":57,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":5,"endColumn":105}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IElectronIPC' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/ui/hooks/useIPC.ts\n\nimport { ipcService } from '@/ui/services/ipc.service'; // Using path alias\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { IElectronIPC } from '@/ui/services/ipc.types'; // Using path alias, kept for type documentation\n\n/**\n * Custom React hook to access the IPC service for communicating\n * with the Electron main process.\n *\n * @returns The instance of the IPCService, providing methods like `invoke`, `on`, `send`.\n *          Refer to `ipc.service.ts` and `ipc.types.ts` for more details on the API.\n *\n * @example\n * const ipc = useIPC();\n *\n * // Invoking a channel\n * useEffect(() => {\n *   const fetchVersion = async () => {\n *     const result = await ipc.invoke<{ version: string }>('app:get-version');\n *     if (result.success && result.data) {\n *       console.log('App Version:', result.data.version);\n *     } else {\n *       console.error('Failed to get app version:', result.error);\n *     }\n *   };\n *   fetchVersion();\n * }, [ipc]);\n *\n * // Subscribing to an event\n * useEffect(() => {\n *   const handleUpdate = (message: any) => {\n *     console.log('Received update:', message);\n *   };\n *   const unsubscribe = ipc.on('app:update-available', handleUpdate);\n *   return () => unsubscribe(); // Cleanup on unmount\n * }, [ipc]);\n */\nexport function useIPC(): typeof ipcService {\n  // The ipcService is a singleton, so we just return it.\n  // No React-specific state or context is needed here unless we wanted to\n  // provide different mock implementations via context, which is not the current design.\n  return ipcService;\n}\n\n// Optional: If we want to expose the raw IElectronIPC interface directly via a hook,\n// which might be useful if the service adds too much opinion or for direct use.\n// However, the service layer provides better abstraction and error handling.\n\n/*\nimport { useState, useEffect } from 'react';\nimport { IElectronIPC } from '@/presentation/ui/services/ipc.types';\n\nexport function useRawElectronIPC(): IElectronIPC | null {\n  const [api, setApi] = useState<IElectronIPC | null>(null);\n\n  useEffect(() => {\n    if (window.electronIPC) {\n      setApi(window.electronIPC);\n    } else {\n      console.warn('[useRawElectronIPC] Electron IPC API not found on window.');\n    }\n  }, []);\n\n  return api;\n}\n*/\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/main.tsx","messages":[],"suppressedMessages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/ui/routeTree.gen'.","line":8,"column":27,"nodeType":"Literal","endLine":8,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(app)/_layout.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":2,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":2,"endColumn":84},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":10,"column":68,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":10,"endColumn":93},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":12,"column":23,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":12,"endColumn":113}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Outlet, createFileRoute } from '@tanstack/react-router';\nimport React from 'react'; // Removed useState as it's no longer used directly here\n\nimport { AppSidebar } from '@/presentation/ui/components/layout/AppSidebar';\n// Mobile toggle related imports and logic are removed as the new AppSidebar is fixed width\n// and mobile handling would be a separate, more complex feature.\n\nfunction AppLayoutComponent() {\n  return (\n    <div className=\"flex h-screen bg-background text-foreground\"> {/* Use theme variables */}\n      {/* AppSidebar is now always visible and has a fixed width (w-16) */}\n      <AppSidebar /> {/* Removed className prop, styling is now self-contained or via its own props if needed */}\n\n      {/*\n        Main content area will now be to the right of the thin AppSidebar.\n        It will be the container for further nested layouts\n        (e.g., User layout with UserSidebar + Content, or Project layout with ProjectContextSidebar + Content + ParticipantsSidebar)\n      */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/*\n          The <Outlet /> here will render the next level of layout or page.\n          For example, if navigating to /user/conversations, it might render UserLayout.\n          If navigating to /projects/$projectId, it might render ProjectLayout.\n          These nested layouts will then be responsible for their own multi-panel setups if needed.\n          The padding previously on this div is removed, as child layouts/pages should handle their own padding.\n        */}\n        <Outlet />\n      </div>\n    </div>\n  );\n}\n\n// This defines the layout route for the '(app)' group.\nexport const Route = createFileRoute('/(app)/_layout')({\n  component: AppLayoutComponent,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(public)/_layout.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":42,"column":24,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":42,"endColumn":70}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Outlet, createFileRoute } from '@tanstack/react-router';\nimport React from 'react';\n\nfunction PublicLayoutComponent() {\n  return (\n    <div className=\"flex flex-col items-center justify-start min-h-screen pt-8 sm:pt-12 md:pt-16 p-4 bg-slate-50 dark:bg-slate-900\">\n      {/*\n        This layout is nested within the __root.tsx layout,\n        so ThemeProvider and QueryClientProvider are already applied.\n        Public pages often have a simpler, centered layout.\n      */}\n      <main className=\"w-full max-w-lg px-4 py-8 sm:px-6 lg:px-8\">\n        {/* Example: A card-like container for content could be added here or in specific pages */}\n        <Outlet />\n      </main>\n      {/* Optional: A minimal public footer could go here */}\n      {/*\n      <footer className=\"py-4 text-center text-xs text-slate-500 dark:text-slate-400\">\n        © {new Date().getFullYear()} Project Wiz\n      </footer>\n      */}\n    </div>\n  );\n}\n\n// This defines the layout route for the '(public)' group.\n// The path '/' within createFileRoute for a layout usually means it applies to its directory.\n// For a group layout `(public)/_layout.tsx`, TanStack Router's generator handles the path implicitly.\n// Providing an explicit path like `/(public)/_layout` in createFileRoute can sometimes be necessary\n// if the generator isn't perfectly inferring, but often just `component` is enough for layouts.\n// However, to be explicit and align with potential strict generation:\nexport const Route = createFileRoute('/_layout')({\n  // Note: The path for `createFileRoute` within a group layout `(group)/_layout.tsx`\n  // should typically be just `/` if it's meant to be the layout for that group,\n  // or it might be specific if this layout itself has a path segment *within* the group.\n  // Given it's `_layout.tsx`, it's defining the layout for the `(public)` group itself.\n  // The TanStack Router docs suggest that for a layout route file like `posts/_layout.tsx`,\n  // you'd use `createFileRoute('/posts/_layout')`.\n  // So for `(public)/_layout.tsx`, `createFileRoute('/(public)/_layout')` is appropriate.\n  // Let's use the path that matches its file system location relative to the routes root.\n  // The generator will handle the `(public)` part not being in the URL.\n  id: 'public-layout', // Optional but good for dev tools and clarity\n  component: PublicLayoutComponent,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(public)/home/index.tsx","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":2,"column":37,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":2,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link, createFileRoute } from '@tanstack/react-router';\nimport { Zap } from 'lucide-react'; // Example Icon\nimport React from 'react';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\n\n\nfunction HomePublicPageComponent() {\n  return (\n    <div className=\"text-center\">\n      <header className=\"mb-12\">\n        <Zap className=\"w-16 h-16 mx-auto mb-4 text-sky-500\" />\n        <h1 className=\"text-4xl sm:text-5xl font-bold tracking-tight text-slate-900 dark:text-slate-50\">\n          Welcome to Project Wiz!\n        </h1>\n        <p className=\"mt-4 text-lg text-slate-600 dark:text-slate-300 max-w-2xl mx-auto\">\n          Automate your development workflow with intelligent AI agents. Focus on what matters, let Wiz handle the rest.\n        </p>\n      </header>\n\n      <section className=\"mb-12\">\n        <h2 className=\"text-2xl font-semibold mb-6 text-slate-800 dark:text-slate-100\">Get Started</h2>\n        <div className=\"flex flex-col sm:flex-row justify-center items-center gap-4\">\n          <Button asChild size=\"lg\" className=\"w-full sm:w-auto\">\n            <Link to=\"/onboarding\">\n              Start Onboarding\n            </Link>\n          </Button>\n          <Button variant=\"outline\" size=\"lg\" className=\"w-full sm:w-auto\" disabled>\n            {/* <Link to=\"/login\">Login</Link> */}\n            Login (Coming Soon)\n          </Button>\n        </div>\n        <p className=\"mt-6 text-sm text-slate-500 dark:text-slate-400\">\n          New here? The onboarding process will guide you through the initial setup.\n        </p>\n      </section>\n\n      <section className=\"max-w-3xl mx-auto\">\n        <h3 className=\"text-xl font-semibold mb-4 text-slate-800 dark:text-slate-100\">Key Features (Placeholder)</h3>\n        <ul className=\"list-disc list-inside space-y-2 text-left text-slate-600 dark:text-slate-300\">\n          <li>Intelligent Task Automation: Let AI agents handle repetitive coding tasks.</li>\n          <li>Customizable Agent Personas: Tailor agents to your specific needs and project requirements.</li>\n          <li>Seamless VCS Integration: Work with your existing Git repositories effortlessly.</li>\n          <li>Extensible Tooling: Equip agents with a variety of tools for diverse development activities.</li>\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(public)/home/')({\n  component: HomePublicPageComponent,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.service.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":10,"column":63,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":10,"endColumn":99},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":44,"column":43,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":44,"endColumn":57},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":73,"column":86,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":73,"endColumn":115},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":82,"column":41,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":82,"endColumn":68},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":84,"column":24,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":84,"endColumn":44},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":93,"column":32,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":93,"endColumn":57},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":95,"column":42,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":95,"endColumn":59},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":107,"column":84,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":107,"endColumn":113},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":110,"column":22,"nodeType":"Block","messageId":"unexpectedInlineComment","endLine":110,"endColumn":33},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":120,"column":60,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":120,"endColumn":80}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4756,4759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4756,4759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8130,8133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8130,8133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/ui/services/ipc.service.ts\n\nimport { IPCChannel } from '@/shared/ipc-channels';\nimport {\n  ChatSendMessagePayload,\n  ChatStreamEventPayload,\n  ChatStreamTokenPayload,\n  ChatStreamEndPayload,\n} from '@/shared/ipc-chat.types';\nimport { ProjectListItem } from '@/shared/ipc-project.types'; // Assuming this file and type exist\n\nimport { IElectronIPC, IPCResult } from './ipc.types';\n\nconst electronIPC = window.electronIPC;\n\nconst isElectronEnvironment = (): boolean => {\n  return !!electronIPC;\n};\n\n/**\n * A wrapper around Electron's IPC communication, providing typed methods\n * for interacting with the main process from the renderer.\n */\nclass IPCService {\n  private api: IElectronIPC | null = null;\n\n  constructor() {\n    if (isElectronEnvironment() && electronIPC) {\n      this.api = electronIPC;\n    } else {\n      console.warn(\n        '[IPCService] Electron IPC API not found. Using mock implementation. ' +\n        'Ensure preload script is correctly configured and loaded if running in Electron.',\n      );\n      this.api = this.createMockAPI();\n    }\n  }\n\n  private createMockAPI(): IElectronIPC {\n    const mockInvoke = async <T>(channel: string, ...args: unknown[]): Promise<T> => {\n      console.warn(`[MockIPC] Invoke: '${channel}' with args:`, args);\n      if (channel === IPCChannel.CHAT_SEND_MESSAGE) {\n        // Simulate sending message, no specific data needed for void promise\n        return undefined as unknown as T; // Use unknown\n      }\n      // For other channels, you might want to return specific mock data based on the channel\n      // For example: if (channel === 'app:get-version') return { version: 'mock-0.1.0' } as unknown as T;\n      throw new Error(`MockIPC: Channel '${channel}' not implemented for invoke.`);\n    };\n\n    const mockOn = (channel: string, listener: (...args: unknown[]) => void): (() => void) => {\n      console.warn(`[MockIPC] Listener registered for channel: '${channel}'`, listener);\n      if (channel === IPCChannel.CHAT_STREAM_EVENT) {\n        // Simulate some stream events for chat for testing purposes\n        setTimeout(() => listener({ type: 'token', data: 'Hello' } as ChatStreamTokenPayload), 100);\n        setTimeout(() => listener({ type: 'token', data: ' world' } as ChatStreamTokenPayload), 200);\n        setTimeout(() => listener({ type: 'end' } as ChatStreamEndPayload), 300);\n      }\n      // Add more mock event emissions here if needed for other channels during development without Electron\n      return () => {\n        console.warn(`[MockIPC] Listener removed for channel: '${channel}'`, listener);\n      };\n    };\n\n    const mockSend = (channel: string, ...args: unknown[]): void => {\n      console.warn(`[MockIPC] Send: '${channel}' with args:`, args);\n    };\n\n    return {\n      invoke: mockInvoke,\n      on: mockOn,\n      send: mockSend,\n      removeListener: (channel: string, listener: (...args: unknown[]) => void) => { // listener args to unknown[]\n        console.warn(`[MockIPC] removeListener called for '${channel}'`, listener);\n      },\n      removeAllListeners: (channel: string) => {\n        console.warn(`[MockIPC] removeAllListeners called for '${channel}'`);\n      },\n    };\n  }\n\n  public async invoke<TData = unknown>( // Default TData to unknown\n    channel: string,\n    ...args: unknown[] // Args to unknown[]\n  ): Promise<IPCResult<TData>> {\n    if (!this.api) {\n      return { success: false, error: { message: 'IPC API not available' } };\n    }\n    try {\n      // Assuming this.api.invoke is correctly typed or we trust its behavior\n      const result = await this.api.invoke<TData>(channel, ...args);\n      return { success: true, data: result };\n    } catch (error: unknown) { // Catch error as unknown\n      console.error(`[IPCService] Error invoking channel '${channel}':`, error);\n      const typedError = error as Error; // Type assertion\n      return {\n        success: false,\n        error: {\n          message: typedError.message || 'An unknown IPC error occurred',\n          name: typedError.name,\n          stack: typedError.stack,\n        },\n      };\n    }\n  }\n\n  public on(channel: string, listener: (...args: unknown[]) => void): () => void { // listener args to unknown[]\n    if (!this.api || !this.api.on) {\n      console.error('[IPCService] API not initialized for on.');\n      return () => { /* no-op */ };\n    }\n    // The type of listener in IElectronIPC is `(...args: any[]) => void`.\n    // Casting our more specific `(...args: unknown[]) => void` to `any` here is acceptable\n    // as `unknown[]` can be spread into `any[]`.\n    // Ideally, IElectronIPC would also use `unknown[]`.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return this.api.on(channel, listener as (...args: any[]) => void);\n  }\n\n  public send(channel: string, ...args: unknown[]): void { // Args to unknown[]\n    if (!this.api || !this.api.send) {\n      console.error('[IPCService] API not initialized for send.');\n      return;\n    }\n    this.api.send(channel, ...args);\n  }\n\n  // --- Chat Specific Methods ---\n\n  /**\n   * Sends a chat message to the main process.\n   * @param payload The chat message payload.\n   * @returns A promise that resolves with an IPCResult (void on success, or error).\n   *          The main process might return a job ID or some other acknowledgement.\n   *          For now, typed as Promise<IPCResult<void>> assuming no specific data on success.\n   */\n  public async sendChatMessage(payload: ChatSendMessagePayload): Promise<IPCResult<void>> {\n    return this.invoke<void>(IPCChannel.CHAT_SEND_MESSAGE, payload);\n  }\n\n  /**\n   * Subscribes to chat stream events from the main process.\n   * @param listener The callback function to execute when a chat stream event is received.\n   *                 The listener will be called with the ChatStreamEventPayload.\n   * @returns An unsubscribe function.\n   */\n  public onChatStreamEvent(listener: (payload: ChatStreamEventPayload) => void): () => void {\n    // The generic 'on' method's listener signature is (...args: any[]) => void.\n    // The actual data passed by Electron's ipcRenderer.on is (event, ...argsFromMain).\n    // The IElectronIPC interface's 'on' method is expected to be implemented in preload\n    // such that it calls the provided listener with only the relevant data payload(s),\n    // not the 'event' object, or that it expects a listener that can handle the event object.\n    //\n    // If preload does: contextBridge.exposeInMainWorld('electronIPC', { on: (ch, cb) => ipcRenderer.on(ch, (evt, data) => cb(data)) } )\n    // then our listener here will receive `data` as the first arg.\n    //\n    // If preload does: contextBridge.exposeInMainWorld('electronIPC', { on: (ch, cb) => ipcRenderer.on(ch, cb) } )\n    // then our listener here will receive `(event, data)`.\n    //\n    // The current IElectronIPC.on is typed as: (channel: string, listener: (...args: any[]) => void).\n    // To be safe and ensure our typed listener gets the correct payload, we wrap it.\n    // const wrappedListener = (_event: unknown, payload: ChatStreamEventPayload) => { // REMOVED - Unused\n    //   // This assumes the main process sends the payload as the first argument after the event.\n    //   // If the main process sends multiple arguments, this would need to be adjusted.\n    //   // For chat stream, it's typical to send a single payload object.\n    //   listener(payload);\n    // };\n\n    // If the `this.api.on` is already designed to pass only the payload, then `listener` can be passed directly.\n    // Given the generic nature of `this.api.on`, a wrapper is safer until preload is defined.\n    // However, if `window.electronIPC.on` is defined as `(channel, listener) => ipcRenderer.on(channel, (event, data) => listener(data))`,\n    // then our `listener` here would correctly receive just `data`.\n    // Let's assume the preload script will be written to simplify this for the renderer,\n    // meaning it calls the listener with only the data payload.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return this.on(IPCChannel.CHAT_STREAM_EVENT, listener as (...args: any[]) => void);\n  }\n  // --- Project Specific Methods ---\n\n  /**\n   * Fetches the list of projects from the main process.\n   * @returns A promise that resolves with an IPCResult containing ProjectListItem[] or an error.\n   */\n  public async listProjects(): Promise<IPCResult<ProjectListItem[]>> {\n    return this.invoke<ProjectListItem[]>(IPCChannel.PROJECT_LIST_QUERY);\n  }\n}\n\nexport const ipcService = new IPCService();\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.types.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":57,"column":33,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":57,"endColumn":90},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":73,"column":43,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":73,"endColumn":66}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/ui/services/ipc.types.ts\n\n/**\n * Defines the structure of the API exposed by Electron's preload script\n * to the renderer process for IPC communication.\n */\nexport interface IElectronIPC {\n  /**\n   * Sends a message to the main process via `ipcRenderer.invoke` and returns a Promise\n   * that resolves with the response from the main process.\n   * @param channel The IPC channel to invoke.\n   * @param args Arguments to send to the main process.\n   * @returns A Promise that resolves with the result from the IPC handler.\n   */\n  invoke: <T = unknown>(channel: string, ...args: unknown[]) => Promise<T>;\n\n  /**\n   * Subscribes to an IPC channel for messages sent from the main process.\n   * @param channel The IPC channel to listen on.\n   * @param listener The function to call with messages from the main process.\n   *                 The listener receives `(event, ...args)`.\n   * @returns A function to unsubscribe the listener from the channel.\n   */\n  on: (channel: string, listener: (...args: unknown[]) => void) => () => void;\n\n  /**\n   * Sends a message to the main process via `ipcRenderer.send`. This is typically\n   * for one-way communication where no response is expected.\n   * @param channel The IPC channel to send the message on.\n   * @param args Arguments to send to the main process.\n   */\n  send: (channel: string, ...args: unknown[]) => void;\n\n  /**\n   * Removes a specific listener for an IPC channel.\n   * Note: This is less commonly exposed directly if `on` returns an unsubscribe function.\n   * However, including it for completeness based on some preload patterns.\n   * If `on` returns an unsubscribe function, that's generally preferred.\n   * @param channel The IPC channel.\n   * @param listener The exact listener function that was subscribed.\n   */\n  removeListener?: (channel: string, listener: (...args: unknown[]) => void) => void;\n\n  /**\n   * Removes all listeners for a specific IPC channel.\n   * @param channel The IPC channel.\n   */\n  removeAllListeners?: (channel: string) => void;\n}\n\n/**\n * It's common to expose the IPC API under a specific key on the window object.\n * This declares that key for TypeScript.\n */\ndeclare global {\n  interface Window {\n    electronIPC?: IElectronIPC; // Or 'api', 'coreAPI', etc. Matching the preload script.\n                                // Using 'electronIPC' as a placeholder name for the refactored version.\n  }\n}\n\n// It's also useful to define known IPC channel names.\n// These would ideally be shared between main, preload, and renderer.\n// For now, this is a placeholder. These should be based on actual use cases and main process handlers.\n// Example:\n// export enum IPCChannel {\n//   GET_APP_VERSION = 'app:get-version',\n//   CREATE_PROJECT = 'project:create',\n//   // ... other channels\n// }\n\n// Placeholder for IPC result structure, can be expanded.\nexport interface IPCResult<T = unknown> { // Default T to unknown\n  success: boolean;\n  data?: T;\n  error?: {\n    message: string;\n    name?: string;\n    stack?: string;\n  };\n}\n","usedDeprecatedRules":[]}]