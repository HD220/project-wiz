# Tool Restrictions

switch_mode: DISABLED
ask_followup_question: DISABLED
attempt_completion -> result:REQUIRED command: DISABLED

# General Guidance

## Context Passing Guidelines

When using new_task, you MUST include ALL relevant context in the message field, as the receiving profile has no access to previous conversations. This includes:

1. **Original Request**: Always include the full user request that initiated the work
2. **Context**: Provide relevant background information about the project and task
3. **Current Status**: Explain what has been done so far and what stage the task is at
4. **Task**: Clearly define the specific task for this profile to complete
5. **Constraints**: Specify architectural boundaries, coding standards to follow
6. **Relevant Code**: Include code snippets needed for context

Format your message with clear sections:

ORIGINAL REQUEST: [full user request]
CONTEXT: [relevant background information]
CURRENT STATUS: [what has been done so far]
TASK: [specific task for this profile]
CONSTRAINTS: [architectural boundaries, coding standards to follow]
RELEVANT CODE: [code snippets needed for context]

## Clean Code Principles

All profiles should enforce these clean code principles:

1. **Meaningful Names**: Variables, functions, and classes should have clear, descriptive names
2. **Small Functions**: Functions should be small (< 15 lines) and do one thing well
3. **DRY (Don't Repeat Yourself)**: Avoid code duplication
4. **Comments**: Code should be self-explanatory; comments explain WHY, not WHAT
5. **Error Handling**: Handle errors appropriately and consistently
6. **No Side Effects**: Functions should not have unexpected side effects
7. **Early Returns**: Use guard clauses to handle edge cases early
8. **Consistent Formatting**: Follow consistent formatting throughout the codebase

## Clean Architecture Principles

All profiles should enforce these clean architecture principles:

1. **Dependency Rule**: Source code dependencies must point only inward
2. **Layers**: Maintain clear separation between:
   - Domain/Entity Layer (business rules)
   - Use Case Layer (application-specific business rules)
   - Interface Adapter Layer (controllers, presenters, gateways)
   - Frameworks & Drivers Layer (UI, DB, external interfaces)
3. **Boundaries**: Enforce clear boundaries between architectural layers
4. **Independence**: Business rules should be independent of UI, database, frameworks
5. **Testability**: Architecture should facilitate testing without external dependencies

## Documentation System

All profiles should contribute to and maintain the documentation system:

1. **Progress Tracking**: Update relevant progress files after completing work
2. **Knowledge Continuity**: Ensure knowledge is preserved for future work
3. **Documentation Synchronization**: Keep documentation in sync with code changes
4. **Architectural Documentation**: Document architectural decisions and boundaries
5. **Task Handoff**: Create proper handoff documentation when pausing work

## Documentation Handoff System

To implement the documentation handoff system, we'll create a structured approach with specific files that track progress and maintain continuity:

### Core Documentation Files

1. **Project Context File** (`/docs/project-context.md`)

   - High-level overview of the project
   - Current architectural state
   - Active development initiatives
   - Key stakeholders and responsibilities

2. **Documentation Index** (`/docs/index.md`)

   - Central directory of all documentation
   - Organized by category (Architecture, Domain Model, APIs, etc.)
   - Links to all documentation files

3. **Documentation Status Dashboard** (`/docs/documentation-status.md`)
   - Visual representation of documentation coverage
   - Areas that are well-documented vs. areas needing attention
   - Last updated timestamps for each documentation area

### Progress Tracking Files

1. **Implementation Progress** (`/docs/progress/implementation-progress.md`)

   - Log of all implementation tasks
   - Status (completed, in-progress, planned)
   - Links to relevant code files
   - Implementation decisions and rationale

2. **Testing Progress** (`/docs/progress/testing-progress.md`)

   - Test coverage statistics
   - Areas needing additional tests
   - Testing approach for each component

3. **Refactoring Progress** (`/docs/progress/refactoring-progress.md`)

   - Log of refactoring activities
   - Before/after metrics
   - Technical debt reduction progress

4. **Architecture Status** (`/docs/progress/architecture-status.md`)
   - Compliance with clean architecture principles
   - Architectural boundaries status
   - Areas needing architectural improvement

### Task Resumption Guides

1. **Task Handoff Template** (`/docs/templates/task-handoff.md`)

## Cross-Cutting Systems

All profiles should be aware of and properly integrate with these cross-cutting systems:

1. **Feature Flag Management**: Use feature flags for controlled rollout and experimentation
2. **Dependency Management**: Follow guidelines for dependency selection and updates
3. **Knowledge Transfer**: Contribute to onboarding documentation and knowledge sharing
4. **Internationalization**: Follow i18n best practices for global applications
5. **Project Health Monitoring**: Contribute metrics for project health assessment

## Collaboration Guidelines

1. **Respect Boundaries**: Each profile has specific responsibilities; respect these boundaries
2. **Complete Handoffs**: Always provide complete context when delegating tasks
3. **Feedback Loop**: Provide constructive feedback to improve the overall system
4. **Continuous Improvement**: Suggest improvements to processes and documentation
5. **Holistic Thinking**: Consider how your work affects the entire system

Remember that each profile is part of a larger ecosystem working together to maintain a high-quality, well-organized codebase that follows clean code and clean architecture principles.
