# CLEAN CODE PROTOCOL

## CORE DIRECTIVES

[1/5] NAMING CONVENTIONS

- MUST reveal code intent through names
- MUST use verb-noun format for methods (e.g. `calculateTotal()`)
- BAN non-standard abbreviations (❌ `tmp`, ✅ `temporaryBuffer`)
- MUST describe behavior not implementation (❌ `process()`, ✅ `validateUserInput()`)

[2/5] METHOD CONSTRUCTION

- MAX 15 lines per method
- SINGLE responsibility per method
- MUST use composition over complex logic
- TESTABILITY required (1 test per method minimum)

[3/5] TYPE STRICTNESS

- BAN `any` type usage
- MUST use:
  ```ts
  type Status = "active" | "inactive"; // Literal types
  interface User {
    id: string;
  } // Public contracts
  ```
- REQUIRED type guards for unions
- MUST create custom error types

[4/5] DOCUMENTATION RULES

- ONLY comment "why" not "what"
- FORBID JSDoc comments
- MUST update architecture docs for:
  - Design pattern changes
  - Major refactors
  - API modifications

[5/5] CONSISTENCY CHECKS

- MUST run Prettier/ESLint pre-commit
- MUST follow styleguide.md
- Weekly code pattern audits REQUIRED

## TYPESCRIPT ENFORCEMENTS

### TYPE MANAGEMENT

| Structure   | Use Case               | Example          |
| ----------- | ---------------------- | ---------------- |
| `interface` | Public API contracts   | `UserService`    |
| `type`      | Internal complex types | `ApiResponse<T>` |
| `enum`      | Fixed value sets       | `ErrorCodes`     |

### ERROR HANDLING

```ts
// REQUIRED pattern
class AppError extends Error {
  constructor(public readonly code: ErrorCodes, public context: ErrorContext) {
    super(formatMessage(code, context));
  }
}
```

## REACT STANDARDS

### COMPONENT RULES

- MAX 150 LOC (JSX excluded)
- MAX 3 external dependencies
- MUST use functional components + hooks
- PROHIBITED class components

### HOOK CONSTRAINTS

1. Naming: `use[Feature]` format
2. MAX 2 useEffect per hook
3. REQUIRED 100% test coverage
4. BAN conditional hook calls

### STATE MANAGEMENT

| State Type      | Solution      | Usage Case            |
| --------------- | ------------- | --------------------- |
| Local           | useState      | Component-specific    |
| Cross-component | Zustand       | Shared business logic |
| Persistent      | IDB + Zustand | Offline data          |

## COMMIT PROTOCOL

### MESSAGE STRUCTURE

```
<type>(<scope>): <description> [TICKET]
```

- Types: `feat|fix|docs|style|refactor|test|chore|perf|ci`
- Scope: Module name (≤12 chars)
- Description: Lowercase, present tense

### EXAMPLES

```bash
feat(auth): add OAuth2 flow [PROJ-123]
fix(login): validate email format [PROJ-456]
```

### PRE-COMMIT CHECKS

1. All tests pass
2. Linter warnings ≤ 0
3. Coverage ≥ 80%
4. CHANGELOG updated

## COMPLIANCE CHECKLIST

✅ All methods ≤15 lines  
✅ Zero `any` types  
✅ JSDoc comments removed  
✅ Commit messages structured  
✅ Prettier/ESLint passed  
✅ Error boundaries implemented
