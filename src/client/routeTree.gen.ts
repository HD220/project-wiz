/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as IndexImport } from './pages/index'
import { Route as SettingsIndexImport } from './pages/settings/index'
import { Route as RepositoriesIndexImport } from './pages/repositories/index'
import { Route as ModelsIndexImport } from './pages/models/index'
import { Route as DocumentationIndexImport } from './pages/documentation/index'
import { Route as ActivityLogIndexImport } from './pages/activity-log/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const RepositoriesIndexRoute = RepositoriesIndexImport.update({
  id: '/repositories/',
  path: '/repositories/',
  getParentRoute: () => rootRoute,
} as any)

const ModelsIndexRoute = ModelsIndexImport.update({
  id: '/models/',
  path: '/models/',
  getParentRoute: () => rootRoute,
} as any)

const DocumentationIndexRoute = DocumentationIndexImport.update({
  id: '/documentation/',
  path: '/documentation/',
  getParentRoute: () => rootRoute,
} as any)

const ActivityLogIndexRoute = ActivityLogIndexImport.update({
  id: '/activity-log/',
  path: '/activity-log/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/activity-log/': {
      id: '/activity-log/'
      path: '/activity-log'
      fullPath: '/activity-log'
      preLoaderRoute: typeof ActivityLogIndexImport
      parentRoute: typeof rootRoute
    }
    '/documentation/': {
      id: '/documentation/'
      path: '/documentation'
      fullPath: '/documentation'
      preLoaderRoute: typeof DocumentationIndexImport
      parentRoute: typeof rootRoute
    }
    '/models/': {
      id: '/models/'
      path: '/models'
      fullPath: '/models'
      preLoaderRoute: typeof ModelsIndexImport
      parentRoute: typeof rootRoute
    }
    '/repositories/': {
      id: '/repositories/'
      path: '/repositories'
      fullPath: '/repositories'
      preLoaderRoute: typeof RepositoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/activity-log': typeof ActivityLogIndexRoute
  '/documentation': typeof DocumentationIndexRoute
  '/models': typeof ModelsIndexRoute
  '/repositories': typeof RepositoriesIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/activity-log': typeof ActivityLogIndexRoute
  '/documentation': typeof DocumentationIndexRoute
  '/models': typeof ModelsIndexRoute
  '/repositories': typeof RepositoriesIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/activity-log/': typeof ActivityLogIndexRoute
  '/documentation/': typeof DocumentationIndexRoute
  '/models/': typeof ModelsIndexRoute
  '/repositories/': typeof RepositoriesIndexRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/activity-log'
    | '/documentation'
    | '/models'
    | '/repositories'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/activity-log'
    | '/documentation'
    | '/models'
    | '/repositories'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/activity-log/'
    | '/documentation/'
    | '/models/'
    | '/repositories/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActivityLogIndexRoute: typeof ActivityLogIndexRoute
  DocumentationIndexRoute: typeof DocumentationIndexRoute
  ModelsIndexRoute: typeof ModelsIndexRoute
  RepositoriesIndexRoute: typeof RepositoriesIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActivityLogIndexRoute: ActivityLogIndexRoute,
  DocumentationIndexRoute: DocumentationIndexRoute,
  ModelsIndexRoute: ModelsIndexRoute,
  RepositoriesIndexRoute: RepositoriesIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/activity-log/",
        "/documentation/",
        "/models/",
        "/repositories/",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/activity-log/": {
      "filePath": "activity-log/index.tsx"
    },
    "/documentation/": {
      "filePath": "documentation/index.tsx"
    },
    "/models/": {
      "filePath": "models/index.tsx"
    },
    "/repositories/": {
      "filePath": "repositories/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
