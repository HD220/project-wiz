/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as ProjectRouteImport } from './pages/project/route'
import { Route as GeneralRouteImport } from './pages/general/route'
import { Route as IndexImport } from './pages/index'
import { Route as ProjectIndexImport } from './pages/project/index'
import { Route as OnbordingIndexImport } from './pages/onbording/index'
import { Route as GeneralIndexImport } from './pages/general/index'
import { Route as ProjectIdIndexImport } from './pages/project/$id/index'

// Create/Update Routes

const ProjectRouteRoute = ProjectRouteImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => rootRoute,
} as any)

const GeneralRouteRoute = GeneralRouteImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectIndexRoute = ProjectIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectRouteRoute,
} as any)

const OnbordingIndexRoute = OnbordingIndexImport.update({
  id: '/onbording/',
  path: '/onbording/',
  getParentRoute: () => rootRoute,
} as any)

const GeneralIndexRoute = GeneralIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GeneralRouteRoute,
} as any)

const ProjectIdIndexRoute = ProjectIdIndexImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => ProjectRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/general': {
      id: '/general'
      path: '/general'
      fullPath: '/general'
      preLoaderRoute: typeof GeneralRouteImport
      parentRoute: typeof rootRoute
    }
    '/project': {
      id: '/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectRouteImport
      parentRoute: typeof rootRoute
    }
    '/general/': {
      id: '/general/'
      path: '/'
      fullPath: '/general/'
      preLoaderRoute: typeof GeneralIndexImport
      parentRoute: typeof GeneralRouteImport
    }
    '/onbording/': {
      id: '/onbording/'
      path: '/onbording'
      fullPath: '/onbording'
      preLoaderRoute: typeof OnbordingIndexImport
      parentRoute: typeof rootRoute
    }
    '/project/': {
      id: '/project/'
      path: '/'
      fullPath: '/project/'
      preLoaderRoute: typeof ProjectIndexImport
      parentRoute: typeof ProjectRouteImport
    }
    '/project/$id/': {
      id: '/project/$id/'
      path: '/$id'
      fullPath: '/project/$id'
      preLoaderRoute: typeof ProjectIdIndexImport
      parentRoute: typeof ProjectRouteImport
    }
  }
}

// Create and export the route tree

interface GeneralRouteRouteChildren {
  GeneralIndexRoute: typeof GeneralIndexRoute
}

const GeneralRouteRouteChildren: GeneralRouteRouteChildren = {
  GeneralIndexRoute: GeneralIndexRoute,
}

const GeneralRouteRouteWithChildren = GeneralRouteRoute._addFileChildren(
  GeneralRouteRouteChildren,
)

interface ProjectRouteRouteChildren {
  ProjectIndexRoute: typeof ProjectIndexRoute
  ProjectIdIndexRoute: typeof ProjectIdIndexRoute
}

const ProjectRouteRouteChildren: ProjectRouteRouteChildren = {
  ProjectIndexRoute: ProjectIndexRoute,
  ProjectIdIndexRoute: ProjectIdIndexRoute,
}

const ProjectRouteRouteWithChildren = ProjectRouteRoute._addFileChildren(
  ProjectRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/general': typeof GeneralRouteRouteWithChildren
  '/project': typeof ProjectRouteRouteWithChildren
  '/general/': typeof GeneralIndexRoute
  '/onbording': typeof OnbordingIndexRoute
  '/project/': typeof ProjectIndexRoute
  '/project/$id': typeof ProjectIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/general': typeof GeneralIndexRoute
  '/onbording': typeof OnbordingIndexRoute
  '/project': typeof ProjectIndexRoute
  '/project/$id': typeof ProjectIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/general': typeof GeneralRouteRouteWithChildren
  '/project': typeof ProjectRouteRouteWithChildren
  '/general/': typeof GeneralIndexRoute
  '/onbording/': typeof OnbordingIndexRoute
  '/project/': typeof ProjectIndexRoute
  '/project/$id/': typeof ProjectIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/general'
    | '/project'
    | '/general/'
    | '/onbording'
    | '/project/'
    | '/project/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/general' | '/onbording' | '/project' | '/project/$id'
  id:
    | '__root__'
    | '/'
    | '/general'
    | '/project'
    | '/general/'
    | '/onbording/'
    | '/project/'
    | '/project/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GeneralRouteRoute: typeof GeneralRouteRouteWithChildren
  ProjectRouteRoute: typeof ProjectRouteRouteWithChildren
  OnbordingIndexRoute: typeof OnbordingIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GeneralRouteRoute: GeneralRouteRouteWithChildren,
  ProjectRouteRoute: ProjectRouteRouteWithChildren,
  OnbordingIndexRoute: OnbordingIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/general",
        "/project",
        "/onbording/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/general": {
      "filePath": "general/route.tsx",
      "children": [
        "/general/"
      ]
    },
    "/project": {
      "filePath": "project/route.tsx",
      "children": [
        "/project/",
        "/project/$id/"
      ]
    },
    "/general/": {
      "filePath": "general/index.tsx",
      "parent": "/general"
    },
    "/onbording/": {
      "filePath": "onbording/index.tsx"
    },
    "/project/": {
      "filePath": "project/index.tsx",
      "parent": "/project"
    },
    "/project/$id/": {
      "filePath": "project/$id/index.tsx",
      "parent": "/project"
    }
  }
}
ROUTE_MANIFEST_END */
