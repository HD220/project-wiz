/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as loggedRouteImport } from './pages/(logged)/route'
import { Route as IndexImport } from './pages/index'
import { Route as loggedUserRouteImport } from './pages/(logged)/user/route'
import { Route as loggedProjectRouteImport } from './pages/(logged)/project/route'
import { Route as publicOnbordingIndexImport } from './pages/(public)/onbording/index'
import { Route as publicHomeIndexImport } from './pages/(public)/home/index'
import { Route as loggedUserIndexImport } from './pages/(logged)/user/index'
import { Route as loggedProjectIndexImport } from './pages/(logged)/project/index'
import { Route as loggedUserUserGuidesRouteImport } from './pages/(logged)/user/user-guides/route'
import { Route as loggedUserUserGuidesIndexImport } from './pages/(logged)/user/user-guides/index'
import { Route as loggedProjectIdIndexImport } from './pages/(logged)/project/$id/index'
import { Route as loggedUserDmIdRouteImport } from './pages/(logged)/user/dm/$id/route'
import { Route as loggedUserDmIdIndexImport } from './pages/(logged)/user/dm/$id/index'

// Create/Update Routes

const loggedRouteRoute = loggedRouteImport.update({
  id: '/(logged)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const loggedUserRouteRoute = loggedUserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => loggedRouteRoute,
} as any)

const loggedProjectRouteRoute = loggedProjectRouteImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => loggedRouteRoute,
} as any)

const publicOnbordingIndexRoute = publicOnbordingIndexImport.update({
  id: '/(public)/onbording/',
  path: '/onbording/',
  getParentRoute: () => rootRoute,
} as any)

const publicHomeIndexRoute = publicHomeIndexImport.update({
  id: '/(public)/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any)

const loggedUserIndexRoute = loggedUserIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => loggedUserRouteRoute,
} as any)

const loggedProjectIndexRoute = loggedProjectIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => loggedProjectRouteRoute,
} as any)

const loggedUserUserGuidesRouteRoute = loggedUserUserGuidesRouteImport.update({
  id: '/user-guides',
  path: '/user-guides',
  getParentRoute: () => loggedUserRouteRoute,
} as any)

const loggedUserUserGuidesIndexRoute = loggedUserUserGuidesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => loggedUserUserGuidesRouteRoute,
} as any)

const loggedProjectIdIndexRoute = loggedProjectIdIndexImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => loggedProjectRouteRoute,
} as any)

const loggedUserDmIdRouteRoute = loggedUserDmIdRouteImport.update({
  id: '/dm/$id',
  path: '/dm/$id',
  getParentRoute: () => loggedUserRouteRoute,
} as any)

const loggedUserDmIdIndexRoute = loggedUserDmIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => loggedUserDmIdRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(logged)': {
      id: '/(logged)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof loggedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(logged)/project': {
      id: '/(logged)/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof loggedProjectRouteImport
      parentRoute: typeof loggedRouteImport
    }
    '/(logged)/user': {
      id: '/(logged)/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof loggedUserRouteImport
      parentRoute: typeof loggedRouteImport
    }
    '/(logged)/user/user-guides': {
      id: '/(logged)/user/user-guides'
      path: '/user-guides'
      fullPath: '/user/user-guides'
      preLoaderRoute: typeof loggedUserUserGuidesRouteImport
      parentRoute: typeof loggedUserRouteImport
    }
    '/(logged)/project/': {
      id: '/(logged)/project/'
      path: '/'
      fullPath: '/project/'
      preLoaderRoute: typeof loggedProjectIndexImport
      parentRoute: typeof loggedProjectRouteImport
    }
    '/(logged)/user/': {
      id: '/(logged)/user/'
      path: '/'
      fullPath: '/user/'
      preLoaderRoute: typeof loggedUserIndexImport
      parentRoute: typeof loggedUserRouteImport
    }
    '/(public)/home/': {
      id: '/(public)/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof publicHomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/(public)/onbording/': {
      id: '/(public)/onbording/'
      path: '/onbording'
      fullPath: '/onbording'
      preLoaderRoute: typeof publicOnbordingIndexImport
      parentRoute: typeof rootRoute
    }
    '/(logged)/user/dm/$id': {
      id: '/(logged)/user/dm/$id'
      path: '/dm/$id'
      fullPath: '/user/dm/$id'
      preLoaderRoute: typeof loggedUserDmIdRouteImport
      parentRoute: typeof loggedUserRouteImport
    }
    '/(logged)/project/$id/': {
      id: '/(logged)/project/$id/'
      path: '/$id'
      fullPath: '/project/$id'
      preLoaderRoute: typeof loggedProjectIdIndexImport
      parentRoute: typeof loggedProjectRouteImport
    }
    '/(logged)/user/user-guides/': {
      id: '/(logged)/user/user-guides/'
      path: '/'
      fullPath: '/user/user-guides/'
      preLoaderRoute: typeof loggedUserUserGuidesIndexImport
      parentRoute: typeof loggedUserUserGuidesRouteImport
    }
    '/(logged)/user/dm/$id/': {
      id: '/(logged)/user/dm/$id/'
      path: '/'
      fullPath: '/user/dm/$id/'
      preLoaderRoute: typeof loggedUserDmIdIndexImport
      parentRoute: typeof loggedUserDmIdRouteImport
    }
  }
}

// Create and export the route tree

interface loggedProjectRouteRouteChildren {
  loggedProjectIndexRoute: typeof loggedProjectIndexRoute
  loggedProjectIdIndexRoute: typeof loggedProjectIdIndexRoute
}

const loggedProjectRouteRouteChildren: loggedProjectRouteRouteChildren = {
  loggedProjectIndexRoute: loggedProjectIndexRoute,
  loggedProjectIdIndexRoute: loggedProjectIdIndexRoute,
}

const loggedProjectRouteRouteWithChildren =
  loggedProjectRouteRoute._addFileChildren(loggedProjectRouteRouteChildren)

interface loggedUserUserGuidesRouteRouteChildren {
  loggedUserUserGuidesIndexRoute: typeof loggedUserUserGuidesIndexRoute
}

const loggedUserUserGuidesRouteRouteChildren: loggedUserUserGuidesRouteRouteChildren =
  {
    loggedUserUserGuidesIndexRoute: loggedUserUserGuidesIndexRoute,
  }

const loggedUserUserGuidesRouteRouteWithChildren =
  loggedUserUserGuidesRouteRoute._addFileChildren(
    loggedUserUserGuidesRouteRouteChildren,
  )

interface loggedUserDmIdRouteRouteChildren {
  loggedUserDmIdIndexRoute: typeof loggedUserDmIdIndexRoute
}

const loggedUserDmIdRouteRouteChildren: loggedUserDmIdRouteRouteChildren = {
  loggedUserDmIdIndexRoute: loggedUserDmIdIndexRoute,
}

const loggedUserDmIdRouteRouteWithChildren =
  loggedUserDmIdRouteRoute._addFileChildren(loggedUserDmIdRouteRouteChildren)

interface loggedUserRouteRouteChildren {
  loggedUserUserGuidesRouteRoute: typeof loggedUserUserGuidesRouteRouteWithChildren
  loggedUserIndexRoute: typeof loggedUserIndexRoute
  loggedUserDmIdRouteRoute: typeof loggedUserDmIdRouteRouteWithChildren
}

const loggedUserRouteRouteChildren: loggedUserRouteRouteChildren = {
  loggedUserUserGuidesRouteRoute: loggedUserUserGuidesRouteRouteWithChildren,
  loggedUserIndexRoute: loggedUserIndexRoute,
  loggedUserDmIdRouteRoute: loggedUserDmIdRouteRouteWithChildren,
}

const loggedUserRouteRouteWithChildren = loggedUserRouteRoute._addFileChildren(
  loggedUserRouteRouteChildren,
)

interface loggedRouteRouteChildren {
  loggedProjectRouteRoute: typeof loggedProjectRouteRouteWithChildren
  loggedUserRouteRoute: typeof loggedUserRouteRouteWithChildren
}

const loggedRouteRouteChildren: loggedRouteRouteChildren = {
  loggedProjectRouteRoute: loggedProjectRouteRouteWithChildren,
  loggedUserRouteRoute: loggedUserRouteRouteWithChildren,
}

const loggedRouteRouteWithChildren = loggedRouteRoute._addFileChildren(
  loggedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof loggedRouteRouteWithChildren
  '/project': typeof loggedProjectRouteRouteWithChildren
  '/user': typeof loggedUserRouteRouteWithChildren
  '/user/user-guides': typeof loggedUserUserGuidesRouteRouteWithChildren
  '/project/': typeof loggedProjectIndexRoute
  '/user/': typeof loggedUserIndexRoute
  '/home': typeof publicHomeIndexRoute
  '/onbording': typeof publicOnbordingIndexRoute
  '/user/dm/$id': typeof loggedUserDmIdRouteRouteWithChildren
  '/project/$id': typeof loggedProjectIdIndexRoute
  '/user/user-guides/': typeof loggedUserUserGuidesIndexRoute
  '/user/dm/$id/': typeof loggedUserDmIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof loggedRouteRouteWithChildren
  '/project': typeof loggedProjectIndexRoute
  '/user': typeof loggedUserIndexRoute
  '/home': typeof publicHomeIndexRoute
  '/onbording': typeof publicOnbordingIndexRoute
  '/project/$id': typeof loggedProjectIdIndexRoute
  '/user/user-guides': typeof loggedUserUserGuidesIndexRoute
  '/user/dm/$id': typeof loggedUserDmIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(logged)': typeof loggedRouteRouteWithChildren
  '/(logged)/project': typeof loggedProjectRouteRouteWithChildren
  '/(logged)/user': typeof loggedUserRouteRouteWithChildren
  '/(logged)/user/user-guides': typeof loggedUserUserGuidesRouteRouteWithChildren
  '/(logged)/project/': typeof loggedProjectIndexRoute
  '/(logged)/user/': typeof loggedUserIndexRoute
  '/(public)/home/': typeof publicHomeIndexRoute
  '/(public)/onbording/': typeof publicOnbordingIndexRoute
  '/(logged)/user/dm/$id': typeof loggedUserDmIdRouteRouteWithChildren
  '/(logged)/project/$id/': typeof loggedProjectIdIndexRoute
  '/(logged)/user/user-guides/': typeof loggedUserUserGuidesIndexRoute
  '/(logged)/user/dm/$id/': typeof loggedUserDmIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/project'
    | '/user'
    | '/user/user-guides'
    | '/project/'
    | '/user/'
    | '/home'
    | '/onbording'
    | '/user/dm/$id'
    | '/project/$id'
    | '/user/user-guides/'
    | '/user/dm/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/project'
    | '/user'
    | '/home'
    | '/onbording'
    | '/project/$id'
    | '/user/user-guides'
    | '/user/dm/$id'
  id:
    | '__root__'
    | '/'
    | '/(logged)'
    | '/(logged)/project'
    | '/(logged)/user'
    | '/(logged)/user/user-guides'
    | '/(logged)/project/'
    | '/(logged)/user/'
    | '/(public)/home/'
    | '/(public)/onbording/'
    | '/(logged)/user/dm/$id'
    | '/(logged)/project/$id/'
    | '/(logged)/user/user-guides/'
    | '/(logged)/user/dm/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  loggedRouteRoute: typeof loggedRouteRouteWithChildren
  publicHomeIndexRoute: typeof publicHomeIndexRoute
  publicOnbordingIndexRoute: typeof publicOnbordingIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  loggedRouteRoute: loggedRouteRouteWithChildren,
  publicHomeIndexRoute: publicHomeIndexRoute,
  publicOnbordingIndexRoute: publicOnbordingIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(logged)",
        "/(public)/home/",
        "/(public)/onbording/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(logged)": {
      "filePath": "(logged)/route.tsx",
      "children": [
        "/(logged)/project",
        "/(logged)/user"
      ]
    },
    "/(logged)/project": {
      "filePath": "(logged)/project/route.tsx",
      "parent": "/(logged)",
      "children": [
        "/(logged)/project/",
        "/(logged)/project/$id/"
      ]
    },
    "/(logged)/user": {
      "filePath": "(logged)/user/route.tsx",
      "parent": "/(logged)",
      "children": [
        "/(logged)/user/user-guides",
        "/(logged)/user/",
        "/(logged)/user/dm/$id"
      ]
    },
    "/(logged)/user/user-guides": {
      "filePath": "(logged)/user/user-guides/route.tsx",
      "parent": "/(logged)/user",
      "children": [
        "/(logged)/user/user-guides/"
      ]
    },
    "/(logged)/project/": {
      "filePath": "(logged)/project/index.tsx",
      "parent": "/(logged)/project"
    },
    "/(logged)/user/": {
      "filePath": "(logged)/user/index.tsx",
      "parent": "/(logged)/user"
    },
    "/(public)/home/": {
      "filePath": "(public)/home/index.tsx"
    },
    "/(public)/onbording/": {
      "filePath": "(public)/onbording/index.tsx"
    },
    "/(logged)/user/dm/$id": {
      "filePath": "(logged)/user/dm/$id/route.tsx",
      "parent": "/(logged)/user",
      "children": [
        "/(logged)/user/dm/$id/"
      ]
    },
    "/(logged)/project/$id/": {
      "filePath": "(logged)/project/$id/index.tsx",
      "parent": "/(logged)/project"
    },
    "/(logged)/user/user-guides/": {
      "filePath": "(logged)/user/user-guides/index.tsx",
      "parent": "/(logged)/user/user-guides"
    },
    "/(logged)/user/dm/$id/": {
      "filePath": "(logged)/user/dm/$id/index.tsx",
      "parent": "/(logged)/user/dm/$id"
    }
  }
}
ROUTE_MANIFEST_END */
