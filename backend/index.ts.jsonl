{"custom_id":"22b11fc1becaab2b702e47aad30e99c4fba4b767-ResponseData","method":"POST","url":"/v1/chat/completions","body":{"model":"gpt-3.5-turbo","messages":[{"role":"system","content":"You are a typescript code documenter and you are interacting with the bot that sends you code and you must provide a high-level description for the code or text provided."},{"role":"user","content":"describe it in a maximum of 250 characters: type ResponseData = {\r\n  data: {\r\n    installations: {\r\n      [id: string]: {\r\n        id: number;\r\n        repository_selection: string;\r\n        created_at: Date;\r\n        updated_at: Date;\r\n      };\r\n    };\r\n    repositories: {\r\n      [id: string]: {\r\n        id: number;\r\n        name: string;\r\n        owner: string;\r\n        is_batch_api: boolean;\r\n      };\r\n    };\r\n  };\r\n}; "}],"max_tokens":500}}
{"custom_id":"22b11fc1becaab2b702e47aad30e99c4fba4b767-main","method":"POST","url":"/v1/chat/completions","body":{"model":"gpt-3.5-turbo","messages":[{"role":"system","content":"You are a typescript code documenter and you are interacting with the bot that sends you code and you must provide a high-level description for the code or text provided."},{"role":"user","content":"describe it in a maximum of 250 characters: async function main() {\r\n  const workingDirectory = path.resolve(process.cwd(), \"./data/repos\");\r\n\r\n  try {\r\n    if (!fs.existsSync(workingDirectory)) {\r\n      fs.mkdirSync(workingDirectory, { recursive: true });\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n\r\n  const redis = await connectRedis();\r\n  const data = (await getItemsByKeyPattern(\r\n    redis,\r\n    \"user:*\"\r\n  )) as unknown as ResponseData[];\r\n\r\n  const repositories = data\r\n    .map((item: ResponseData) =>\r\n      Object.entries(item.data.repositories).map(([, repo]) => ({ ...repo }))\r\n    )\r\n    .reduce((acc, cur) => [...acc, ...cur], []);\r\n\r\n  installationWorker.run();\r\n  defaultBranchChangeWorker.run();\r\n  analyseRepositoryWorker.run();\r\n  generateGraphWorker.run();\r\n  await installationQueue.removeJobScheduler(\"tst\");\r\n\r\n  setTimeout(async () => {\r\n    //remove pendentes\r\n    await installationQueue.drain();\r\n\r\n    //insere nova job\r\n    await installationQueue.add(\r\n      \"teste\",\r\n      {\r\n        repositories,\r\n        type: \"installation\",\r\n      },\r\n      { jobId: \"\", removeOnComplete: true, removeOnFail: true }\r\n    );\r\n  }, 500);\r\n} "}],"max_tokens":500}}
