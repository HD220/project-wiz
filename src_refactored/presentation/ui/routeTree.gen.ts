/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as IndexRouteImport } from './app/index'
import { Route as publicOnboardingIndexRouteImport } from './app/(public)/onboarding/index'
import { Route as appSettingsIndexRouteImport } from './app/(app)/settings/index'
import { Route as appDashboardIndexRouteImport } from './app/(app)/dashboard/index'
import { Route as appSettingsLlmIndexRouteImport } from './app/(app)/settings/llm/index'
import { Route as appSettingsLlmNewIndexRouteImport } from './app/(app)/settings/llm/new/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicOnboardingIndexRoute = publicOnboardingIndexRouteImport.update({
  id: '/(public)/onboarding/',
  path: '/onboarding/',
  getParentRoute: () => rootRouteImport,
} as any)
const appSettingsIndexRoute = appSettingsIndexRouteImport.update({
  id: '/(app)/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const appDashboardIndexRoute = appDashboardIndexRouteImport.update({
  id: '/(app)/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const appSettingsLlmIndexRoute = appSettingsLlmIndexRouteImport.update({
  id: '/(app)/settings/llm/',
  path: '/settings/llm/',
  getParentRoute: () => rootRouteImport,
} as any)
const appSettingsLlmNewIndexRoute = appSettingsLlmNewIndexRouteImport.update({
  id: '/(app)/settings/llm/new/',
  path: '/settings/llm/new/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof appDashboardIndexRoute
  '/settings': typeof appSettingsIndexRoute
  '/onboarding': typeof publicOnboardingIndexRoute
  '/settings/llm': typeof appSettingsLlmIndexRoute
  '/settings/llm/new': typeof appSettingsLlmNewIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof appDashboardIndexRoute
  '/settings': typeof appSettingsIndexRoute
  '/onboarding': typeof publicOnboardingIndexRoute
  '/settings/llm': typeof appSettingsLlmIndexRoute
  '/settings/llm/new': typeof appSettingsLlmNewIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)/dashboard/': typeof appDashboardIndexRoute
  '/(app)/settings/': typeof appSettingsIndexRoute
  '/(public)/onboarding/': typeof publicOnboardingIndexRoute
  '/(app)/settings/llm/': typeof appSettingsLlmIndexRoute
  '/(app)/settings/llm/new/': typeof appSettingsLlmNewIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/settings'
    | '/onboarding'
    | '/settings/llm'
    | '/settings/llm/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/settings'
    | '/onboarding'
    | '/settings/llm'
    | '/settings/llm/new'
  id:
    | '__root__'
    | '/'
    | '/(app)/dashboard/'
    | '/(app)/settings/'
    | '/(public)/onboarding/'
    | '/(app)/settings/llm/'
    | '/(app)/settings/llm/new/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appDashboardIndexRoute: typeof appDashboardIndexRoute
  appSettingsIndexRoute: typeof appSettingsIndexRoute
  publicOnboardingIndexRoute: typeof publicOnboardingIndexRoute
  appSettingsLlmIndexRoute: typeof appSettingsLlmIndexRoute
  appSettingsLlmNewIndexRoute: typeof appSettingsLlmNewIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/onboarding/': {
      id: '/(public)/onboarding/'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof publicOnboardingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/settings/': {
      id: '/(app)/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof appSettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/dashboard/': {
      id: '/(app)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/settings/llm/': {
      id: '/(app)/settings/llm/'
      path: '/settings/llm'
      fullPath: '/settings/llm'
      preLoaderRoute: typeof appSettingsLlmIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/settings/llm/new/': {
      id: '/(app)/settings/llm/new/'
      path: '/settings/llm/new'
      fullPath: '/settings/llm/new'
      preLoaderRoute: typeof appSettingsLlmNewIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appDashboardIndexRoute: appDashboardIndexRoute,
  appSettingsIndexRoute: appSettingsIndexRoute,
  publicOnboardingIndexRoute: publicOnboardingIndexRoute,
  appSettingsLlmIndexRoute: appSettingsLlmIndexRoute,
  appSettingsLlmNewIndexRoute: appSettingsLlmNewIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
