[{"filePath":"/app/forge.env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/executable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/ports/use-case.interface.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":17,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":17,"endColumn":26,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[675,1061],"text":"type IUseCase<\n  TRequest,\n  TResponse,\n  TError extends Error = DomainError | ApplicationError,\n> = Executable<TRequest, TResponse, TError>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/common/ports/use-case.interface.ts\nimport { DomainError } from '@/domain/common/errors';\n\nimport { ApplicationError } from '@/application/common/errors';\n\nimport { Executable } from '../executable';\n\n/**\n * Defines the basic contract for a use case.\n * A use case executes a specific piece of business logic.\n * It extends the generic Executable interface.\n *\n * @template TRequest The type of the request object that the use case accepts.\n * @template TResponse The type of the successful output from the use case.\n * @template TError The type of the error output from the use case. Defaults to DomainError or ApplicationError.\n */\nexport interface IUseCase<\n  TRequest,\n  TResponse,\n  TError extends Error = DomainError | ApplicationError,\n> extends Executable<TRequest, TResponse, TError> {\n  // This interface is intentionally kept lean, primarily inheriting from Executable.\n  // Future enhancements or specific use case methods can be added here.\n  // For now, it serves as a clear marker for use case implementations.\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-agent-executor.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-tool-registry.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-worker.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/dtos/create-job.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/dtos/get-job.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/dtos/get-jobs-by-status.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/dtos/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/use-cases/create-job.use-case.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":50,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":50,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/queue/use-cases/create-job.use-case.ts\nimport { ValueError } from '@/domain/common/errors'; // Corrected path\nimport { JobEntity, JobEntityConstructionProps } from '@/domain/job/job.entity';\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n// import { Inject, Injectable } from '@/application/common/ioc/dependency-injection.decorators'; // Assuming an IoC container might be used\n\nimport { ok as Ok, error as Err } from '@/shared/result'; // Use exported ok and error\n\nimport { CreateJobRequestDTO, CreateJobResponseDTO } from '../dtos'; // This relative path might be okay or could use an alias if dtos are central\n\n\n// @Injectable() // Decorator if an IoC container like InversifyJS is used\nexport class CreateJobUseCase<TData = unknown, TResult = unknown>\n  implements IUseCase<CreateJobRequestDTO<TData>, CreateJobResponseDTO<TData, TResult>> {\n  private readonly jobRepository: IJobRepository;\n\n  constructor(\n    // @Inject(JobRepositorySymbol) // Example if Symbol is used as token\n    jobRepository: IJobRepository,\n  ) {\n    this.jobRepository = jobRepository;\n  }\n\n  async execute(\n    request: CreateJobRequestDTO<TData>,\n  ): Promise<CreateJobResponseDTO<TData, TResult>> {\n    try {\n      const jobEntityConstructionProps: JobEntityConstructionProps<TData> = {\n        queueName: request.queueName,\n        jobName: request.jobName,\n        payload: request.payload,\n        opts: request.opts,\n      };\n\n      // Create the job entity. JobEntity.create might throw ValueError.\n      const jobEntity = JobEntity.create<TData, TResult>(jobEntityConstructionProps);\n\n      // Persist the job entity\n      const saveResult = await this.jobRepository.save(jobEntity);\n\n      if (saveResult.success === false) {\n        // Check using success property\n        // Propagate repository error\n        return Err(saveResult.error);\n      }\n\n      return Ok(jobEntity);\n    } catch (e: unknown) {\n      // Catch errors from JobEntity.create() or other unexpected issues\n      if (e instanceof ValueError) {\n        return Err(e); // Propagate ValueError\n      }\n      // For other errors, wrap them in a generic Error or a specific AppError if defined\n      const message = e instanceof Error ? e.message : String(e);\n      return Err(new Error(`An unexpected error occurred while creating the job: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/use-cases/get-job.use-case.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":41,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":41,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/queue/use-cases/get-job.use-case.ts\nimport { ValueError } from '@/domain/common/errors';\nimport { JobEntity } from '@/domain/job/job.entity';\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { JobIdVO } from '@/domain/job/value-objects/job-id.vo';\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n// import { Inject, Injectable } from '../../common/ioc/dependency-injection.decorators';\n\nimport { ok as Ok, error as Err } from '@/shared/result';\n\nimport { GetJobRequestDTO, GetJobResponseDTO } from '../dtos';\n\n\n// @Injectable()\nexport class GetJobUseCase<TData = unknown, TResult = unknown>\n  implements IUseCase<GetJobRequestDTO, GetJobResponseDTO<TData, TResult>> {\n  private readonly jobRepository: IJobRepository;\n\n  constructor(\n    // @Inject(JobRepositorySymbol)\n    jobRepository: IJobRepository,\n  ) {\n    this.jobRepository = jobRepository;\n  }\n\n  async execute(\n    request: GetJobRequestDTO,\n  ): Promise<GetJobResponseDTO<TData, TResult>> {\n    try {\n      const jobIdVO = JobIdVO.create(request.jobId); // Can throw ValueError if ID is invalid\n\n      const findResult = await this.jobRepository.findById(jobIdVO);\n\n      if (findResult.success === false) {\n        // Propagate repository error\n        return Err(findResult.error);\n      }\n      // findResult.value will be JobEntity | null\n      return Ok(findResult.value as JobEntity<TData, TResult> | null);\n    } catch (e: unknown) {\n      if (e instanceof ValueError) {\n        return Err(e); // From JobIdVO.create()\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      return Err(new Error(`An unexpected error occurred while getting the job: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/use-cases/get-jobs-by-status.use-case.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":52,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":52,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/queue/use-cases/get-jobs-by-status.use-case.ts\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { JobSearchFilters, PaginationOptions, PaginatedJobsResult } from '@/domain/job/ports/job-repository.types';\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n// import { Inject, Injectable } from '../../common/ioc/dependency-injection.decorators';\n\nimport { ok as Ok, error as Err } from '@/shared/result';\n\nimport { GetJobsByStatusRequestDTO, GetJobsByStatusResponseDTO } from '../dtos';\n\n// @Injectable()\nexport class GetJobsByStatusUseCase<TData = unknown, TResult = unknown>\n  implements IUseCase<GetJobsByStatusRequestDTO, GetJobsByStatusResponseDTO<TData, TResult>> {\n  private readonly jobRepository: IJobRepository;\n\n  constructor(\n    // @Inject(JobRepositorySymbol)\n    jobRepository: IJobRepository,\n  ) {\n    this.jobRepository = jobRepository;\n  }\n\n  async execute(\n    request: GetJobsByStatusRequestDTO,\n  ): Promise<GetJobsByStatusResponseDTO<TData, TResult>> {\n    try {\n      const filters: JobSearchFilters = {\n        queueName: request.queueName,\n        status: request.statuses,\n        // Other filters can be added here if GetJobsByStatusRequestDTO expands\n      };\n\n      const pagination: PaginationOptions = request.paginationOptions || {\n        // Default pagination if not provided\n        page: 1,\n        limit: 20, // Default limit\n      };\n\n      const searchResult = await this.jobRepository.search(filters, pagination);\n\n      if (searchResult.success === false) {\n        // Propagate repository error\n        return Err(searchResult.error);\n      }\n\n      // The result from repository search is already PaginatedJobsResult<unknown, unknown>\n      // We cast it here to the specific TData, TResult of this use case instance.\n      // This assumes the underlying data in JobEntity instances within PaginatedJobsResult\n      // is compatible or that consumers will handle potential type differences if TData/TResult vary.\n      return Ok(searchResult.value as PaginatedJobsResult<TData, TResult>);\n    } catch (e: unknown) {\n      // Catch any unexpected errors during filter/pagination setup or if repository.search itself throws\n      const message = e instanceof Error ? e.message : String(e);\n      return Err(new Error(`An unexpected error occurred while getting jobs by status: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/generic-agent-executor.service.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Async method 'executeJob' has too many lines (221). Maximum allowed is 100.","line":41,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":287,"endColumn":4},{"ruleId":"max-statements","severity":1,"message":"Async method 'executeJob' has too many statements (156). Maximum allowed is 25.","line":41,"column":26,"nodeType":"FunctionExpression","messageId":"exceed","endLine":287,"endColumn":4},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":168,"column":13,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":188,"endColumn":14},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (6). Maximum allowed is 4.","line":170,"column":15,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":187,"endColumn":16},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":190,"column":13,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":205,"endColumn":14},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":230,"column":80,"nodeType":"Identifier","messageId":"tooShort","endLine":230,"endColumn":81},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":238,"column":57,"nodeType":"Identifier","messageId":"tooShort","endLine":238,"endColumn":58},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":246,"column":63,"nodeType":"Identifier","messageId":"tooShort","endLine":246,"endColumn":64},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":246,"column":148,"nodeType":"Identifier","messageId":"tooShort","endLine":246,"endColumn":149},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":256,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":256,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `tool_calls` must match one of the following formats: camelCase","line":310,"column":53,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":310,"endColumn":63},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `tool_call_id` must match one of the following formats: camelCase","line":312,"column":39,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":312,"endColumn":51},{"ruleId":"max-statements","severity":1,"message":"Async method '_processAndValidateSingleToolCall' has too many statements (34). Maximum allowed is 25.","line":318,"column":50,"nodeType":"FunctionExpression","messageId":"exceed","endLine":365,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":333,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":333,"endColumn":24},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":359,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":359,"endColumn":24},{"ruleId":"id-length","severity":1,"message":"Identifier name 'm' is too short (< 2).","line":376,"column":30,"nodeType":"Identifier","messageId":"tooShort","endLine":376,"endColumn":31},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":383,"column":70,"nodeType":"Identifier","messageId":"tooShort","endLine":383,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentIteration' is defined but never used. Allowed unused args must match /^_/u.","line":401,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":401,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { ILogger } from '@/core/common/services/i-logger.service';\n// Corrected path for ILLMAdapter, was trying to import from @/application before\nimport { AgentExecutorStatus } from '@/core/domain/job/job-processing.types'; // Added import\nimport { ILLMAdapter } from '@/core/ports/adapters/llm-adapter.interface';\nimport { LanguageModelMessage, LanguageModelMessageToolCall } from '@/core/ports/adapters/llm-adapter.types'; // Assuming this path\nimport { IToolExecutionContext } from '@/core/tools/tool.interface';\n\nimport { Agent } from '@/domain/agent/agent.entity';\n// Corrected filename for IAgentInternalStateRepository\nimport { IAgentInternalStateRepository } from '@/domain/agent/ports/agent-internal-state-repository.interface';\nimport { DomainError, ToolError } from '@/domain/common/errors';\nimport { AgentExecutorResult, CriticalToolFailureInfo, ExecutionHistoryEntry } from '@/domain/job/job-processing.types';\nimport { Job } from '@/domain/job/job.entity';\n// Corrected filename for IJobRepository\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { ActivityHistoryEntry, HistoryEntryRoleType } from '@/domain/job/value-objects/activity-history-entry.vo';\nimport { ActivityHistory } from '@/domain/job/value-objects/activity-history.vo';\nimport { JobStatusType } from '@/domain/job/value-objects/job-status.vo';\n\nimport { ApplicationError } from '@/application/common/errors';\nimport { IAgentExecutor } from '@/application/ports/services/i-agent-executor.interface';\nimport { IToolRegistryService } from '@/application/ports/services/i-tool-registry.service';\n\nimport { ok, error, Result } from '@/shared/result';\n\n\n// @Injectable() // Assuming InversifyJS or similar will be used for DI\nexport class GenericAgentExecutor implements IAgentExecutor {\n  private readonly minUsableLlmResponseLength = 10;\n  private readonly maxReplanAttemptsForEmptyResponse = 1;\n\n  constructor(\n    private readonly llmAdapter: ILLMAdapter,\n    private readonly toolRegistryService: IToolRegistryService,\n    private readonly jobRepository: IJobRepository,\n    private readonly agentInternalStateRepository: IAgentInternalStateRepository,\n    private readonly logger: ILogger, // Added logger\n  ) {}\n\n  public async executeJob(\n    job: Job,\n    agent: Agent,\n  ): Promise<Result<AgentExecutorResult, DomainError | ApplicationError>> {\n    const { id: jobId, attemptsMade } = job.props; // Assuming props access like this\n    this.logger.info(\n      `Executing Job ID: ${jobId.value} with Agent ID: ${agent.id.value}`,\n      { jobId: jobId.value, agentId: agent.id.value },\n    );\n\n    let agentExecutorResult: AgentExecutorResult;\n\n    try {\n      let agentState = job.currentData().agentState;\n      if (!agentState || !agentState.conversationHistory) {\n        this.logger.info(`Job ID: ${jobId.value} is missing agentState or conversationHistory. Initializing.`);\n        agentState = {\n          conversationHistory: ActivityHistory.create([]),\n          executionHistory: agentState?.executionHistory || [],\n        };\n        job.updateAgentState(agentState);\n      }\n      let currentActivityHistory = agentState.conversationHistory;\n\n      const jobStatusUpdateResult = this.updateJobToActiveStatus(job);\n      if (jobStatusUpdateResult.isErr()) {\n        agentExecutorResult = this._createFinalResult(job, 'FAILURE_INTERNAL', jobStatusUpdateResult.error.message);\n        job.finalizeExecution(agentExecutorResult);\n        await this.jobRepository.save(job).catch(saveErr => this.logger.error(`Failed to save job during status update failure for Job ID: ${jobId.value}`, saveErr));\n        return error(jobStatusUpdateResult.error);\n      }\n\n      const initialSaveResult = await this.jobRepository.save(job);\n      if (initialSaveResult.isErr()) {\n        this.logger.error(`Failed to save Job ID: ${jobId.value} after initial updates.`, initialSaveResult.error);\n        agentExecutorResult = this._createFinalResult(job, 'FAILURE_INTERNAL', `Initial save failed: ${initialSaveResult.error.message}`);\n        job.finalizeExecution(agentExecutorResult);\n        await this.jobRepository.save(job).catch(saveErr => this.logger.error(`Failed to save job during initial save failure processing for Job ID: ${jobId.value}`, saveErr));\n        return error(initialSaveResult.error);\n      }\n      this.logger.info(`Job ID: ${jobId.value} is ACTIVE and saved. Attempt: ${attemptsMade.value}`);\n\n      let goalAchieved = false;\n      let iterations = 0;\n      const maxIterations = agent.maxIterations().value;\n      this.logger.info(`Max iterations for Job ID: ${jobId.value} set to ${maxIterations} from agent config.`);\n      let llmResponseText = 'No response yet.';\n      let assistantMessage: LanguageModelMessage | null = null;\n      let replanAttemptsForEmptyResponse = 0;\n      let criticalErrorEncounteredThisTurn = false;\n      let newExecutionHistoryEntries: ExecutionHistoryEntry[] = [];\n\n      if (currentActivityHistory.isEmpty()) {\n        const jobPayload = job.payload() as { prompt?: string; [key: string]: unknown };\n        const jobName = job.name().value;\n        const userPromptContent = jobPayload.prompt || `Based on your persona, please address the following task: ${jobName}`;\n        const userPromptEntry = ActivityHistoryEntry.create(HistoryEntryRoleType.USER, userPromptContent);\n        currentActivityHistory = currentActivityHistory.addEntry(userPromptEntry);\n        agentState = { ...agentState!, conversationHistory: currentActivityHistory };\n        job.updateAgentState(agentState);\n      }\n\n      while (iterations < maxIterations && !goalAchieved && !criticalErrorEncounteredThisTurn) {\n        iterations++;\n        this.logger.info(`Starting LLM interaction cycle ${iterations} for Job ID: ${jobId.value}`);\n\n        const persona = agent.personaTemplate();\n        const systemMessageString = `You are ${persona.name().value}, a ${persona.role().value}. Your goal is: ${persona.goal().value}. Persona backstory: ${persona.backstory().value()}`;\n        const conversationMessages = this._convertActivityHistoryToLlmMessages(systemMessageString, currentActivityHistory);\n\n        this._logLlmCall(job, conversationMessages);\n\n        const agentTemperature = agent.temperature();\n        const llmGenerationResult = await this.llmAdapter.generateText(\n          conversationMessages,\n          { temperature: agentTemperature.value() },\n        );\n\n        if (llmGenerationResult.isErr()) {\n          const llmError = llmGenerationResult.error;\n          const errorMessage = `LLM generation failed in iteration ${iterations} for Job ID: ${jobId.value}. Error: ${llmError.message}`;\n          this.logger.error(errorMessage, llmError);\n          agentState = {\n            ...agentState!,\n            executionHistory: [...(agentState!.executionHistory || []), {\n              timestamp: new Date(), type: 'llm_error', name: 'LLM Generation', error: llmError.message,\n            }],\n          };\n          job.updateAgentState(agentState);\n          agentExecutorResult = this._createFinalResult(job, 'FAILURE_LLM', errorMessage);\n          criticalErrorEncounteredThisTurn = true;\n          break;\n        }\n\n        assistantMessage = llmGenerationResult.value;\n        llmResponseText = assistantMessage.content || '';\n        this.logger.info(`LLM response (iteration ${iterations}) received for Job ID: ${jobId.value}: ${llmResponseText.substring(0, 100)}...`);\n\n        const replanResult = this._attemptReplanForUnusableResponse(\n          job, assistantMessage, llmResponseText, currentActivityHistory, agentState!,\n          replanAttemptsForEmptyResponse, iterations,\n        );\n\n        if (replanResult.shouldReplan) {\n          currentActivityHistory = replanResult.updatedHistory!;\n          agentState = replanResult.updatedAgentState!;\n          replanAttemptsForEmptyResponse = replanResult.newReplanAttemptCount!;\n          job.updateAgentState(agentState);\n          continue;\n        }\n\n        const assistantHistoryEntry = ActivityHistoryEntry.create(\n          HistoryEntryRoleType.ASSISTANT, assistantMessage.content, undefined, undefined, undefined, assistantMessage.tool_calls,\n        );\n        currentActivityHistory = currentActivityHistory.addEntry(assistantHistoryEntry);\n        agentState = { ...agentState!, conversationHistory: currentActivityHistory, executionHistory: [...(agentState!.executionHistory || [])] };\n        job.updateAgentState(agentState);\n\n        newExecutionHistoryEntries = [];\n        const toolResultActivityEntries: ActivityHistoryEntry[] = [];\n\n        if (assistantMessage.tool_calls && assistantMessage.tool_calls.length > 0) {\n          this.logger.info(`LLM requested ${assistantMessage.tool_calls.length} tool calls for Job ID: ${jobId.value}`);\n          for (const toolCall of assistantMessage.tool_calls) {\n            const executionEntry = await this._processAndValidateSingleToolCall(toolCall, jobId.value, agent.id.value);\n            newExecutionHistoryEntries.push(executionEntry);\n\n            if (executionEntry.type === 'tool_error' && executionEntry.error instanceof ToolError) {\n              const toolError = executionEntry.error;\n              if (!toolError.isRecoverable) {\n                criticalErrorEncounteredThisTurn = true;\n                const failureInfo: CriticalToolFailureInfo = {\n                  toolName: toolError.toolName || executionEntry.name,\n                  errorType: toolError.name,\n                  message: toolError.message,\n                  details: toolError.originalError ? {\n                    name: (toolError.originalError as Error).name,\n                    message: (toolError.originalError as Error).message,\n                    stack: (toolError.originalError as Error).stack?.substring(0, 500),\n                  } : undefined,\n                  isRecoverable: false,\n                };\n                job.setCriticalToolFailureInfo(failureInfo);\n                job.updateLastFailureSummary(`Critical: Tool '${failureInfo.toolName}' failed non-recoverably: ${failureInfo.message}`);\n                this.logger.error(`Critical tool error for Job ID ${jobId.value}: Tool '${failureInfo.toolName}' failed non-recoverably. Details: ${JSON.stringify(failureInfo)}`, toolError);\n                break;\n              }\n            }\n            let toolResultContent: string;\n            if (executionEntry.type === 'tool_error' && executionEntry.error instanceof ToolError) {\n              toolResultContent = JSON.stringify({\n                name: executionEntry.error.name,\n                message: executionEntry.error.message,\n                toolName: executionEntry.error.toolName,\n                isRecoverable: executionEntry.error.isRecoverable,\n                originalError: executionEntry.error.originalError ? {\n                  name: (executionEntry.error.originalError as Error).name,\n                  message: (executionEntry.error.originalError as Error).message,\n                } : undefined,\n              });\n            } else if (executionEntry.type === 'tool_error') {\n              toolResultContent = JSON.stringify(executionEntry.error || { message: 'Tool execution failed without details' });\n            } else {\n              toolResultContent = JSON.stringify(executionEntry.result);\n            }\n            const toolResultActivityEntry = ActivityHistoryEntry.create(HistoryEntryRoleType.TOOL_RESULT, toolResultContent, undefined, executionEntry.name, toolCall.id);\n            toolResultActivityEntries.push(toolResultActivityEntry);\n          }\n\n          if (newExecutionHistoryEntries.length > 0) {\n            agentState = { ...agentState!, executionHistory: [...agentState!.executionHistory, ...newExecutionHistoryEntries] };\n          }\n          if (toolResultActivityEntries.length > 0) {\n            for (const entry of toolResultActivityEntries) { currentActivityHistory = currentActivityHistory.addEntry(entry); }\n            agentState = { ...agentState!, conversationHistory: currentActivityHistory };\n          }\n          job.updateAgentState(agentState);\n          if (criticalErrorEncounteredThisTurn) break;\n        }\n        if (!criticalErrorEncounteredThisTurn) {\n          goalAchieved = this._isGoalAchievedByLlmResponse(llmResponseText, assistantMessage?.tool_calls);\n        }\n        if (goalAchieved) { this.logger.info(`Goal achieved for Job ID: ${jobId.value} in iteration ${iterations}.`); break; }\n        if (iterations >= maxIterations) { this.logger.info(`Max iterations reached for Job ID: ${jobId.value}.`); }\n      }\n\n      let finalStatus: AgentExecutorStatus;\n      let finalMessage: string;\n      let finalOutput: unknown = undefined;\n      const hasToolErrorInLastProcessedBatch = newExecutionHistoryEntries.some(e => e.type === 'tool_error');\n\n      if (goalAchieved) {\n        finalStatus = 'SUCCESS';\n        finalMessage = `Goal achieved. Last LLM response: ${llmResponseText}`;\n        finalOutput = { message: llmResponseText };\n        job.updateLastFailureSummary(undefined);\n      } else if (criticalErrorEncounteredThisTurn) {\n        finalStatus = agentState?.executionHistory.some(e => e.type === 'llm_error') ? 'FAILURE_LLM' : 'FAILURE_TOOL';\n        finalMessage = job.currentData().lastFailureSummary || `Processing stopped due to a critical error after ${iterations} iterations. Last LLM response: ${llmResponseText}`;\n      } else if (iterations >= maxIterations) {\n        finalStatus = 'FAILURE_MAX_ITERATIONS';\n        finalMessage = `Max iterations (${maxIterations}) reached. Goal not achieved. Last LLM response: ${llmResponseText}`;\n        job.updateLastFailureSummary(finalMessage);\n      } else if (hasToolErrorInLastProcessedBatch) {\n        finalStatus = 'FAILURE_TOOL';\n        const lastToolError = newExecutionHistoryEntries.find(e => e.type === 'tool_error') || agentState?.executionHistory.slice().reverse().find(e => e.type === 'tool_error');\n        finalMessage = `Processing ended after ${iterations} iterations with unresolved tool errors. Last tool error: ${JSON.stringify(lastToolError?.error)}. Last LLM response: ${llmResponseText}`;\n        job.updateLastFailureSummary(finalMessage);\n      } else {\n        finalStatus = 'FAILURE_INTERNAL';\n        finalMessage = `Processing stopped after ${iterations} iterations without explicit goal or max iterations. Last LLM response: ${llmResponseText}`;\n        this.logger.warn(finalMessage, { jobId: jobId.value });\n        job.updateLastFailureSummary(finalMessage);\n      }\n      agentExecutorResult = this._createFinalResult(job, finalStatus, finalMessage, finalOutput);\n    } catch (e: unknown) {\n      const errorObject = e instanceof Error ? e : new Error(String(e));\n      const internalErrorMessage = `Unhandled error during execution of Job ID: ${jobId.value}. Error: ${errorObject.message}`;\n      this.logger.error(internalErrorMessage, errorObject, { jobId: jobId.value });\n      let currentAgentStateForError = job.currentData().agentState;\n      if (!currentAgentStateForError) { currentAgentStateForError = { conversationHistory: ActivityHistory.create([]), executionHistory: [] }; }\n      const updatedExecutionHistory = [...currentAgentStateForError.executionHistory, { timestamp: new Date(), type: 'system_error', name: 'UnhandledExecutorError', error: errorObject.message }];\n      job.updateAgentState({ ...currentAgentStateForError, executionHistory: updatedExecutionHistory });\n      agentExecutorResult = this._createFinalResult(job, 'FAILURE_INTERNAL', internalErrorMessage);\n    }\n\n    job.finalizeExecution(agentExecutorResult);\n\n    const finalSaveResult = await this.jobRepository.save(job);\n    if (finalSaveResult.isErr()) {\n      this.logger.error(`CRITICAL: Failed to save final state of Job ID: ${jobId.value}. Error: ${finalSaveResult.error.message}`, finalSaveResult.error);\n      const finalSaveError = new ApplicationError(`Failed to persist final job state for job ${jobId.value}: ${finalSaveResult.error.message}. Original status: ${agentExecutorResult.status}`, finalSaveResult.error);\n      if (agentExecutorResult.status !== 'SUCCESS') {\n        return error(finalSaveError);\n      }\n      return error(finalSaveError);\n    }\n\n    this.logger.info(`Job ID: ${jobId.value} finalized with status: ${agentExecutorResult.status} and persisted successfully.`);\n\n    if (agentExecutorResult.status !== 'SUCCESS') {\n      const executionError = new ApplicationError(`Job execution failed with status ${agentExecutorResult.status}: ${agentExecutorResult.message}`, agentExecutorResult.errors);\n      return error(executionError);\n    }\n\n    return ok(agentExecutorResult);\n  }\n\n  // Renamed private methods with underscore prefix\n  private _updateJobToActiveStatus(job: Job): Result<void, ApplicationError> {\n    if (job.moveToActive()) {\n      return ok(undefined);\n    }\n    const { id: jobId, status } = job.props;\n    this.logger.warn(`Job ID: ${jobId.value} could not be moved to ACTIVE state. Current status: ${status.value}`);\n    if (!status.is(JobStatusType.ACTIVE)) {\n      return error(new ApplicationError(`Job ${jobId.value} could not be set to ACTIVE.`));\n    }\n    return ok(undefined);\n  }\n\n  private _convertActivityHistoryToLlmMessages(systemMessageContent: string, history: ActivityHistory): LanguageModelMessage[] {\n    const messages: LanguageModelMessage[] = [{ role: 'system', content: systemMessageContent }];\n    history.entries().forEach(entry => {\n      const role = entry.role();\n      const content = entry.content();\n      if (role === HistoryEntryRoleType.USER) {\n        messages.push({ role: 'user', content });\n      } else if (role === HistoryEntryRoleType.ASSISTANT) {\n        messages.push({ role: 'assistant', content, tool_calls: entry.props.tool_calls || undefined });\n      } else if (role === HistoryEntryRoleType.TOOL_RESULT) {\n        messages.push({ role: 'tool', tool_call_id: entry.toolCallId(), content });\n      }\n    });\n    return messages;\n  }\n\n  private async _processAndValidateSingleToolCall(toolCall: LanguageModelMessageToolCall, jobIdForLogging: string, agentIdForContext: string): Promise<ExecutionHistoryEntry> {\n    const toolName = toolCall.function.name;\n    const timestamp = new Date();\n    const toolResult = await this.toolRegistryService.getTool(toolName);\n\n    if (toolResult.isErr()) {\n      const toolNotFoundError = new ToolError(`Tool '${toolName}' not found. Error: ${toolResult.error.message}`, toolName, toolResult.error, false);\n      this.logger.error(toolNotFoundError.message, toolNotFoundError, { jobId: jobIdForLogging, toolName });\n      return { timestamp, type: 'tool_error', name: toolName, error: toolNotFoundError, isCritical: true };\n    }\n    const tool = toolResult.value;\n\n    let parsedArgs: unknown;\n    try {\n      parsedArgs = JSON.parse(toolCall.function.arguments);\n    } catch (e: unknown) {\n      const parseError = e instanceof Error ? e : new Error(String(e));\n      const parsingToolError = new ToolError(`Failed to parse arguments for tool '${toolName}'. Error: ${parseError.message}`, toolName, parseError, true);\n      this.logger.error(parsingToolError.message, parsingToolError, { jobId: jobIdForLogging, toolName, args: toolCall.function.arguments });\n      return { timestamp, type: 'tool_error', name: toolName, error: parsingToolError, params: { originalArgs: toolCall.function.arguments } };\n    }\n\n    const validationResult = tool.parameters.safeParse(parsedArgs);\n    if (!validationResult.success) {\n      const validationToolError = new ToolError(`Argument validation failed for tool '${toolName}'.`, toolName, validationResult.error, true);\n      this.logger.error(validationToolError.message, validationToolError, { jobId: jobIdForLogging, toolName, issues: validationResult.error.flatten() });\n      return { timestamp, type: 'tool_error', name: toolName, error: validationToolError, params: parsedArgs, isCritical: false };\n    }\n\n    this.logger.info(`Tool call validated: ${toolName} with args: ${JSON.stringify(validationResult.data)}`, { jobId: jobIdForLogging, toolName });\n    const executionContext: IToolExecutionContext = { agentId: agentIdForContext, jobId: jobIdForLogging };\n\n    try {\n      const toolExecResult = await tool.execute(validationResult.data, executionContext);\n      if (toolExecResult.isErr()) {\n        const toolErrorFromTool = toolExecResult.error;\n        this.logger.error(`Tool '${toolName}' execution failed for Job ID: ${jobIdForLogging}. Error: ${toolErrorFromTool.message}`, toolErrorFromTool);\n        return { timestamp, type: 'tool_error', name: toolName, params: validationResult.data, error: toolErrorFromTool, isCritical: !toolErrorFromTool.isRecoverable };\n      }\n      this.logger.info(`Tool '${toolName}' executed successfully for Job ID: ${jobIdForLogging}`, { result: toolExecResult.value });\n      return { timestamp, type: 'tool_call', name: toolName, params: validationResult.data, result: toolExecResult.value };\n    } catch (e: unknown) {\n      const execError = e instanceof Error ? e : new Error(String(e));\n      const unexpectedToolError = new ToolError(`Unexpected error during tool '${toolName}' execution: ${execError.message}`, toolName, execError, false);\n      this.logger.error(unexpectedToolError.message, unexpectedToolError, { jobId: jobIdForLogging, toolName });\n      return { timestamp, type: 'tool_error', name: toolName, error: unexpectedToolError, params: validationResult.data, isCritical: true };\n    }\n  }\n\n  private _isGoalAchievedByLlmResponse(responseText: string, toolCalls?: LanguageModelMessageToolCall[]): boolean {\n    if (toolCalls && toolCalls.length > 0) return false;\n    return responseText.toLowerCase().includes('task complete');\n  }\n\n  private _logLlmCall(job: Job, messages: LanguageModelMessage[]): void {\n    const { id: jobIdVo, attemptsMade: attemptsVo } = job.props;\n    this.logger.info(`Calling LLM for Job ID: ${jobIdVo.value}. Attempt ${attemptsVo.value}`, {\n      jobId: jobIdVo.value,\n      messages: messages.map(m => ({ role: m.role, content: m.content ? m.content.substring(0, 100) + '...' : null })),\n    });\n  }\n\n  private _createFinalResult(job: Job, statusToSet: AgentExecutorStatus, finalMessage: string, outputData?: unknown): AgentExecutorResult {\n    const agentState = job.currentData().agentState || { conversationHistory: ActivityHistory.create([]), executionHistory: [] };\n    const jobIdVo = job.id();\n    const executionErrorEntries = agentState.executionHistory.filter(e => e.type.endsWith('_error'));\n    return {\n      jobId: jobIdVo.value(),\n      status: statusToSet,\n      message: finalMessage,\n      output: outputData,\n      history: agentState.conversationHistory.entries(),\n      errors: executionErrorEntries,\n    };\n  }\n\n  private _attemptReplanForUnusableResponse(\n    job: Job,\n    assistantMessage: LanguageModelMessage,\n    llmResponseText: string,\n    currentActivityHistory: ActivityHistory,\n    currentAgentState: NonNullable<Job['data']['agentState']>,\n    replanAttempts: number,\n    currentIteration: number,\n  ): {\n    shouldReplan: boolean;\n    updatedHistory?: ActivityHistory;\n    updatedAgentState?: NonNullable<Job['data']['agentState']>;\n    newReplanAttemptCount?: number;\n  } {\n    const { id: jobId } = job.props;\n    if ((!llmResponseText || llmResponseText.length < this.minUsableLlmResponseLength) && (!assistantMessage.tool_calls || assistantMessage.tool_calls.length === 0)) {\n      if (replanAttempts < this.maxReplanAttemptsForEmptyResponse) {\n        this.logger.warn(`LLM response for Job ID ${jobId.value} was empty/too short. Attempting re-plan (${replanAttempts + 1}/${this.maxReplanAttemptsForEmptyResponse})`);\n        const systemNote = ActivityHistoryEntry.create(HistoryEntryRoleType.USER, `System Note: Your previous response was empty or too short (received: \"${llmResponseText}\"). Please provide a more detailed response or use a tool.`);\n        const updatedHistory = currentActivityHistory.addEntry(systemNote);\n        const updatedAgentState = { ...currentAgentState, conversationHistory: updatedHistory, executionHistory: [...currentAgentState.executionHistory, { timestamp: new Date(), type: 'unusable_llm_response', name: 'LLM Replan Trigger', error: `Empty/short response: ${llmResponseText}` }] };\n        return { shouldReplan: true, updatedHistory, updatedAgentState, newReplanAttemptCount: replanAttempts + 1 };\n      }\n      this.logger.warn(`LLM response for Job ID ${jobId.value} was empty/too short after ${replanAttempts} re-plan attempts. Proceeding with this response.`);\n    }\n    return { shouldReplan: false, newReplanAttemptCount: replanAttempts };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/worker.service.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method '_processNextJobCycle' has too many statements (55). Maximum allowed is 25.","line":71,"column":37,"nodeType":"FunctionExpression","messageId":"exceed","endLine":154,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":110,"column":16,"nodeType":"Identifier","messageId":"tooShort","endLine":110,"endColumn":17},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":134,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":134,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/services/worker.service.ts\nimport { ILogger } from '@/core/common/services/i-logger.service';\n\nimport { IAgentRepository } from '@/domain/agent/ports/agent-repository.interface';\nimport { AgentIdVO } from '@/domain/agent/value-objects/agent-id.vo';\nimport { Job } from '@/domain/job/job.entity';\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { JobStatusVO } from '@/domain/job/value-objects/job-status.vo';\nimport { TargetAgentRoleVO } from '@/domain/job/value-objects/target-agent-role.vo';\n\nimport { IAgentExecutor } from '../ports/services/i-agent-executor.interface';\nimport { IWorkerService } from '../ports/services/i-worker.service';\n\nexport class WorkerService implements IWorkerService {\n  private targetAgentRole?: TargetAgentRoleVO;\n  private isCurrentlyRunning: boolean = false;\n  private readonly loopIntervalMs: number = 10000;\n  private continueProcessing: boolean = false;\n\n  constructor(\n    private readonly jobRepository: IJobRepository,\n    private readonly agentRepository: IAgentRepository,\n    private readonly agentExecutor: IAgentExecutor,\n    private readonly logger: ILogger,\n  ) {\n    this.logger.info('WorkerService instantiated');\n  }\n\n  public async start(role: TargetAgentRoleVO): Promise<void> {\n    if (this.isCurrentlyRunning) {\n      this.logger.warn(`WorkerService for role ${role.value} is already running.`);\n      return;\n    }\n    this.targetAgentRole = role;\n    this.isCurrentlyRunning = true;\n    this.logger.info(`WorkerService starting for role: ${this.targetAgentRole.value}`);\n    this.continueProcessing = true;\n    this._runProcessingLoop(); // Fire-and-forget\n    this.logger.info(`WorkerService for role ${this.targetAgentRole.value} started. Polling interval: ${this.loopIntervalMs}ms.`);\n  }\n\n  private async _runProcessingLoop(): Promise<void> {\n    this.logger.info(`WorkerService (role: ${this.targetAgentRole?.value}) processing loop initiated.`);\n    while (this.continueProcessing) {\n      try {\n        await this._processNextJobCycle();\n      } catch (loopError) {\n        this.logger.error(`WorkerService (role: ${this.targetAgentRole?.value}) - Unhandled error in processing loop:`, loopError);\n      }\n      if (this.continueProcessing) {\n        await new Promise(resolve => setTimeout(resolve, this.loopIntervalMs));\n      }\n    }\n    this.logger.info(`WorkerService (role: ${this.targetAgentRole?.value}) processing loop terminated.`);\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.isCurrentlyRunning) {\n      this.logger.warn(`WorkerService (role: ${this.targetAgentRole?.value || 'unassigned'}) is not running or already stopping.`);\n      return;\n    }\n    this.logger.info(`WorkerService for role ${this.targetAgentRole?.value || 'unassigned'} stopping...`);\n    this.continueProcessing = false;\n    this.isCurrentlyRunning = false;\n  }\n\n  public isRunning(): boolean {\n    return this.isCurrentlyRunning;\n  }\n\n  private async _processNextJobCycle(): Promise<void> {\n    if (!this.targetAgentRole) {\n      this.logger.error('WorkerService - _processNextJobCycle called without targetAgentRole configured.');\n      return;\n    }\n    this.logger.debug(`WorkerService (role: ${this.targetAgentRole.value}) - checking for next job.`);\n    const jobResult = await this.jobRepository.findNextProcessableByRole(this.targetAgentRole);\n\n    if (jobResult.isErr()) {\n      this.logger.error(`WorkerService (role: ${this.targetAgentRole.value}) - error fetching next job:`, jobResult.error);\n      return;\n    }\n    const job = jobResult.value;\n    if (!job) {\n      this.logger.debug(`WorkerService (role: ${this.targetAgentRole.value}) - no pending jobs found.`);\n      return;\n    }\n    this.logger.info(`WorkerService (role: ${this.targetAgentRole.value}) - found job ${job.id.value}. Attempting to retrieve agent.`);\n\n    const agentIdForRole = job.targetAgentRole().value;\n    const agentIdVO = AgentIdVO.create(agentIdForRole);\n\n    if (agentIdVO.isErr()) {\n      this.logger.error(`WorkerService (role: ${this.targetAgentRole.value}) - Invalid Agent ID derived from role for job ${job.id.value}. Error: ${agentIdVO.error.message}`);\n      return;\n    }\n    const agentResult = await this.agentRepository.findById(agentIdVO.value);\n\n    if (agentResult.isErr()) {\n      this.logger.error(`WorkerService (role: ${this.targetAgentRole.value}) - error fetching agent for job ${job.id.value}:`, agentResult.error);\n      return;\n    }\n    const agent = agentResult.value;\n    if (!agent) {\n      this.logger.warn(`WorkerService (role: ${this.targetAgentRole.value}) - no agent found for role associated with job ${job.id.value}. Marking job as failed.`);\n      job.setStatus(JobStatusVO.failed()); // Direct update for simplicity in this flow\n      job.updateLastFailureSummary(`Agent not found for role: ${job.targetAgentRole().value}`);\n      try {\n        await this.jobRepository.save(job);\n      } catch (e) { this.logger.error(`Failed to save job ${job.id.value} after agent not found.`, e); }\n      return;\n    }\n    this.logger.info(`WorkerService (role: ${this.targetAgentRole.value}) - retrieved agent ${agent.id.value} for job ${job.id.value}. Proceeding to execution.`);\n\n    try {\n      const executionResult = await this.agentExecutor.executeJob(job, agent);\n      job.setExecutionResult(executionResult.unwrapOr({\n        status: 'FAILURE_INTERNAL', message: 'AgentExecutor failed to return a standard result.', jobId: job.id.value,\n      }));\n\n      if (executionResult.isOk()) {\n        const agentResult = executionResult.value;\n        this.logger.info(`WorkerService (role: ${this.targetAgentRole.value}) - Job ${job.id.value} executed by agent. Result status: ${agentResult.status}`);\n        if (agentResult.status === 'SUCCESS') {\n          job.setStatus(JobStatusVO.completed());\n        } else {\n          this._handleJobExecutionFailure(job, agentResult.message);\n        }\n      } else {\n        const errorMessage = `AgentExecutor critical failure: ${executionResult.error.message}`;\n        this.logger.error(`WorkerService (role: ${this.targetAgentRole.value}) - AgentExecutor.executeJob failed for job ${job.id.value}:`, executionResult.error);\n        this._handleJobExecutionFailure(job, errorMessage);\n      }\n    } catch (e: unknown) {\n      const execError = e instanceof Error ? e : new Error(String(e));\n      const errorMessage = `Unhandled exception during execution: ${execError.message}`;\n      this.logger.error(`WorkerService (role: ${this.targetAgentRole.value}) - Unhandled exception during agentExecutor.executeJob for job ${job.id.value}:`, execError);\n      this._handleJobExecutionFailure(job, errorMessage);\n      job.setExecutionResult({\n        status: 'FAILURE_INTERNAL', message: `Unhandled exception: ${execError.message}`, jobId: job.id.value,\n      });\n    }\n\n    try {\n      const saveResult = await this.jobRepository.save(job);\n      if (saveResult.isErr()) {\n        this.logger.error(`WorkerService (role: ${this.targetAgentRole.value}) - Failed to save final state for job ${job.id.value}:`, saveResult.error);\n      } else {\n        this.logger.info(`WorkerService (role: ${this.targetAgentRole.value}) - Job ${job.id.value} final state (status: ${job.status().value}) saved.`);\n      }\n    } catch (saveError) {\n      this.logger.error(`WorkerService (role: ${this.targetAgentRole.value}) - Exception during final save of job ${job.id.value}:`, saveError);\n    }\n  }\n\n  private _handleJobExecutionFailure(job: Job<unknown, unknown>, failureSummary: string): void {\n    const retryPolicy = job.retryPolicy();\n    const currentAttempts = job.attempts().value();\n\n    if (retryPolicy.shouldRetry(currentAttempts)) {\n      const newAttempts = job.incrementAttempts();\n      const delayMs = retryPolicy.calculateBackoffMs(newAttempts.value());\n      const nextExecutionTime = new Date(Date.now() + delayMs);\n      job.setExecuteAfter(nextExecutionTime);\n      job.setStatus(JobStatusVO.delayed());\n      job.updateLastFailureSummary(`Job failed: ${failureSummary}. Retrying (#${newAttempts.value()}) at ${nextExecutionTime.toISOString()}.`);\n      this.logger.warn(`WorkerService (role: ${this.targetAgentRole?.value}) - Job ${job.id.value} failed. Scheduling retry ${newAttempts.value()}/${retryPolicy.maxAttempts()}. Next attempt at: ${nextExecutionTime.toISOString()}`, { jobId: job.id.value, failureSummary });\n    } else {\n      job.setStatus(JobStatusVO.failed());\n      job.updateLastFailureSummary(`Job failed permanently: ${failureSummary}. Max retries (${retryPolicy.maxAttempts()}) reached or no retry policy.`);\n      this.logger.error(`WorkerService (role: ${this.targetAgentRole?.value}) - Job ${job.id.value} failed permanently. Summary: ${failureSummary}`, { jobId: job.id.value });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/worker/dtos.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":120,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":120,"endColumn":45,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[4158,4356],"text":"type StartWorkerProcessingParams = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[4158,4356],"text":"type StartWorkerProcessingParams = unknown"},"desc":"Replace empty interface with `unknown`."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/worker/i-worker.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.use-case.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":69,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":69,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILogger } from '@/core/common/services/i-logger.service'; // Added import for ILogger\n\nimport { IAgentInternalStateRepository } from '@/domain/agent/ports/agent-internal-state-repository.interface';\nimport { AgentId } from '@/domain/agent/value-objects/agent-id.vo';\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\n// Removed unused import for Inject: import { Inject } from '@/application/common/ioc/dependency-injection.decorators'; // Assuming IoC\n\nimport {\n  LoadAgentInternalStateUseCaseInput,\n  LoadAgentInternalStateUseCaseInputSchema,\n  LoadAgentInternalStateUseCaseOutput,\n} from './load-agent-internal-state.schema';\n\nexport class LoadAgentInternalStateUseCase\n  implements\n    Executable<\n      LoadAgentInternalStateUseCaseInput,\n      LoadAgentInternalStateUseCaseOutput | null, // Output can be null if state not found\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    // @Inject(IAgentInternalStateRepositorySymbol) // Example for IoC\n    private readonly stateRepository: IAgentInternalStateRepository,\n    // @Inject(ILoggerSymbol) // Example for IoC\n    private readonly logger: ILogger,\n  ) {}\n\n  async execute(\n    input: LoadAgentInternalStateUseCaseInput,\n  ): Promise<Result<LoadAgentInternalStateUseCaseOutput | null, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = LoadAgentInternalStateUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const agentIdVo = AgentId.fromString(validInput.agentId);\n\n      const stateResult = await this.stateRepository.findByAgentId(agentIdVo);\n\n      if (stateResult.isError()) {\n        return error(new DomainError(`Failed to load internal state for agent ${validInput.agentId}: ${stateResult.value.message}`, stateResult.value));\n      }\n\n      const stateEntity = stateResult.value;\n\n      if (!stateEntity) {\n        return ok(null);\n      }\n\n      const output: LoadAgentInternalStateUseCaseOutput = {\n        agentId: stateEntity.agentId().value(),\n        currentProjectId: stateEntity.currentProjectId()?.value() || null,\n        currentGoal: stateEntity.currentGoal()?.value() || null,\n        generalNotes: stateEntity.generalNotes().list(),\n      };\n\n      return ok(output);\n    } catch (e: unknown) {\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[LoadAgentInternalStateUseCase] Unexpected error for agent ${input.agentId}: ${message}`, { error: e });\n      return error(new DomainError(`Unexpected error loading agent state: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (36). Maximum allowed is 25.","line":39,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":100,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":92,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":92,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILoggerService } from '@/core/common/services/i-logger.service';\n\nimport { AgentInternalState } from '@/domain/agent/agent-internal-state.entity';\nimport { IAgentInternalStateRepository } from '@/domain/agent/ports/agent-internal-state-repository.interface';\nimport { AgentId } from '@/domain/agent/value-objects/agent-id.vo';\nimport { CurrentGoal } from '@/domain/agent/value-objects/internal-state/current-goal.vo';\nimport { CurrentProjectId } from '@/domain/agent/value-objects/internal-state/current-project-id.vo';\nimport { GeneralNotesCollection } from '@/domain/agent/value-objects/internal-state/general-notes.collection';\nimport { DomainError, ValueError, NotFoundError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n// Removed duplicate import of DomainError, ValueError, NotFoundError\n\nimport { Result, ok, error } from '@/shared/result';\n\n\nimport {\n  SaveAgentInternalStateUseCaseInput,\n  SaveAgentInternalStateUseCaseInputSchema,\n  SaveAgentInternalStateUseCaseOutput,\n} from './save-agent-internal-state.schema';\n\nexport class SaveAgentInternalStateUseCase\n  implements\n    Executable<\n      SaveAgentInternalStateUseCaseInput,\n      SaveAgentInternalStateUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    private readonly stateRepository: IAgentInternalStateRepository,\n    private readonly logger: ILoggerService, // Added logger dependency\n  ) {}\n\n  async execute(\n    input: SaveAgentInternalStateUseCaseInput,\n  ): Promise<Result<SaveAgentInternalStateUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = SaveAgentInternalStateUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const agentIdVo = AgentId.fromString(validInput.agentId);\n\n      let stateEntity: AgentInternalState | null;\n      const existingStateResult = await this.stateRepository.findByAgentId(agentIdVo);\n\n      if (existingStateResult.isError()) {\n        return error(new DomainError(`Failed to check existing state for agent ${validInput.agentId}: ${existingStateResult.value.message}`, existingStateResult.value));\n      }\n      stateEntity = existingStateResult.value;\n\n      let isNewState = false;\n      if (!stateEntity) {\n        isNewState = true;\n        const currentProjectIdVo = validInput.currentProjectId ? CurrentProjectId.fromString(validInput.currentProjectId) : undefined;\n        const currentGoalVo = validInput.currentGoal !== null && validInput.currentGoal !== undefined ? CurrentGoal.create(validInput.currentGoal) : undefined;\n        const generalNotesVo = GeneralNotesCollection.create(validInput.generalNotes || []);\n        stateEntity = AgentInternalState.create({ agentId: agentIdVo, currentProjectId: currentProjectIdVo, currentGoal: currentGoalVo, generalNotes: generalNotesVo });\n      } else {\n        // Update existing state\n        // let updated = false; // This variable is not used, can be removed or used if logging specific changes\n        if (Object.prototype.hasOwnProperty.call(validInput, 'currentProjectId')) {\n          const newProjectIdVo = validInput.currentProjectId ? CurrentProjectId.fromString(validInput.currentProjectId) : undefined;\n          stateEntity = stateEntity.changeCurrentProject(newProjectIdVo);\n          // updated = true;\n        }\n        if (Object.prototype.hasOwnProperty.call(validInput, 'currentGoal')) {\n          const newGoalVo = validInput.currentGoal !== null && validInput.currentGoal !== undefined ? CurrentGoal.create(validInput.currentGoal) : undefined;\n          stateEntity = stateEntity.changeCurrentGoal(newGoalVo);\n          // updated = true;\n        }\n        if (Object.prototype.hasOwnProperty.call(validInput, 'generalNotes')) {\n          const newNotesVo = GeneralNotesCollection.create(validInput.generalNotes || []);\n          stateEntity = stateEntity.updateGeneralNotes(newNotesVo); // Assuming a method like updateGeneralNotes\n          // updated = true;\n        }\n      }\n\n      const saveResult = await this.stateRepository.save(stateEntity);\n      if (saveResult.isError()) {\n        return error(new DomainError(`Failed to save agent internal state (new: ${isNewState}): ${saveResult.value.message}`, saveResult.value));\n      }\n\n      return ok({ success: true });\n    } catch (e: unknown) {\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[SaveAgentInternalStateUseCase] Unexpected error for agent ${input.agentId}: ${message}`, { error: e });\n      return error(new DomainError(`Unexpected error saving agent state: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.use-case.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":80,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":80,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILoggerService } from '@/core/common/services/i-logger.service';\n\nimport { AgentPersonaTemplate } from '@/domain/agent/agent-persona-template.vo';\nimport { IAgentPersonaTemplateRepository } from '@/domain/agent/ports/agent-persona-template-repository.interface';\nimport { PersonaBackstory } from '@/domain/agent/value-objects/persona/persona-backstory.vo';\nimport { PersonaGoal } from '@/domain/agent/value-objects/persona/persona-goal.vo';\nimport { PersonaId } from '@/domain/agent/value-objects/persona/persona-id.vo';\nimport { PersonaName } from '@/domain/agent/value-objects/persona/persona-name.vo';\nimport { PersonaRole } from '@/domain/agent/value-objects/persona/persona-role.vo';\nimport { ToolNames } from '@/domain/agent/value-objects/persona/tool-names.vo';\nimport { DomainError, ValueError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n// Removed duplicate import of DomainError, ValueError\n\nimport { Result, ok, error } from '@/shared/result';\n\n\nimport {\n  CreatePersonaTemplateUseCaseInput,\n  CreatePersonaTemplateUseCaseInputSchema,\n  CreatePersonaTemplateUseCaseOutput,\n} from './create-persona-template.schema';\n\nexport class CreatePersonaTemplateUseCase\n  implements\n    Executable<\n      CreatePersonaTemplateUseCaseInput,\n      CreatePersonaTemplateUseCaseOutput,\n      DomainError | ZodError | ValueError\n    >\n{\n  constructor(\n    private readonly templateRepository: IAgentPersonaTemplateRepository,\n    private readonly logger: ILoggerService,\n  ) {}\n\n  async execute(\n    input: CreatePersonaTemplateUseCaseInput,\n  ): Promise<Result<CreatePersonaTemplateUseCaseOutput, DomainError | ZodError | ValueError>> {\n    // 1. Validate Input Schema\n    const validationResult = CreatePersonaTemplateUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      // 2. Create Value Objects\n      const nameVo = PersonaName.create(validInput.name);\n      const roleVo = PersonaRole.create(validInput.role);\n      const goalVo = PersonaGoal.create(validInput.goal);\n      const backstoryVo = PersonaBackstory.create(validInput.backstory);\n      const toolNamesVo = ToolNames.create(validInput.toolNames);\n      const personaIdVo = PersonaId.generate(); // Generate ID for the new template\n\n      // 3. Create AgentPersonaTemplate VO\n      const personaTemplate = AgentPersonaTemplate.create({\n        id: personaIdVo,\n        name: nameVo,\n        role: roleVo,\n        goal: goalVo,\n        backstory: backstoryVo,\n        toolNames: toolNamesVo,\n      });\n\n      // 4. Save Entity/VO\n      const saveResult = await this.templateRepository.save(personaTemplate);\n      if (saveResult.isError()) {\n        return error(new DomainError(`Failed to save persona template: ${saveResult.value.message}`, saveResult.value));\n      }\n\n      // 5. Return Output\n      return ok({\n        personaTemplateId: personaTemplate.id().value(),\n      });\n    } catch (e: unknown) {\n      if (e instanceof ZodError) {\n        return error(e);\n      }\n      if (e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[CreatePersonaTemplateUseCase] Unexpected error: ${message}`, { error: e });\n      return error(\n        new DomainError(\n          `An unexpected error occurred while creating the persona template: ${message}`,\n        ),\n      );\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent/create-agent.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent/create-agent.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (34). Maximum allowed is 25.","line":44,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":126,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":111,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":111,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/agent/create-agent.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILoggerService } from '@/core/common/services/i-logger.service';\n\nimport { Agent } from '@/domain/agent/agent.entity';\nimport { IAgentPersonaTemplateRepository } from '@/domain/agent/ports/agent-persona-template-repository.interface';\nimport { IAgentRepository } from '@/domain/agent/ports/agent-repository.interface';\nimport { AgentId } from '@/domain/agent/value-objects/agent-id.vo';\nimport { AgentMaxIterations } from '@/domain/agent/value-objects/agent-max-iterations.vo'; // Added import\nimport { AgentTemperature } from '@/domain/agent/value-objects/agent-temperature.vo';\nimport { PersonaId } from '@/domain/agent/value-objects/persona/persona-id.vo';\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\n// Removed duplicate import of DomainError, NotFoundError, ValueError\nimport { ILLMProviderConfigRepository } from '@/domain/llm-provider-config/ports/llm-provider-config-repository.interface';\nimport { LLMProviderConfigId } from '@/domain/llm-provider-config/value-objects/llm-provider-config-id.vo';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\n\nimport {\n  CreateAgentUseCaseInput,\n  CreateAgentUseCaseInputSchema,\n  CreateAgentUseCaseOutput,\n} from './create-agent.schema';\n\nexport class CreateAgentUseCase\n  implements\n    Executable<\n      CreateAgentUseCaseInput,\n      CreateAgentUseCaseOutput,\n      DomainError | NotFoundError | ZodError | ValueError\n    >\n{\n  constructor(\n    private readonly agentRepository: IAgentRepository,\n    private readonly personaTemplateRepository: IAgentPersonaTemplateRepository,\n    private readonly llmConfigRepository: ILLMProviderConfigRepository,\n    private readonly logger: ILoggerService,\n  ) {}\n\n  async execute(\n    input: CreateAgentUseCaseInput,\n  ): Promise<Result<CreateAgentUseCaseOutput, DomainError | NotFoundError | ZodError | ValueError>> {\n    // 1. Validate Input Schema\n    const validationResult = CreateAgentUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      // 2. Convert IDs to VOs\n      const personaTemplateIdVo = PersonaId.fromString(validInput.personaTemplateId);\n      const llmConfigIdVo = LLMProviderConfigId.fromString(validInput.llmProviderConfigId);\n\n      // 3. Fetch AgentPersonaTemplate\n      const templateResult = await this.personaTemplateRepository.findById(personaTemplateIdVo);\n      if (templateResult.isError()) {\n        return error(new DomainError(`Failed to fetch persona template: ${templateResult.value.message}`, templateResult.value));\n      }\n      const personaTemplate = templateResult.value;\n      if (!personaTemplate) {\n        return error(new NotFoundError(`AgentPersonaTemplate with ID ${validInput.personaTemplateId} not found.`));\n      }\n\n      // 4. Fetch LLMProviderConfig\n      const llmConfigResult = await this.llmConfigRepository.findById(llmConfigIdVo);\n      if (llmConfigResult.isError()) {\n        return error(new DomainError(`Failed to fetch LLM provider config: ${llmConfigResult.value.message}`, llmConfigResult.value));\n      }\n      const llmProviderConfig = llmConfigResult.value;\n      if (!llmProviderConfig) {\n        return error(new NotFoundError(`LLMProviderConfig with ID ${validInput.llmProviderConfigId} not found.`));\n      }\n\n      // 5. Create AgentTemperature VO\n      const temperatureVo = validInput.temperature !== undefined\n        ? AgentTemperature.create(validInput.temperature)\n        : AgentTemperature.default();\n\n      // 5.b Create AgentMaxIterations VO\n      const maxIterationsVo = validInput.maxIterations !== undefined\n        ? AgentMaxIterations.create(validInput.maxIterations)\n        : AgentMaxIterations.default();\n\n      // 6. Generate AgentId\n      const agentIdVo = AgentId.generate();\n\n      // 7. Create Agent Entity\n      const agentEntity = Agent.create({\n        id: agentIdVo,\n        personaTemplate, // Shorthand property\n        llmProviderConfig, // Shorthand property\n        temperature: temperatureVo,\n        maxIterations: maxIterationsVo,\n      });\n\n      // 8. Save Agent Entity\n      const saveResult = await this.agentRepository.save(agentEntity);\n      if (saveResult.isError()) {\n        return error(new DomainError(`Failed to save agent: ${saveResult.value.message}`, saveResult.value));\n      }\n\n      // 9. Return Output\n      return ok({\n        agentId: agentEntity.id().value(),\n      });\n    } catch (e: unknown) {\n      if (e instanceof ZodError) {\n        return error(e);\n      }\n      if (e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[CreateAgentUseCase] Unexpected error: ${message}`, { error: e }); // Added logger\n      return error(\n        new DomainError(\n          `An unexpected error occurred while creating the agent: ${message}`,\n        ),\n      );\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/list-annotations.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/list-annotations.use-case.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":81,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":81,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/annotation/list-annotations.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { Identity } from '@/core/common/value-objects/identity.vo';\n\nimport { Annotation } from '@/domain/annotation/annotation.entity';\nimport { IAnnotationRepository } from '@/domain/annotation/ports/annotation-repository.interface';\nimport { AnnotationSearchFilters, PaginationOptions } from '@/domain/annotation/ports/annotation-repository.types';\nimport { DomainError, ValueError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport {\n  ListAnnotationsUseCaseInput,\n  ListAnnotationsUseCaseInputSchema,\n  ListAnnotationsUseCaseOutput,\n  AnnotationListItem,\n} from './list-annotations.schema';\n\nexport class ListAnnotationsUseCase\n  implements\n    Executable<\n      ListAnnotationsUseCaseInput,\n      ListAnnotationsUseCaseOutput,\n      DomainError | ZodError | ValueError\n    >\n{\n  constructor(private annotationRepository: IAnnotationRepository) {}\n\n  async execute(\n    input: ListAnnotationsUseCaseInput,\n  ): Promise<Result<ListAnnotationsUseCaseOutput, DomainError | ZodError | ValueError>> {\n    const validationResult = ListAnnotationsUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const filters: Partial<AnnotationSearchFilters> = {};\n      if (validInput.agentId) {\n        filters.agentId = Identity.fromString(validInput.agentId);\n      }\n      if (validInput.jobId) {\n        filters.jobId = Identity.fromString(validInput.jobId);\n      }\n      // Add other filters like textContains here if implemented\n\n      const pagination: PaginationOptions = {\n        page: validInput.page,\n        pageSize: validInput.pageSize,\n      };\n\n      const searchResult = await this.annotationRepository.search(filters, pagination);\n      if (searchResult.isError()) {\n        return error(new DomainError(`Failed to list annotations: ${searchResult.value.message}`, searchResult.value));\n      }\n\n      const paginatedData = searchResult.value;\n\n      const annotationListItems: AnnotationListItem[] = paginatedData.annotations.map(\n        (annotationEntity: Annotation): AnnotationListItem => ({\n          id: annotationEntity.id().value(),\n          text: annotationEntity.text().value(),\n          agentId: annotationEntity.agentId()?.value() || null,\n          jobId: annotationEntity.jobId()?.value() || null,\n          createdAt: annotationEntity.createdAt().toISOString(),\n          updatedAt: annotationEntity.updatedAt().toISOString(),\n        }),\n      );\n\n      return ok({\n        annotations: annotationListItems,\n        totalCount: paginatedData.totalCount,\n        page: paginatedData.page,\n        pageSize: paginatedData.pageSize,\n        totalPages: paginatedData.totalPages,\n      });\n    } catch (e: unknown) { // Changed err: any to e: unknown\n      if (e instanceof ZodError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[ListAnnotationsUseCase] Unexpected error: ${message}`, { error: e }); // Added logger\n      return error(new DomainError(`Unexpected error listing annotations: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/remove-annotation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/remove-annotation.use-case.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":46,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":46,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/annotation/remove-annotation.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { IAnnotationRepository } from '@/domain/annotation/ports/annotation-repository.interface';\nimport { AnnotationId } from '@/domain/annotation/value-objects/annotation-id.vo';\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport {\n  RemoveAnnotationUseCaseInput,\n  RemoveAnnotationUseCaseInputSchema,\n  RemoveAnnotationUseCaseOutput, // Output type from schema\n} from './remove-annotation.schema';\n\nexport class RemoveAnnotationUseCase\n  implements\n    Executable<\n      RemoveAnnotationUseCaseInput,\n      RemoveAnnotationUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError // Removed NotFoundError from success type\n    >\n{\n  constructor(private annotationRepository: IAnnotationRepository) {}\n\n  async execute(\n    input: RemoveAnnotationUseCaseInput,\n  ): Promise<Result<RemoveAnnotationUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = RemoveAnnotationUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const annotationIdVo = AnnotationId.fromString(validInput.annotationId);\n\n      const deleteResult = await this.annotationRepository.delete(annotationIdVo);\n\n      if (deleteResult.isError()) {\n        return error(new DomainError(`Failed to delete annotation: ${deleteResult.value.message}`, deleteResult.value));\n      }\n      return ok({ success: true, annotationId: validInput.annotationId });\n    } catch (e: unknown) {\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[RemoveAnnotationUseCase] Unexpected error for annotation ID ${input.annotationId}: ${message}`, { error: e });\n      return error(new DomainError(`Unexpected error removing annotation: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/save-annotation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/save-annotation.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (37). Maximum allowed is 25.","line":39,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":113,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":105,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":105,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/annotation/save-annotation.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILoggerService } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo'; // For AgentId, JobId\n\n// import { IUseCase as Executable } from '@/application/common/ports/use-case.interface'; // Duplicate\nimport { Annotation } from '@/domain/annotation/annotation.entity';\nimport { IAnnotationRepository } from '@/domain/annotation/ports/annotation-repository.interface';\nimport { AnnotationId } from '@/domain/annotation/value-objects/annotation-id.vo';\nimport { AnnotationText } from '@/domain/annotation/value-objects/annotation-text.vo';\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n// Removed duplicate import of DomainError, NotFoundError, ValueError\n\nimport { Result, ok, error } from '@/shared/result';\n\n\nimport {\n  SaveAnnotationUseCaseInput,\n  SaveAnnotationUseCaseInputSchema,\n  SaveAnnotationUseCaseOutput,\n} from './save-annotation.schema';\n\nexport class SaveAnnotationUseCase\n  implements\n    Executable<\n      SaveAnnotationUseCaseInput,\n      SaveAnnotationUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    private readonly annotationRepository: IAnnotationRepository,\n    private readonly logger: ILoggerService, // Added logger\n  ) {}\n\n  async execute(\n    input: SaveAnnotationUseCaseInput,\n  ): Promise<Result<SaveAnnotationUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = SaveAnnotationUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const textVo = AnnotationText.create(validInput.text);\n      const agentIdVo = validInput.agentId ? Identity.fromString(validInput.agentId) : null;\n      const jobIdVo = validInput.jobId ? Identity.fromString(validInput.jobId) : null;\n\n      let annotationEntity: Annotation;\n      // let updated = false; // This variable is unused\n\n      if (validInput.id) {\n        const annotationIdVo = AnnotationId.fromString(validInput.id);\n        const existingResult = await this.annotationRepository.findById(annotationIdVo);\n        if (existingResult.isError()) {\n          return error(new DomainError(`Failed to fetch annotation for update: ${existingResult.value.message}`, existingResult.value));\n        }\n        const existingAnnotation = existingResult.value;\n        if (!existingAnnotation) {\n          return error(new NotFoundError(`Annotation with ID ${validInput.id} not found for update.`));\n        }\n        annotationEntity = existingAnnotation;\n\n        if (!annotationEntity.text().equals(textVo)) {\n          annotationEntity = annotationEntity.updateText(textVo);\n          // updated = true;\n        }\n        if (Object.prototype.hasOwnProperty.call(validInput, 'agentId')) {\n          if (!annotationEntity.agentId()?.equals(agentIdVo) && (annotationEntity.agentId() || agentIdVo)) {\n            annotationEntity = annotationEntity.assignAgent(agentIdVo);\n            // updated = true;\n          }\n        }\n        if (Object.prototype.hasOwnProperty.call(validInput, 'jobId')) {\n          if (!annotationEntity.jobId()?.equals(jobIdVo) && (annotationEntity.jobId() || jobIdVo)) {\n            annotationEntity = annotationEntity.assignJob(jobIdVo);\n            // updated = true;\n          }\n        }\n      } else {\n        const newAnnotationId = AnnotationId.generate();\n        annotationEntity = Annotation.create({\n          id: newAnnotationId,\n          text: textVo,\n          agentId: agentIdVo,\n          jobId: jobIdVo,\n        });\n        // updated = true; // It's a new entity, so it's \"updated\" from non-existence\n      }\n\n      const saveResult = await this.annotationRepository.save(annotationEntity);\n      if (saveResult.isError()) {\n        return error(new DomainError(`Failed to save annotation: ${saveResult.value.message}`, saveResult.value));\n      }\n\n      return ok({\n        annotationId: annotationEntity.id().value(),\n        createdAt: annotationEntity.createdAt().toISOString(),\n        updatedAt: annotationEntity.updatedAt().toISOString(),\n      });\n    } catch (e: unknown) {\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[SaveAnnotationUseCase] Unexpected error: ${message}`, { error: e });\n      return error(new DomainError(`Unexpected error saving annotation: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/cancel-job.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/cancel-job.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (26). Maximum allowed is 25.","line":37,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":93,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":85,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":85,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/job/cancel-job.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILogger } from '@/core/common/services/i-logger.service'; // Added ILogger\nimport { IJobQueue } from '@/core/ports/adapters/job-queue.interface';\n\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { JobIdVO } from '@/domain/job/value-objects/job-id.vo';\n\n// import { JobStatusEnum } from '@/domain/job/value-objects/job-status.vo'; // Not directly used, but good for context\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\n\nimport {\n  CancelJobUseCaseInput,\n  CancelJobUseCaseInputSchema,\n  CancelJobUseCaseOutput, // Use the corrected type name\n} from './cancel-job.schema';\n\nexport class CancelJobUseCase\n  implements\n    IUseCase<\n      CancelJobUseCaseInput,\n      CancelJobUseCaseOutput, // Use the corrected type name\n      DomainError | ZodError | NotFoundError | ValueError\n    >\n{\n  constructor(\n    private readonly jobRepository: IJobRepository,\n    private readonly jobQueue: IJobQueue,\n    private readonly logger: ILogger, // Added logger\n  ) {}\n\n  async execute(\n    input: CancelJobUseCaseInput,\n  ): Promise<Result<CancelJobUseCaseOutput, DomainError | ZodError | NotFoundError | ValueError>> {\n    const validationResult = CancelJobUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const jobIdVo = JobIdVO.fromString(validInput.jobId); // Use JobIdVO\n\n      const jobResult = await this.jobRepository.findById(jobIdVo);\n      if (jobResult.isError()) {\n        return error(new DomainError(`Failed to fetch job for cancellation: ${jobResult.value.message}`, jobResult.value));\n      }\n      const jobEntity = jobResult.value;\n\n      if (!jobEntity) {\n        return error(new NotFoundError(`Job with ID ${validInput.jobId} not found for cancellation.`));\n      }\n\n      const originalStatus = jobEntity.status().value();\n      const wasCancelled = jobEntity.moveToCancelled(validInput.reason);\n\n      if (!wasCancelled) {\n        return ok({\n          success: false,\n          jobId: jobEntity.id().value(),\n          finalStatus: originalStatus,\n          message: `Job ${jobEntity.id().value()} was already in a terminal state (${originalStatus}) or could not be cancelled.`,\n        });\n      }\n\n      const saveResult = await this.jobRepository.save(jobEntity);\n      if (saveResult.isError()) {\n        return error(new DomainError(`Failed to save cancelled job status: ${saveResult.value.message}`, saveResult.value));\n      }\n\n      // TODO: Interact with IJobQueue if needed (e.g., this.jobQueue.remove(jobIdVo))\n      this.logger.info(`Job ${jobIdVo.value} cancelled successfully. Reason: ${validInput.reason || 'No reason provided'}.`);\n\n\n      return ok({\n        success: true,\n        jobId: jobEntity.id().value(),\n        finalStatus: jobEntity.status().value(),\n      });\n    } catch (e: unknown) { // Changed err: any to e: unknown\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[CancelJobUseCase] Unexpected error for job ID ${input.jobId}: ${message}`, { error: e });\n      return error(new DomainError(`Unexpected error cancelling job: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/create-job.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/create-job.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (32). Maximum allowed is 25.","line":50,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":127,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":112,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":112,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/job/create-job.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILogger } from '@/core/common/services/i-logger.service'; // Added ILogger\nimport { IJobQueue } from '@/core/ports/adapters/job-queue.interface';\n\nimport { DomainError, ValueError } from '@/domain/common/errors';\nimport { Job } from '@/domain/job/job.entity';\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { AttemptCountVO } from '@/domain/job/value-objects/attempt-count.vo'; // Corrected: MaxAttempts to AttemptCountVO\nimport { JobDependsOnVO } from '@/domain/job/value-objects/job-depends-on.vo'; // Corrected: JobDependsOn to JobDependsOnVO\nimport { JobIdVO } from '@/domain/job/value-objects/job-id.vo'; // Corrected: JobId to JobIdVO\nimport { JobNameVO } from '@/domain/job/value-objects/job-name.vo'; // Corrected: JobName to JobNameVO\nimport { JobPriorityVO } from '@/domain/job/value-objects/job-priority.vo'; // Corrected: JobPriority to JobPriorityVO\nimport {\n  BackoffTypeEnum, // Corrected: BackoffType to BackoffTypeEnum\n  NoRetryPolicyVO, // Corrected: NoRetryPolicy to NoRetryPolicyVO\n  // RetryDelayVO, // Corrected: RetryDelay to RetryDelayVO - Not directly used, part of RetryPolicyVO logic\n  RetryPolicyVO, // Corrected: RetryPolicy to RetryPolicyVO\n} from '@/domain/job/value-objects/retry-policy.vo';\n// import { JobStatusEnum } from '@/domain/job/value-objects/job-status.vo'; // Corrected: JobStatusType to JobStatusEnum - Not directly used\n// import { JobTimestampVO } from '@/domain/job/value-objects/job-timestamp.vo'; // Corrected: JobTimestamp to JobTimestampVO - Not directly used\nimport { TargetAgentRoleVO } from '@/domain/job/value-objects/target-agent-role.vo'; // Corrected: TargetAgentRole to TargetAgentRoleVO\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\n\nimport {\n  CreateJobUseCaseInput,\n  CreateJobUseCaseInputSchema,\n  CreateJobUseCaseOutput,\n} from './create-job.schema';\n\nexport class CreateJobUseCase\n  implements\n    IUseCase<\n      CreateJobUseCaseInput,\n      CreateJobUseCaseOutput,\n      DomainError | ZodError | ValueError\n    >\n{\n  constructor(\n    private readonly jobRepository: IJobRepository,\n    private readonly jobQueue: IJobQueue,\n    private readonly logger: ILogger, // Added logger\n  ) {}\n\n  async execute(\n    input: CreateJobUseCaseInput,\n  ): Promise<Result<CreateJobUseCaseOutput, DomainError | ZodError | ValueError>> {\n    const validationResult = CreateJobUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const nameVo = JobNameVO.create(validInput.name); // Use JobNameVO\n      const targetAgentRoleVo = validInput.targetAgentRole\n        ? TargetAgentRoleVO.create(validInput.targetAgentRole) // Use TargetAgentRoleVO\n        : undefined;\n\n      const priorityVo = validInput.priority !== undefined\n        ? JobPriorityVO.create(validInput.priority) // Use JobPriorityVO\n        : JobPriorityVO.default();\n\n      const dependsOnJobIdsVo = validInput.dependsOnJobIds\n        ? JobDependsOnVO.create(validInput.dependsOnJobIds.map(id => JobIdVO.fromString(id))) // Use JobDependsOnVO, JobIdVO\n        : JobDependsOnVO.create([]);\n\n      let retryPolicyVo: RetryPolicyVO | NoRetryPolicyVO; // Corrected type\n      if (!validInput.retryPolicy || validInput.retryPolicy.maxAttempts === undefined || validInput.retryPolicy.maxAttempts <= 1) {\n        retryPolicyVo = NoRetryPolicyVO.create(); // Use NoRetryPolicyVO\n      } else {\n        const maxAttemptsVo = AttemptCountVO.create(validInput.retryPolicy.maxAttempts); // Use AttemptCountVO\n        const initialDelayMs = (validInput.retryPolicy.initialDelaySeconds || 0) * 1000;\n        const backoffType = validInput.retryPolicy.backoffType || BackoffTypeEnum.FIXED; // Use BackoffTypeEnum\n        const maxDelayMs = validInput.retryPolicy.maxDelaySeconds !== undefined\n          ? validInput.retryPolicy.maxDelaySeconds * 1000\n          : undefined;\n\n        retryPolicyVo = RetryPolicyVO.create({ // Use RetryPolicyVO\n          maxAttempts: maxAttemptsVo,\n          backoffType, // Use corrected enum\n          initialDelayMs,\n          maxDelayMs,\n        });\n      }\n\n      const jobEntity = Job.create({\n        name: nameVo,\n        payload: validInput.payload || {},\n        targetAgentRole: targetAgentRoleVo,\n        priority: priorityVo,\n        dependsOn: dependsOnJobIdsVo,\n        retryPolicy: retryPolicyVo,\n      });\n\n      const saveResult = await this.jobRepository.save(jobEntity);\n      if (saveResult.isError()) {\n        return error(new DomainError(`Failed to save job: ${saveResult.value.message}`, saveResult.value));\n      }\n\n      const enqueueResult = await this.jobQueue.add(jobEntity);\n      if (enqueueResult.isError()) {\n        return error(new DomainError(`Failed to enqueue job after saving: ${enqueueResult.value.message}`, enqueueResult.value));\n      }\n\n      return ok({ jobId: jobEntity.id().value() });\n    } catch (e: unknown) { // Changed err: any to e: unknown\n      if (e instanceof ZodError) {\n        return error(e);\n      }\n      if (e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[CreateJobUseCase] Unexpected error: ${message}`, { error: e }); // Added logger\n      return error(\n        new DomainError(\n          `An unexpected error occurred while preparing the job: ${message}`,\n        ),\n      );\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/list-jobs.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/list-jobs.use-case.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":87,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":87,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/job/list-jobs.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILogger } from '@/core/common/services/i-logger.service'; // Added ILogger\n\nimport { DomainError, ValueError } from '@/domain/common/errors';\nimport { Job } from '@/domain/job/job.entity';\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { JobSearchFilters, PaginationOptions } from '@/domain/job/ports/job-repository.types';\nimport { TargetAgentRoleVO } from '@/domain/job/value-objects/target-agent-role.vo'; // Corrected: TargetAgentRole to TargetAgentRoleVO\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport {\n  ListJobsUseCaseInput,\n  ListJobsUseCaseInputSchema,\n  ListJobsUseCaseOutput,\n  JobListItem,\n} from './list-jobs.schema';\n\nexport class ListJobsUseCase\n  implements\n    IUseCase<\n      ListJobsUseCaseInput,\n      ListJobsUseCaseOutput,\n      DomainError | ZodError | ValueError\n    >\n{\n  constructor(\n    private readonly jobRepository: IJobRepository,\n    private readonly logger: ILogger, // Added logger\n  ) {}\n\n  async execute(\n    input: ListJobsUseCaseInput,\n  ): Promise<Result<ListJobsUseCaseOutput, DomainError | ZodError | ValueError>> {\n    const validationResult = ListJobsUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const filters: Partial<JobSearchFilters> = {};\n      if (validInput.status && validInput.status.length > 0) {\n        filters.status = validInput.status;\n      }\n      if (validInput.targetAgentRole) {\n        filters.targetAgentRole = TargetAgentRoleVO.create(validInput.targetAgentRole); // Use TargetAgentRoleVO\n      }\n      if (validInput.nameContains) {\n        filters.nameContains = validInput.nameContains;\n      }\n\n      const pagination: PaginationOptions = {\n        page: validInput.page,\n        pageSize: validInput.pageSize,\n      };\n\n      const searchResult = await this.jobRepository.search(filters, pagination);\n      if (searchResult.isError()) {\n        return error(new DomainError(`Failed to list jobs: ${searchResult.value.message}`, searchResult.value));\n      }\n\n      const paginatedData = searchResult.value;\n\n      const jobListItems: JobListItem[] = paginatedData.jobs.map((jobEntity: Job<unknown, unknown>) => ({ // Specify Job generic type\n        id: jobEntity.id().value(),\n        name: jobEntity.name().value(),\n        status: jobEntity.status().value(),\n        targetAgentRole: jobEntity.targetAgentRole()?.value() || null,\n        priority: jobEntity.priority().value(),\n        createdAt: jobEntity.createdAt().toISOString(),\n        updatedAt: jobEntity.updatedAt().toISOString(),\n        executeAfter: jobEntity.executeAfter()?.toISOString() || null,\n      }));\n\n      return ok({\n        jobs: jobListItems,\n        totalCount: paginatedData.totalCount,\n        page: paginatedData.page,\n        pageSize: paginatedData.pageSize,\n        totalPages: paginatedData.totalPages,\n      });\n    } catch (e: unknown) { // Changed err: any to e: unknown\n      if (e instanceof ZodError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[ListJobsUseCase] Unexpected error: ${message}`, { error: e }); // Added logger\n      return error(new DomainError(`Unexpected error listing jobs: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/retry-job.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/retry-job.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (30). Maximum allowed is 25.","line":38,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":107,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":99,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":99,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/job/retry-job.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILogger } from '@/core/common/services/i-logger.service'; // Added ILogger\nimport { IJobQueue } from '@/core/ports/adapters/job-queue.interface';\n\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\n// import { Job } from '@/domain/job/job.entity'; // Not directly used\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { JobIdVO } from '@/domain/job/value-objects/job-id.vo';\nimport { JobStatusEnum } from '@/domain/job/value-objects/job-status.vo';\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\n\nimport {\n  RetryJobUseCaseInput,\n  RetryJobUseCaseInputSchema,\n  RetryJobUseCaseOutput,\n} from './retry-job.schema';\n\nexport class RetryJobUseCase\n  implements\n    IUseCase<\n      RetryJobUseCaseInput,\n      RetryJobUseCaseOutput,\n      DomainError | ZodError | NotFoundError | ValueError\n    >\n{\n  constructor(\n    private readonly jobRepository: IJobRepository,\n    private readonly jobQueue: IJobQueue,\n    private readonly logger: ILogger, // Added logger\n  ) {}\n\n  async execute(\n    input: RetryJobUseCaseInput,\n  ): Promise<Result<RetryJobUseCaseOutput, DomainError | ZodError | NotFoundError | ValueError>> {\n    const validationResult = RetryJobUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const jobIdVo = JobIdVO.fromString(validInput.jobId); // Use JobIdVO\n\n      const jobResult = await this.jobRepository.findById(jobIdVo);\n      if (jobResult.isError()) {\n        return error(new DomainError(`Failed to fetch job for retry: ${jobResult.value.message}`, jobResult.value));\n      }\n      const jobEntity = jobResult.value; // jobEntity is now correctly typed Job<unknown, unknown> | null\n\n      if (!jobEntity) {\n        return error(new NotFoundError(`Job with ID ${validInput.jobId} not found for retry.`));\n      }\n\n      if (!jobEntity.status().is(JobStatusEnum.FAILED) && !jobEntity.status().is(JobStatusEnum.ACTIVE)) { // Use JobStatusEnum\n        return ok({\n          success: false,\n          jobId: jobEntity.id().value(),\n          newStatus: jobEntity.status().value(),\n          executeAfter: jobEntity.executeAfter()?.toISOString() || null,\n          message: `Job is not in a FAILED or ACTIVE state. Current status: ${jobEntity.status().value()}.`,\n        });\n      }\n\n      if (!jobEntity.canRetry()) {\n        return ok({\n          success: false,\n          jobId: jobEntity.id().value(),\n          newStatus: jobEntity.status().value(),\n          executeAfter: jobEntity.executeAfter()?.toISOString() || null,\n          message: `Job has reached maximum retry attempts (${jobEntity.maxAttempts().value}).`,\n        });\n      }\n\n      const retriedJobEntity = jobEntity.prepareForNextAttempt();\n      const saveResult = await this.jobRepository.save(retriedJobEntity);\n      if (saveResult.isError()) {\n        return error(new DomainError(`Failed to save job state for retry: ${saveResult.value.message}`, saveResult.value));\n      }\n\n      if (retriedJobEntity.isProcessableNow() || retriedJobEntity.status().is(JobStatusEnum.DELAYED)) { // Use JobStatusEnum\n        const enqueueResult = await this.jobQueue.add(retriedJobEntity);\n        if (enqueueResult.isError()) {\n          return error(new DomainError(`Failed to re-enqueue job after preparing for retry: ${enqueueResult.value.message}`, enqueueResult.value));\n        }\n      }\n\n      return ok({\n        success: true,\n        jobId: retriedJobEntity.id().value(),\n        newStatus: retriedJobEntity.status().value(),\n        executeAfter: retriedJobEntity.executeAfter()?.toISOString() || null,\n      });\n    } catch (e: unknown) { // Changed err: any to e: unknown\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[RetryJobUseCase] Unexpected error for job ID ${input.jobId}: ${message}`, { error: e }); // Added logger\n      return error(new DomainError(`Unexpected error retrying job: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/update-job.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/job/update-job.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Job' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":13},{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (50). Maximum allowed is 25.","line":39,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":131,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":123,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":123,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/job/update-job.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILogger } from '@/core/common/services/i-logger.service'; // Added ILogger\n\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\nimport { Job } from '@/domain/job/job.entity'; // Keep Job as it's used\nimport { IJobRepository } from '@/domain/job/ports/job-repository.interface';\nimport { AttemptCountVO } from '@/domain/job/value-objects/attempt-count.vo';\nimport { JobIdVO } from '@/domain/job/value-objects/job-id.vo';\nimport { JobNameVO } from '@/domain/job/value-objects/job-name.vo';\nimport { JobPriorityVO } from '@/domain/job/value-objects/job-priority.vo';\nimport { BackoffTypeEnum, NoRetryPolicyVO, RetryPolicyVO } from '@/domain/job/value-objects/retry-policy.vo';\nimport { TargetAgentRoleVO } from '@/domain/job/value-objects/target-agent-role.vo';\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport {\n  UpdateJobUseCaseInput,\n  UpdateJobUseCaseInputSchema,\n  UpdateJobUseCaseOutput,\n} from './update-job.schema';\n\nexport class UpdateJobUseCase\n  implements\n    IUseCase<\n      UpdateJobUseCaseInput,\n      UpdateJobUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    private readonly jobRepository: IJobRepository,\n    private readonly logger: ILogger, // Added logger\n  ) {}\n\n  async execute(\n    input: UpdateJobUseCaseInput,\n  ): Promise<Result<UpdateJobUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = UpdateJobUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const jobIdVo = JobIdVO.fromString(validInput.jobId); // Use JobIdVO\n\n      const jobResult = await this.jobRepository.findById(jobIdVo);\n      if (jobResult.isError()) {\n        return error(new DomainError(`Failed to fetch job for update: ${jobResult.value.message}`, jobResult.value));\n      }\n      let jobEntity = jobResult.value;\n      if (!jobEntity) {\n        return error(new NotFoundError(`Job with ID ${validInput.jobId} not found for update.`));\n      }\n\n      let updated = false;\n\n      if (validInput.name !== undefined) {\n        const newNameVo = JobNameVO.create(validInput.name); // Use JobNameVO\n        if (!jobEntity.name().equals(newNameVo)) {\n          jobEntity = jobEntity.changeName(newNameVo);\n          updated = true;\n        }\n      }\n\n      if (Object.prototype.hasOwnProperty.call(validInput, 'payload')) { // Check if payload was explicitly passed (even if null)\n        jobEntity = jobEntity.updatePayload(validInput.payload); // updatePayload should handle null correctly\n        updated = true;\n      }\n\n      if (validInput.priority !== undefined) {\n        const newPriorityVo = JobPriorityVO.create(validInput.priority); // Use JobPriorityVO\n        if (!jobEntity.priority().equals(newPriorityVo)) {\n          jobEntity = jobEntity.changePriority(newPriorityVo);\n          updated = true;\n        }\n      }\n\n      if (validInput.targetAgentRole !== undefined) {\n        const newRoleVo = validInput.targetAgentRole\n            ? TargetAgentRoleVO.create(validInput.targetAgentRole) // Use TargetAgentRoleVO\n            : undefined;\n        if (!jobEntity.targetAgentRole()?.equals(newRoleVo) && (jobEntity.targetAgentRole() || newRoleVo)) {\n            jobEntity = jobEntity.changeTargetAgentRole(newRoleVo);\n            updated = true;\n        }\n      }\n\n      if (validInput.retryPolicy !== undefined) {\n        let newRetryPolicyVo: RetryPolicyVO | NoRetryPolicyVO; // Corrected type\n        if (validInput.retryPolicy.maxAttempts === undefined || validInput.retryPolicy.maxAttempts <= 1) {\n          newRetryPolicyVo = NoRetryPolicyVO.create(); // Use NoRetryPolicyVO\n        } else {\n          newRetryPolicyVo = RetryPolicyVO.create({ // Use RetryPolicyVO\n            maxAttempts: AttemptCountVO.create(validInput.retryPolicy.maxAttempts), // Use AttemptCountVO\n            initialDelayMs: (validInput.retryPolicy.initialDelaySeconds || 0) * 1000,\n            backoffType: validInput.retryPolicy.backoffType || BackoffTypeEnum.FIXED, // Use BackoffTypeEnum\n            maxDelayMs: validInput.retryPolicy.maxDelaySeconds !== undefined\n              ? validInput.retryPolicy.maxDelaySeconds * 1000\n              : undefined,\n          });\n        }\n        if (!jobEntity.retryPolicy().equals(newRetryPolicyVo)) {\n            jobEntity = jobEntity.updateRetryPolicy(newRetryPolicyVo);\n            updated = true;\n        }\n      }\n\n      if (updated) {\n        const saveResult = await this.jobRepository.save(jobEntity);\n        if (saveResult.isError()) {\n          return error(new DomainError(`Failed to save updated job: ${saveResult.value.message}`, saveResult.value));\n        }\n      } else {\n        return ok({ jobId: jobEntity.id().value(), updatedAt: jobEntity.updatedAt().toISOString() });\n      }\n\n      return ok({ jobId: jobEntity.id().value(), updatedAt: jobEntity.updatedAt().toISOString() });\n    } catch (e: unknown) { // Changed err: any to e: unknown\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[UpdateJobUseCase] Unexpected error for job ID ${input.jobId}: ${message}`, { error: e }); // Added logger\n      return error(new DomainError(`Unexpected error updating job: ${message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3637,3640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3637,3640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.use-case.ts\nimport { ZodError } from 'zod';\n\n\nimport { DomainError, ValueError } from '@/domain/common/errors'; // ValueError for VO creation issues\nimport {\n  LLMProviderConfig,\n  BaseUrl // BaseUrl is defined within llm-provider-config.entity.ts\n} from '@/domain/llm-provider-config/llm-provider-config.entity';\nimport { ILLMProviderConfigRepository } from '@/domain/llm-provider-config/ports/llm-provider-config-repository.interface';\nimport { LLMApiKey } from '@/domain/llm-provider-config/value-objects/llm-api-key.vo';\nimport { LLMProviderConfigId } from '@/domain/llm-provider-config/value-objects/llm-provider-config-id.vo';\nimport { LLMProviderConfigName } from '@/domain/llm-provider-config/value-objects/llm-provider-config-name.vo';\nimport { LLMProviderId } from '@/domain/llm-provider-config/value-objects/llm-provider-id.vo';\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface'; // Standardized to IUseCase\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport {\n  CreateLLMProviderConfigUseCaseInput,\n  CreateLLMProviderConfigUseCaseInputSchema,\n  CreateLLMProviderConfigUseCaseOutput,\n} from './create-llm-provider-config.schema';\n\n\nexport class CreateLLMProviderConfigUseCase\n  implements\n    IUseCase< // Changed Executable to IUseCase\n      CreateLLMProviderConfigUseCaseInput,\n      CreateLLMProviderConfigUseCaseOutput,\n      DomainError | ZodError | ValueError\n    >\n{\n  private llmProviderConfigRepository: ILLMProviderConfigRepository;\n\n  constructor(llmProviderConfigRepository: ILLMProviderConfigRepository) {\n    this.llmProviderConfigRepository = llmProviderConfigRepository;\n  }\n\n  async execute(\n    input: CreateLLMProviderConfigUseCaseInput,\n  ): Promise<Result<CreateLLMProviderConfigUseCaseOutput, DomainError | ZodError | ValueError>> {\n    // 1. Validate Input Schema\n    const validationResult = CreateLLMProviderConfigUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      // 2. Create Value Objects\n      const nameVo = LLMProviderConfigName.create(validInput.name);\n      const providerIdVo = LLMProviderId.create(validInput.providerId);\n      const apiKeyVo = LLMApiKey.create(validInput.apiKey);\n\n      let baseUrlVo: BaseUrl | undefined = undefined;\n      if (validInput.baseUrl !== null && validInput.baseUrl !== undefined) {\n        baseUrlVo = BaseUrl.create(validInput.baseUrl);\n      }\n\n      // 3. Create Entity\n      const newConfigId = LLMProviderConfigId.generate();\n      const llmConfigEntity = LLMProviderConfig.create({\n        id: newConfigId,\n        name: nameVo,\n        providerId: providerIdVo,\n        apiKey: apiKeyVo,\n        baseUrl: baseUrlVo,\n      });\n\n      // 4. Save Entity\n      const saveResult = await this.llmProviderConfigRepository.save(llmConfigEntity);\n      if (saveResult.isError()) {\n        // Assuming repository save method returns Result<void, DomainError>\n        // or Result<LLMProviderConfig, DomainError>\n        // For now, let's assume it's void for save.\n        return error(new DomainError(`Failed to save LLM provider configuration: ${saveResult.value.message}`, saveResult.value));\n      }\n\n      // If save returns the entity, can use:\n      // if (saveResult.isError()) return error(saveResult.value);\n      // const savedEntity = saveResult.value;\n\n      // 5. Return Output\n      return ok({\n        llmProviderConfigId: llmConfigEntity.id().value(),\n      });\n\n    } catch (err: any) {\n      if (err instanceof ZodError) { // Should be caught by safeParse, but as a safeguard\n        return error(err);\n      }\n      if (err instanceof DomainError || err instanceof ValueError) { // Catch errors from VO creation\n        return error(err);\n      }\n      console.error('[CreateLLMProviderConfigUseCase] Unexpected error:', err);\n      return error(\n        new DomainError(\n          `An unexpected error occurred while creating the LLM provider configuration: ${err.message || err}`,\n        ),\n      );\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/remove-memory-item.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/remove-memory-item.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NotFoundError' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":54},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":51,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":51,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/memory/remove-memory-item.use-case.ts\nimport { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n\n\nimport { ILoggerService, ILoggerServiceToken } from '@/core/common/services/i-logger.service';\n\nimport { IMemoryRepository, IMemoryRepositoryToken } from '@/domain/memory/ports/memory-repository.interface';\nimport { MemoryItemId } from '@/domain/memory/value-objects/memory-item-id.vo';\n\nimport { ApplicationError, DomainError, NotFoundError, ValueError } from '@/application/common/errors'; // Or @/domain/common/errors\nimport { IUseCase } from '@/application/common/ports/use-case.interface'; // Standardized to IUseCase\n\nimport { Result, ok, error as resultError, isSuccess } from '@/shared/result';\n\nimport {\n  RemoveMemoryItemUseCaseInput,\n  RemoveMemoryItemUseCaseInputSchema,\n  RemoveMemoryItemUseCaseOutput,\n} from './remove-memory-item.schema';\n\n@injectable()\nexport class RemoveMemoryItemUseCase\n  implements\n    IUseCase< // Changed Executable to IUseCase\n      RemoveMemoryItemUseCaseInput,\n      RemoveMemoryItemUseCaseOutput,\n      ApplicationError | ZodError\n    >\n{\n  constructor(\n    @inject(IMemoryRepositoryToken) private readonly memoryRepository: IMemoryRepository,\n    @inject(ILoggerServiceToken) private readonly logger: ILoggerService,\n  ) {}\n\n  public async execute(\n    input: RemoveMemoryItemUseCaseInput,\n  ): Promise<Result<RemoveMemoryItemUseCaseOutput, ApplicationError | ZodError>> {\n    this.logger.debug('RemoveMemoryItemUseCase: Starting execution with input:', input);\n\n    const validationResult = RemoveMemoryItemUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      this.logger.warn('RemoveMemoryItemUseCase: Input validation failed.', validationResult.error);\n      return resultError(validationResult.error); // ZodError\n    }\n    const validatedInput = validationResult.data;\n\n    let itemIdVo: MemoryItemId;\n    try {\n      itemIdVo = MemoryItemId.fromString(validatedInput.memoryItemId);\n    } catch (e) {\n      if (e instanceof ValueError) {\n        this.logger.warn(`RemoveMemoryItemUseCase: Invalid MemoryItemId format - ${e.message}`, e);\n        return resultError(new ApplicationError(`Invalid memory item ID format: ${e.message}`, e));\n      }\n      this.logger.error('RemoveMemoryItemUseCase: Unexpected error creating MemoryItemId VO.', e);\n      const errorMessage = e instanceof Error ? e.message : String(e);\n      return resultError(new ApplicationError(`Unexpected error with memory item ID: ${errorMessage}`, e as Error));\n    }\n\n    // Optional: Check if item exists first if specific \"Not Found\" behavior is critical for the output's 'success' field\n    // For now, we'll assume delete is idempotent and success means the operation was attempted without repository failure.\n    // const findResult = await this.memoryRepository.findById(itemIdVo);\n    // if (isSuccess(findResult) && findResult.value === null) {\n    //   this.logger.info(`RemoveMemoryItemUseCase: Memory item ${validatedInput.memoryItemId} not found. No action needed.`);\n    //   return ok({ memoryItemId: validatedInput.memoryItemId, success: true }); // Or false if \"not found\" should mean not successful\n    // }\n    // if (isError(findResult)) {\n    //    this.logger.error(`RemoveMemoryItemUseCase: Error finding item ${validatedInput.memoryItemId} before delete.`, findResult.error);\n    //    // Proceed to delete anyway, or return error based on policy\n    // }\n\n\n    const deleteResult = await this.memoryRepository.delete(itemIdVo);\n\n    if (!isSuccess(deleteResult)) {\n      this.logger.error(\n        `RemoveMemoryItemUseCase: Repository failed to delete memory item ${validatedInput.memoryItemId}.`,\n        deleteResult.error,\n      );\n      // Ensure we return an ApplicationError wrapping the DomainError\n      const appError = deleteResult.error instanceof ApplicationError\n        ? deleteResult.error\n        : new ApplicationError(\n            `Failed to delete memory item: ${deleteResult.error.message}`,\n            deleteResult.error, // Original error as cause\n          );\n      return resultError(appError);\n    }\n\n    this.logger.info(`RemoveMemoryItemUseCase: Memory item ${validatedInput.memoryItemId} processed for deletion.`);\n    return ok({\n      memoryItemId: validatedInput.memoryItemId,\n      success: true, // True if repository.delete() did not return an error\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/save-memory-item.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/save-memory-item.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (51). Maximum allowed is 25.","line":44,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":157,"endColumn":4},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":94,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":94,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[4452,4478],"text":"Object.prototype.hasOwnProperty.call(validInput, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":100,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":100,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[4735,4761],"text":"Object.prototype.hasOwnProperty.call(validInput, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":106,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":106,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[4960,4986],"text":"Object.prototype.hasOwnProperty.call(validInput, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":112,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":112,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[5193,5219],"text":"Object.prototype.hasOwnProperty.call(validInput, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":115,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6764,6767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6764,6767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/memory/save-memory-item.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { Identity } from '@/core/common/value-objects/identity.vo'; // For AgentId\n\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository } from '@/domain/memory/ports/memory-repository.interface';\nimport { MemoryItemContent } from '@/domain/memory/value-objects/memory-item-content.vo';\nimport { MemoryItemEmbedding } from '@/domain/memory/value-objects/memory-item-embedding.vo';\nimport { MemoryItemId } from '@/domain/memory/value-objects/memory-item-id.vo';\nimport { MemoryItemSource } from '@/domain/memory/value-objects/memory-item-source.vo';\nimport { MemoryItemTags } from '@/domain/memory/value-objects/memory-item-tags.vo';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface'; // Corrected import\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport {\n  SaveMemoryItemUseCaseInput,\n  SaveMemoryItemUseCaseInputSchema,\n  SaveMemoryItemUseCaseOutput,\n} from './save-memory-item.schema';\n\n// Optional: Define IEmbeddingService if embedding generation is part of this use case\n// export interface IEmbeddingService {\n//   generateEmbedding(text: string): Promise<Result<number[], Error>>;\n// }\n// export const IEmbeddingServiceToken = Symbol('IEmbeddingService');\n\nexport class SaveMemoryItemUseCase\n  implements\n    Executable< // Changed IUseCase back to Executable to match import alias\n      SaveMemoryItemUseCaseInput,\n      SaveMemoryItemUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    private memoryRepository: IMemoryRepository,\n    // private embeddingService?: IEmbeddingService, // Optional: if generating embeddings\n  ) {}\n\n  async execute(\n    input: SaveMemoryItemUseCaseInput,\n  ): Promise<Result<SaveMemoryItemUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = SaveMemoryItemUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const contentVo = MemoryItemContent.create(validInput.content);\n      const agentIdVo = validInput.agentId ? Identity.fromString(validInput.agentId) : null;\n      const tagsVo = MemoryItemTags.create(validInput.tags || []); // Default to empty array if undefined\n      const sourceVo = MemoryItemSource.create(validInput.source); // VO handles null/undefined\n\n      // Handle embedding: if provided, use it. If not, and an embedding service exists, generate it.\n      // For this iteration, we assume embedding is provided or is null.\n      let embeddingVo = MemoryItemEmbedding.create(validInput.embedding);\n      // if (!validInput.embedding && this.embeddingService) {\n      //   const embeddingResult = await this.embeddingService.generateEmbedding(validInput.content);\n      //   if (embeddingResult.isError()) {\n      //     return error(new DomainError(`Failed to generate embedding: ${embeddingResult.value.message}`, embeddingResult.value));\n      //   }\n      //   embeddingVo = MemoryItemEmbedding.create(embeddingResult.value);\n      // } else {\n      //   embeddingVo = MemoryItemEmbedding.create(validInput.embedding);\n      // }\n\n\n      let memoryItemEntity: MemoryItem;\n\n      if (validInput.id) { // Update existing\n        const itemIdVo = MemoryItemId.fromString(validInput.id);\n        const existingResult = await this.memoryRepository.findById(itemIdVo);\n        if (existingResult.isError()) {\n          return error(new DomainError(`Failed to fetch memory item for update: ${existingResult.value.message}`, existingResult.value));\n        }\n        const existingItem = existingResult.value;\n        if (!existingItem) {\n          return error(new NotFoundError(`MemoryItem with ID ${validInput.id} not found for update.`));\n        }\n        memoryItemEntity = existingItem;\n        let updated = false;\n\n        if (!memoryItemEntity.content().equals(contentVo)) {\n          memoryItemEntity = memoryItemEntity.updateContent(contentVo);\n          updated = true;\n          // If content changes, embedding might need recalculation if not provided\n          // if (!validInput.embedding && this.embeddingService) { /* ... regenerate ... */ }\n        }\n        if (validInput.hasOwnProperty('agentId')) {\n          if (!memoryItemEntity.agentId()?.equals(agentIdVo) && (memoryItemEntity.agentId() || agentIdVo)) {\n            memoryItemEntity = memoryItemEntity.assignAgent(agentIdVo);\n            updated = true;\n          }\n        }\n        if (validInput.hasOwnProperty('tags')) {\n           if (!memoryItemEntity.tags().equals(tagsVo)){\n            memoryItemEntity = memoryItemEntity.updateTags(tagsVo);\n            updated = true;\n           }\n        }\n        if (validInput.hasOwnProperty('source')) {\n          if (!memoryItemEntity.source().equals(sourceVo)){\n            memoryItemEntity = memoryItemEntity.updateSource(sourceVo);\n            updated = true;\n          }\n        }\n        if (validInput.hasOwnProperty('embedding')) { // Check if embedding was part of input\n            if(!memoryItemEntity.embedding().equals(embeddingVo)){\n                memoryItemEntity = memoryItemEntity.setEmbedding(embeddingVo);\n                updated = true;\n            }\n        }\n        // if (!updated) return ok({ // No actual change, return existing data\n        //   memoryItemId: memoryItemEntity.id().value(),\n        //   createdAt: memoryItemEntity.createdAt().toISOString(),\n        //   updatedAt: memoryItemEntity.updatedAt().toISOString(),\n        // });\n\n      } else { // Create new\n        const newItemId = MemoryItemId.generate();\n        memoryItemEntity = MemoryItem.create({\n          id: newItemId,\n          content: contentVo,\n          agentId: agentIdVo,\n          tags: tagsVo,\n          source: sourceVo,\n          embedding: embeddingVo,\n        });\n      }\n\n      const saveResult = await this.memoryRepository.save(memoryItemEntity);\n      if (saveResult.isError()) {\n        return error(new DomainError(`Failed to save memory item: ${saveResult.value.message}`, saveResult.value));\n      }\n\n      // Assuming save might return the persisted entity or void. We use entity from memory for response.\n      const finalEntity = saveResult.isOk() && saveResult.value instanceof MemoryItem ? saveResult.value : memoryItemEntity;\n\n      return ok({\n        memoryItemId: finalEntity.id().value(),\n        createdAt: finalEntity.createdAt().toISOString(),\n        updatedAt: finalEntity.updatedAt().toISOString(),\n      });\n\n    } catch (err: any) {\n      if (err instanceof ZodError || err instanceof NotFoundError || err instanceof DomainError || err instanceof ValueError) {\n        return error(err);\n      }\n      console.error(`[SaveMemoryItemUseCase] Unexpected error:`, err);\n      return error(new DomainError(`Unexpected error saving memory item: ${err.message || err}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-memory-items.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-memory-items.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":87,"column":59,"nodeType":"Identifier","messageId":"tooShort","endLine":87,"endColumn":60},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":113,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":113,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/memory/search-memory-items.use-case.ts\nimport { inject, injectable } from 'inversify';\n\nimport { ILoggerService, ILoggerServiceToken } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\n\nimport { DomainError, ValueError } from '@/domain/common/errors';\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository, IMemoryRepositoryToken } from '@/domain/memory/ports/memory-repository.interface';\nimport { MemorySearchFilters, PaginationOptions, PaginatedMemoryItemsResult } from '@/domain/memory/ports/memory-repository.types';\n\nimport { ApplicationError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface'; // Standardized to IUseCase\n\nimport { Result, ok, error as resultError, isSuccess } from '@/shared/result'; // Renamed 'error' to 'resultError' to avoid conflict\n\nimport {\n  SearchMemoryItemsUseCaseInput,\n  SearchMemoryItemsUseCaseInputSchema,\n  SearchMemoryItemsUseCaseOutput,\n  MemoryListItem,\n} from './search-memory-items.schema';\n\nconst CONTENT_EXCERPT_LENGTH = 200;\n\n@injectable()\nexport class SearchMemoryItemsUseCase\n  implements IUseCase<SearchMemoryItemsUseCaseInput, SearchMemoryItemsUseCaseOutput, ApplicationError> // Changed Executable to IUseCase\n{\n  constructor(\n    @inject(IMemoryRepositoryToken) private readonly memoryRepository: IMemoryRepository,\n    @inject(ILoggerServiceToken) private readonly logger: ILoggerService,\n  ) {}\n\n  public async execute(\n    input: SearchMemoryItemsUseCaseInput,\n  ): Promise<Result<SearchMemoryItemsUseCaseOutput, ApplicationError>> {\n    this.logger.debug('SearchMemoryItemsUseCase: Starting execution with input:', input);\n\n    const validationResult = this.validateInput(input);\n    if (!isSuccess(validationResult)) {\n      this.logger.warn('SearchMemoryItemsUseCase: Input validation failed.', validationResult.error);\n      return resultError(validationResult.error);\n    }\n    const validatedInput = validationResult.value;\n\n    const filtersResult = this.buildSearchFilters(validatedInput);\n    if (!isSuccess(filtersResult)) {\n        this.logger.warn('SearchMemoryItemsUseCase: Failed to build search filters.', filtersResult.error);\n        return resultError(filtersResult.error);\n    }\n    const searchFilters = filtersResult.value;\n\n    const paginationOptions: PaginationOptions = {\n      page: validatedInput.page,\n      pageSize: validatedInput.pageSize,\n    };\n\n    try {\n      // Type assertion for repoResult.value needed if PaginatedMemoryItemsResult is not directly returned by IMemoryRepository.search\n      const repoResult = await this.memoryRepository.search(searchFilters, paginationOptions);\n\n      if (!isSuccess(repoResult)) {\n        this.logger.error('SearchMemoryItemsUseCase: Repository search failed.', repoResult.error);\n        const appError = repoResult.error instanceof ApplicationError\n          ? repoResult.error\n          : new ApplicationError(`Search operation failed: ${repoResult.error.message}`);\n        return resultError(appError);\n      }\n\n      const paginatedMemoryItems = repoResult.value as PaginatedMemoryItemsResult;\n      const output = this.mapToOutput(paginatedMemoryItems);\n\n      this.logger.debug('SearchMemoryItemsUseCase: Execution successful.');\n      return ok(output);\n\n    } catch (err) { // Changed variable name from error to err\n      this.logger.error('SearchMemoryItemsUseCase: Unhandled error during execution.', err);\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      return resultError(new ApplicationError(`An unexpected error occurred: ${errorMessage}`));\n    }\n  }\n\n  private validateInput(input: SearchMemoryItemsUseCaseInput): Result<SearchMemoryItemsUseCaseInput, ApplicationError> {\n    const parseResult = SearchMemoryItemsUseCaseInputSchema.safeParse(input);\n    if (!parseResult.success) {\n      const errorMessages = parseResult.error.errors.map((e) => `${e.path.join('.')}: ${e.message}`).join(', ');\n      return resultError(new ApplicationError(`Invalid input: ${errorMessages}`));\n    }\n    return ok(parseResult.data); // parseResult.data contains input with defaults applied by Zod\n  }\n\n  private buildSearchFilters(validatedInput: SearchMemoryItemsUseCaseInput): Result<MemorySearchFilters, ApplicationError> {\n    let agentIdVO: Identity | null | undefined = undefined;\n    try {\n      if (validatedInput.agentId !== undefined) {\n          if (validatedInput.agentId === null) {\n              agentIdVO = null;\n          } else {\n              agentIdVO = Identity.create(validatedInput.agentId);\n          }\n      }\n\n      // Future: Wrap validatedInput.queryText and validatedInput.tags in VOs here if they have complex validation\n      // For now, they are passed as primitives/simple arrays as per MemorySearchFilters interface.\n\n      const filters: MemorySearchFilters = {\n        agentId: agentIdVO,\n        queryText: validatedInput.queryText,\n        tags: validatedInput.tags,\n      };\n      return ok(filters);\n    } catch (e) {\n      if (e instanceof ValueError) {\n        this.logger.warn(`SearchMemoryItemsUseCase: Error building search filters - ${e.message}`);\n        return resultError(new ApplicationError(`Invalid filter parameter: ${e.message}`));\n      }\n      this.logger.error('SearchMemoryItemsUseCase: Unexpected error building search filters.', e);\n      // Fallback for unexpected errors during filter building that are not ValueError\n      return resultError(new ApplicationError(`Unexpected error building filters: ${e instanceof Error ? e.message : String(e)}`));\n    }\n  }\n\n  private mapToOutput(\n    paginatedResult: PaginatedMemoryItemsResult\n  ): SearchMemoryItemsUseCaseOutput {\n    const memoryListItems = paginatedResult.items.map(item => this.mapMemoryItemToListItem(item));\n\n    return {\n      items: memoryListItems,\n      totalCount: paginatedResult.totalCount,\n      page: paginatedResult.page,\n      pageSize: paginatedResult.pageSize,\n      totalPages: paginatedResult.totalPages,\n    };\n  }\n\n  private mapMemoryItemToListItem(item: MemoryItem): MemoryListItem {\n    const contentValue = item.content().value();\n    const excerpt = contentValue.length > CONTENT_EXCERPT_LENGTH\n      ? `${contentValue.substring(0, CONTENT_EXCERPT_LENGTH)}...`\n      : contentValue;\n\n    const agentIdValue = item.agentId() ? item.agentId()!.value : null;\n    // Ensure tags and source are presented correctly if their VOs might return null/undefined for empty values\n    const tagsValue = item.tags().value() ? item.tags().value() : [];\n    const sourceValue = item.source().value() ? item.source().value() : null;\n\n    return {\n      id: item.id.value,\n      contentExcerpt: excerpt,\n      agentId: agentIdValue,\n      tags: tagsValue,\n      source: sourceValue,\n      createdAt: item.createdAt.toISOString(),\n      updatedAt: item.updatedAt.toISOString(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-similar-memory-items.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-similar-memory-items.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":39},{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (26). Maximum allowed is 25.","line":56,"column":23,"nodeType":"FunctionExpression","messageId":"exceed","endLine":116,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":77,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":77,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/memory/search-similar-memory-items.use-case.ts\nimport { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n\nimport { ILoggerService, ILoggerServiceToken } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\n\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository, IMemoryRepositoryToken } from '@/domain/memory/ports/memory-repository.interface';\nimport { MemoryItemEmbedding } from '@/domain/memory/value-objects/memory-item-embedding.vo';\n\nimport { ApplicationError, DomainError, ValueError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface'; // Standardized to IUseCase\n\nimport { Result, ok, error as resultError, isSuccess } from '@/shared/result';\n\nimport {\n  SearchSimilarMemoryItemsUseCaseInput,\n  SearchSimilarMemoryItemsUseCaseInputSchema,\n  SearchSimilarMemoryItemsUseCaseOutput,\n  SimilarMemoryListItem,\n} from './search-similar-memory-items.schema';\n\n@injectable()\nexport class SearchSimilarMemoryItemsUseCase\n  implements\n    IUseCase< // Changed Executable to IUseCase\n      SearchSimilarMemoryItemsUseCaseInput,\n      SearchSimilarMemoryItemsUseCaseOutput,\n      ApplicationError | ZodError\n    >\n{\n  constructor(\n    @inject(IMemoryRepositoryToken) private readonly memoryRepository: IMemoryRepository,\n    @inject(ILoggerServiceToken) private readonly logger: ILoggerService,\n  ) {}\n\n  private mapEntityToSimilarListItem(entity: MemoryItem, score?: number): SimilarMemoryListItem {\n    const fullContent = entity.content().value();\n    // Consistent excerpt logic with SearchMemoryItemsUseCase (e.g., 200 chars)\n    const excerptLength = 200;\n    const excerpt = fullContent.length > excerptLength ? fullContent.substring(0, excerptLength - 3) + '...' : fullContent;\n\n    return {\n      id: entity.id().value(),\n      contentExcerpt: excerpt,\n      agentId: entity.agentId() ? entity.agentId()!.value() : null,\n      tags: entity.tags().value() || [],\n      source: entity.source().value(),\n      createdAt: entity.createdAt().toISOString(),\n      updatedAt: entity.updatedAt().toISOString(),\n      relevanceScore: score, // Score might come from repository or be calculated\n    };\n  }\n\n  public async execute(\n    input: SearchSimilarMemoryItemsUseCaseInput,\n  ): Promise<Result<SearchSimilarMemoryItemsUseCaseOutput, ApplicationError | ZodError>> {\n    this.logger.debug('SearchSimilarMemoryItemsUseCase: Starting execution with input:', input);\n\n    const validationResult = SearchSimilarMemoryItemsUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      this.logger.warn('SearchSimilarMemoryItemsUseCase: Input validation failed.', validationResult.error);\n      return resultError(validationResult.error); // ZodError\n    }\n    const validInput = validationResult.data;\n\n    let embeddingVo: MemoryItemEmbedding;\n    let agentIdVo: Identity | undefined; // Undefined if not provided or null\n\n    try {\n      embeddingVo = MemoryItemEmbedding.create(validInput.queryEmbedding);\n      if (validInput.agentId) { // Only create if agentId is a non-empty string\n        agentIdVo = Identity.fromString(validInput.agentId);\n      }\n      // If validInput.agentId is null or undefined, agentIdVo remains undefined, which is fine for the repository call.\n    } catch (e) {\n      if (e instanceof ValueError) {\n        this.logger.warn(`SearchSimilarMemoryItemsUseCase: Invalid VO creation - ${e.message}`, e);\n        return resultError(new ApplicationError(`Invalid input parameter: ${e.message}`, e));\n      }\n      this.logger.error('SearchSimilarMemoryItemsUseCase: Unexpected error creating VOs.', e);\n      const errorMessage = e instanceof Error ? e.message : String(e);\n      return resultError(new ApplicationError(`Unexpected error processing input: ${errorMessage}`, e as Error));\n    }\n\n    const repoResult = await this.memoryRepository.searchSimilar(\n      embeddingVo,\n      agentIdVo, // Will be undefined if agentId was null or not provided in input\n      validInput.limit,\n    );\n\n    if (!isSuccess(repoResult)) {\n      this.logger.error(\n        `SearchSimilarMemoryItemsUseCase: Repository failed to search similar memory items.`,\n        repoResult.error,\n      );\n      const appError = repoResult.error instanceof ApplicationError\n        ? repoResult.error\n        : new ApplicationError(\n            `Failed to search similar memory items: ${repoResult.error.message}`,\n            repoResult.error,\n          );\n      return resultError(appError);\n    }\n\n    // The repository's searchSimilar currently returns MemoryItem[].\n    // If it were to return items with scores, the mapping would need to handle that.\n    // For now, relevanceScore will be undefined in the output items.\n    const similarItems = repoResult.value.map(entity => this.mapEntityToSimilarListItem(entity));\n\n    this.logger.debug('SearchSimilarMemoryItemsUseCase: Execution successful.');\n    return ok({\n      items: similarItems,\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/create-project.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/create-project.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (33). Maximum allowed is 25.","line":25,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":92,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4380,4383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4380,4383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from 'inversify';\n\nimport { ILoggerService, LoggerServiceToken } from '@/core/common/services/i-logger.service';\n\nimport { IProjectRepository, ProjectRepositoryToken } from '@/domain/project/ports/project-repository.interface';\nimport { ProjectEntity, ProjectProps } from '@/domain/project/project.entity';\nimport { ProjectDescription } from '@/domain/project/value-objects/project-description.vo';\nimport { ProjectId } from '@/domain/project/value-objects/project-id.vo'; // For generating new ID\nimport { ProjectName } from '@/domain/project/value-objects/project-name.vo';\n\nimport { ApplicationError, DomainError, ValidationError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result } from '@/shared/result';\n\nimport { CreateProjectInput, CreateProjectOutput, CreateProjectInputSchema } from './create-project.schema';\n\n@injectable()\nexport class CreateProjectUseCase implements IUseCase<CreateProjectInput, Promise<Result<CreateProjectOutput, DomainError>>> {\n  constructor(\n    @inject(ProjectRepositoryToken) private readonly projectRepository: IProjectRepository,\n    @inject(LoggerServiceToken) private readonly logger: ILoggerService,\n  ) {}\n\n  async execute(input: CreateProjectInput): Promise<Result<CreateProjectOutput, DomainError>> {\n    this.logger.info(`[CreateProjectUseCase] Attempting to create project with name: ${input.name}`);\n\n    const validationResult = CreateProjectInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      const errorMessage = 'Invalid input for CreateProjectUseCase';\n      this.logger.error(`[CreateProjectUseCase] ${errorMessage}`, validationResult.error.flatten());\n      return Result.fail(new ValidationError(errorMessage, validationResult.error.flatten().fieldErrors));\n    }\n\n    const validatedInput = validationResult.data;\n\n    try {\n      const projectNameResult = ProjectName.create(validatedInput.name);\n      if (projectNameResult.isFailure()) {\n        this.logger.warn(`[CreateProjectUseCase] Invalid project name: ${validatedInput.name}`, projectNameResult.error);\n        return Result.fail(projectNameResult.error);\n      }\n\n      let projectDescriptionResult: Result<ProjectDescription, DomainError> | undefined;\n      if (validatedInput.description !== undefined && validatedInput.description !== null) {\n        projectDescriptionResult = ProjectDescription.create(validatedInput.description);\n        if (projectDescriptionResult.isFailure()) {\n          this.logger.warn(`[CreateProjectUseCase] Invalid project description`, projectDescriptionResult.error);\n          return Result.fail(projectDescriptionResult.error);\n        }\n      }\n\n      const projectProps: ProjectProps = {\n        id: ProjectId.create(), // Generate new Project ID\n        name: projectNameResult.value,\n        description: projectDescriptionResult ? projectDescriptionResult.value : undefined,\n        // sourceCode: [], // Assuming new project starts with no source code entities linked\n        // annotations: [], // Assuming new project starts with no annotations\n        // memory: undefined, // Assuming new project starts with no specific memory linked\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const projectEntityResult = ProjectEntity.create(projectProps);\n      if (projectEntityResult.isFailure()) {\n        this.logger.error('[CreateProjectUseCase] Failed to create project entity', projectEntityResult.error);\n        return Result.fail(projectEntityResult.error);\n      }\n      const projectEntity = projectEntityResult.value;\n\n      const saveResult = await this.projectRepository.save(projectEntity);\n      if (saveResult.isFailure()) {\n        this.logger.error('[CreateProjectUseCase] Failed to save project to repository', saveResult.error);\n        return Result.fail(saveResult.error);\n      }\n\n      this.logger.info(`[CreateProjectUseCase] Project created successfully: ${projectEntity.id.value}`);\n\n      const output: CreateProjectOutput = {\n        id: projectEntity.id.value,\n        name: projectEntity.name.value,\n        description: projectEntity.description?.value,\n        createdAt: projectEntity.createdAt.toISOString(),\n        updatedAt: projectEntity.updatedAt.toISOString(),\n      };\n      return Result.ok(output);\n\n    } catch (error: any) {\n      this.logger.error('[CreateProjectUseCase] Unexpected error while creating project', error);\n      return Result.fail(new ApplicationError(`An unexpected error occurred: ${error.message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/get-project-details.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/get-project-details.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3571,3574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3571,3574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/project/get-project-details.use-case.ts\nimport { DomainError, NotFoundError } from '@/domain/common/errors';\nimport { IProjectRepository } from '@/domain/project/ports/project-repository.interface';\nimport { ProjectId } from '@/domain/project/value-objects/project-id.vo';\nimport { ISourceCodeRepository } from '@/domain/source-code/ports/source-code-repository.interface';\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface'; // Corrected import\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport {\n  GetProjectDetailsUseCaseInput,\n  GetProjectDetailsUseCaseOutput,\n  SourceCodeDetails,\n} from './get-project-details.schema';\n\nexport class GetProjectDetailsUseCase\n  implements\n    IUseCase< // Changed Executable to IUseCase\n      GetProjectDetailsUseCaseInput,\n      GetProjectDetailsUseCaseOutput,\n      DomainError | NotFoundError // Possible error types\n    >\n{\n  private projectRepository: IProjectRepository;\n  private sourceCodeRepository: ISourceCodeRepository;\n\n  constructor(\n    projectRepository: IProjectRepository,\n    sourceCodeRepository: ISourceCodeRepository,\n  ) {\n    this.projectRepository = projectRepository;\n    this.sourceCodeRepository = sourceCodeRepository;\n  }\n\n  async execute(\n    input: GetProjectDetailsUseCaseInput,\n  ): Promise<Result<GetProjectDetailsUseCaseOutput, DomainError | NotFoundError>> {\n    try {\n      const projectIdVo = ProjectId.fromString(input.projectId);\n\n      // 1. Fetch Project\n      const projectResult = await this.projectRepository.findById(projectIdVo);\n      if (projectResult.isError()) {\n        return error(projectResult.value); // Propagate repository error\n      }\n      const project = projectResult.value;\n      if (!project) {\n        return error(new NotFoundError(`Project with ID ${input.projectId} not found.`));\n      }\n\n      // 2. Fetch SourceCode\n      let sourceCodeDetails: SourceCodeDetails | null = null;\n      const sourceCodeResult = await this.sourceCodeRepository.findByProjectId(projectIdVo);\n\n      if (sourceCodeResult.isError()) {\n        // Log this error but don't necessarily fail the whole use case if project exists\n        // Or, decide if this should be a hard failure. For now, let's allow project details without source code details on error.\n        console.warn(`[GetProjectDetailsUseCase] Error fetching source code for project ${input.projectId}: ${sourceCodeResult.value.message}`);\n        // If SourceCode must exist or its fetch error is critical, uncomment below:\n        // return error(new DomainError(`Failed to fetch source code details: ${sourceCodeResult.value.message}`));\n      } else {\n        const sourceCodeEntity = sourceCodeResult.value;\n        if (sourceCodeEntity) {\n          sourceCodeDetails = {\n            id: sourceCodeEntity.id().value(),\n            repositoryPath: sourceCodeEntity.path().value(), // path() is RepositoryPath, then .value() for string\n            docsPath: sourceCodeEntity.docsPath()?.value() || null, // docsPath() is RepositoryDocsPath | undefined\n          };\n        }\n      }\n\n      // 3. Map to Output DTO\n      const output: GetProjectDetailsUseCaseOutput = {\n        id: project.id().value(),\n        name: project.name().value(),\n        description: project.description().value(), // ProjectDescription.value() returns string\n        createdAt: project.createdAt().toISOString(),\n        updatedAt: project.updatedAt().toISOString(),\n        sourceCode: sourceCodeDetails,\n      };\n\n      return ok(output);\n\n    } catch (err: any) {\n      // Catch unexpected errors (e.g., VO creation if input.projectId is malformed, though Zod should catch it before)\n      console.error(`[GetProjectDetailsUseCase] Unexpected error for project ID ${input.projectId}:`, err);\n      return error(\n        new DomainError(\n          `An unexpected error occurred while fetching details for project ${input.projectId}: ${err.message || err}`,\n        ),\n      );\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2475,2478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2475,2478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/project/list-projects.use-case.ts\nimport { DomainError } from '@/domain/common/errors'; // Using DomainError as a general error type from repo\nimport { IProjectRepository } from '@/domain/project/ports/project-repository.interface';\nimport { Project } from '@/domain/project/project.entity';\n\nimport { IUseCase } from '@/application/common/ports/use-case.interface'; // Corrected import\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport {\n  ListProjectsUseCaseInput,\n  ListProjectsUseCaseOutput,\n  ProjectListItem, // Explicitly import if needed for mapping, though output type implies it\n} from './list-projects.schema';\n\n// Assuming IProjectRepositoryToken would be defined alongside IProjectRepository\n// For now, direct constructor injection without DI framework specifics.\n\nexport class ListProjectsUseCase\n  implements\n    IUseCase< // Changed Executable to IUseCase\n      ListProjectsUseCaseInput,\n      ListProjectsUseCaseOutput,\n      DomainError // Errors from repository are likely DomainErrors\n    >\n{\n  private projectRepository: IProjectRepository;\n\n  constructor(projectRepository: IProjectRepository) {\n    this.projectRepository = projectRepository;\n  }\n\n  async execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    input: ListProjectsUseCaseInput, // Input is currently empty but defined for consistency\n  ): Promise<Result<ListProjectsUseCaseOutput, DomainError>> {\n    try {\n      const projectsResult = await this.projectRepository.findAll();\n\n      if (projectsResult.isError()) {\n        // Propagate the error from the repository\n        return error(projectsResult.value);\n      }\n\n      const projects = projectsResult.value;\n\n      // Map Project entities to ProjectListItem DTOs\n      const outputItems: ListProjectsUseCaseOutput = projects.map(\n        (project: Project): ProjectListItem => {\n          // Ensure createdAt is available and correctly formatted\n          // The Project entity from DOM-PROJ-002 should have createdAt() method\n          const createdAtVo = project.createdAt(); // Assuming this returns a Date object\n\n          return {\n            id: project.id().value(), // Access value from ProjectId VO\n            name: project.name().value(), // Access value from ProjectName VO\n            createdAt: createdAtVo.toISOString(), // Format Date to ISO string\n          };\n        },\n      );\n\n      return ok(outputItems);\n    } catch (err: any) {\n      // Catch unexpected errors during the process\n      console.error('[ListProjectsUseCase] Unexpected error:', err);\n      return error(\n        new DomainError(\n          `An unexpected error occurred while listing projects: ${err.message || err}`,\n        ),\n      );\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/create-user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/create-user.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (43). Maximum allowed is 25.","line":31,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":129,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6241,6244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6241,6244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from 'inversify';\n\nimport { ILoggerService, LoggerServiceToken } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo'; // For LLMProviderConfigId and AgentId\n\nimport { IUserRepository, UserRepositoryToken } from '@/domain/user/ports/user-repository.interface';\nimport { UserEntity, UserProps } from '@/domain/user/user.entity';\nimport { UserAvatar } from '@/domain/user/value-objects/user-avatar.vo';\nimport { UserEmail } from '@/domain/user/value-objects/user-email.vo';\nimport { UserId } from '@/domain/user/value-objects/user-id.vo';\nimport { UserNickname } from '@/domain/user/value-objects/user-nickname.vo';\nimport { UserUsername } from '@/domain/user/value-objects/user-username.vo';\n\nimport { ApplicationError, DomainError, ValidationError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result } from '@/shared/result';\n\nimport { CreateUserInput, CreateUserOutput, CreateUserInputSchema } from './create-user.schema';\n// TODO: Import or define a HashingService if password hashing is to be done in the use case.\n// For now, password is not explicitly handled by UserEntity for hashing.\n\n@injectable()\nexport class CreateUserUseCase implements IUseCase<CreateUserInput, Promise<Result<CreateUserOutput, DomainError>>> {\n  constructor(\n    @inject(UserRepositoryToken) private readonly userRepository: IUserRepository,\n    @inject(LoggerServiceToken) private readonly logger: ILoggerService,\n    // @inject(HashingServiceToken) private readonly hashingService: IHashingService, // Example\n  ) {}\n\n  async execute(input: CreateUserInput): Promise<Result<CreateUserOutput, DomainError>> {\n    this.logger.info(`[CreateUserUseCase] Attempting to create user with username: ${input.username}`);\n\n    const validationResult = CreateUserInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      const errorMessage = 'Invalid input for CreateUserUseCase';\n      this.logger.error(`[CreateUserUseCase] Validation Error: ${errorMessage}`, validationResult.error.flatten());\n      return Result.fail(new ValidationError(errorMessage, validationResult.error.flatten().fieldErrors));\n    }\n\n    const validatedInput = validationResult.data;\n\n    try {\n      // Check if username or email already exists\n      const existingByUsername = await this.userRepository.findByUsername(UserUsername.create(validatedInput.username).getOrThrow()); // Assuming VO creation won't fail here due to Zod\n      if (existingByUsername.isSuccess() && existingByUsername.value) {\n        return Result.fail(new ApplicationError('Username already exists.'));\n      }\n      const existingByEmail = await this.userRepository.findByEmail(UserEmail.create(validatedInput.email).getOrThrow());\n      if (existingByEmail.isSuccess() && existingByEmail.value) {\n        return Result.fail(new ApplicationError('Email already exists.'));\n      }\n\n      // Create Value Objects\n      const usernameResult = UserUsername.create(validatedInput.username);\n      const emailResult = UserEmail.create(validatedInput.email);\n      const nicknameResult = UserNickname.create(validatedInput.nickname);\n      const avatarResult = UserAvatar.create(validatedInput.avatarUrl || null); // Default to null if undefined\n      const llmConfigIdResult = Identity.create(validatedInput.defaultLLMProviderConfigId);\n      let assistantIdResult: Result<Identity | null, DomainError> = Result.ok(null);\n      if (validatedInput.assistantId) {\n        assistantIdResult = Identity.create(validatedInput.assistantId);\n      }\n\n\n      const results = Result.combine([\n        usernameResult, emailResult, nicknameResult, avatarResult, llmConfigIdResult, assistantIdResult\n      ]);\n      if (results.isFailure()) {\n        this.logger.warn('[CreateUserUseCase] Error creating user value objects', results.error);\n        return Result.fail(results.error);\n      }\n\n      // TODO: Password Hashing - This is a critical step.\n      // const hashedPassword = await this.hashingService.hash(validatedInput.password);\n      // For now, we are not including password in UserEntity props directly for this example,\n      // as UserEntity doesn't have a password field. This needs alignment with domain model.\n      // If UserEntity were to store a hashed password, it would be passed here.\n\n      const userProps: UserProps = {\n        id: UserId.create(), // Generate new User ID\n        username: usernameResult.value,\n        email: emailResult.value,\n        nickname: nicknameResult.value,\n        avatar: avatarResult.value,\n        defaultLLMProviderConfigId: llmConfigIdResult.value,\n        assistantId: assistantIdResult.isSuccess() ? assistantIdResult.value : null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const userEntityResult = UserEntity.create(userProps);\n      if (userEntityResult.isFailure()) {\n        this.logger.error('[CreateUserUseCase] Failed to create user entity', userEntityResult.error);\n        return Result.fail(userEntityResult.error);\n      }\n      const userEntity = userEntityResult.value;\n\n      // Assuming the repository handles the actual password storage if applicable.\n      const saveResult = await this.userRepository.add(userEntity); // Using 'add' as per IRepository convention\n      if (saveResult.isFailure()) {\n        this.logger.error('[CreateUserUseCase] Failed to save user to repository', saveResult.error);\n        return Result.fail(saveResult.error);\n      }\n\n      this.logger.info(`[CreateUserUseCase] User created successfully: ${userEntity.id.value}`);\n\n      const output: CreateUserOutput = {\n        id: userEntity.id.value,\n        username: userEntity.username().value,\n        email: userEntity.email().value,\n        nickname: userEntity.nickname().value,\n        avatarUrl: userEntity.avatar().value,\n        defaultLLMProviderConfigId: userEntity.defaultLLMProviderConfigId().value,\n        assistantId: userEntity.assistantId()?.value ?? null,\n        createdAt: userEntity.createdAt.toISOString(),\n        updatedAt: userEntity.updatedAt.toISOString(),\n      };\n      return Result.ok(output);\n\n    } catch (error: any) {\n      this.logger.error('[CreateUserUseCase] Unexpected error while creating user', error);\n      // Check if it's a DomainError we can propagate\n      if (error instanceof DomainError) {\n        return Result.fail(error);\n      }\n      return Result.fail(new ApplicationError(`An unexpected error occurred: ${error.message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/get-user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/get-user.use-case.ts","messages":[{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (33). Maximum allowed is 25.","line":24,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":90,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3578,3581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3578,3581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from 'inversify';\n\nimport { ILoggerService, LoggerServiceToken } from '@/core/common/services/i-logger.service';\n\nimport { IUserRepository, UserRepositoryToken } from '@/domain/user/ports/user-repository.interface';\nimport { UserEntity } from '@/domain/user/user.entity';\nimport { UserEmail } from '@/domain/user/value-objects/user-email.vo';\nimport { UserId } from '@/domain/user/value-objects/user-id.vo';\n\nimport { ApplicationError, DomainError, NotFoundError, ValidationError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result } from '@/shared/result';\n\nimport { GetUserInput, GetUserOutput, GetUserInputSchema } from './get-user.schema';\n\n@injectable()\nexport class GetUserUseCase implements IUseCase<GetUserInput, Promise<Result<GetUserOutput | null, DomainError>>> {\n  constructor(\n    @inject(UserRepositoryToken) private readonly userRepository: IUserRepository,\n    @inject(LoggerServiceToken) private readonly logger: ILoggerService,\n  ) {}\n\n  async execute(input: GetUserInput): Promise<Result<GetUserOutput | null, DomainError>> {\n    this.logger.info(`[GetUserUseCase] Attempting to get user with input: ${JSON.stringify(input)}`);\n\n    const validationResult = GetUserInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      const errorMessage = 'Invalid input for GetUserUseCase';\n      this.logger.error(`[GetUserUseCase] Validation Error: ${errorMessage}`, validationResult.error.flatten());\n      return Result.fail(new ValidationError(errorMessage, validationResult.error.flatten().fieldErrors));\n    }\n\n    const { userId, email } = validationResult.data;\n\n    try {\n      let userResult: Result<UserEntity | null, DomainError>;\n\n      if (userId) {\n        const userIdResult = UserId.create(userId);\n        if (userIdResult.isFailure()) {\n          return Result.fail(userIdResult.error);\n        }\n        userResult = await this.userRepository.findById(userIdResult.value);\n      } else if (email) {\n        const userEmailResult = UserEmail.create(email);\n        if (userEmailResult.isFailure()) {\n          return Result.fail(userEmailResult.error);\n        }\n        userResult = await this.userRepository.findByEmail(userEmailResult.value);\n      } else {\n        // This case should be caught by Zod schema's refine, but as a safeguard:\n        return Result.fail(new ValidationError('Either userId or email must be provided.'));\n      }\n\n      if (userResult.isFailure()) {\n        this.logger.warn('[GetUserUseCase] Repository error while fetching user', userResult.error);\n        return Result.fail(userResult.error);\n      }\n\n      const userEntity = userResult.value;\n\n      if (!userEntity) {\n        this.logger.info(`[GetUserUseCase] User not found with input: ${JSON.stringify(input)}`);\n        return Result.fail(new NotFoundError('User not found.'));\n      }\n\n      this.logger.info(`[GetUserUseCase] User found: ${userEntity.id.value}`);\n\n      const output: GetUserOutput = {\n        id: userEntity.id.value,\n        username: userEntity.username().value,\n        email: userEntity.email().value,\n        nickname: userEntity.nickname().value,\n        avatarUrl: userEntity.avatar().value,\n        defaultLLMProviderConfigId: userEntity.defaultLLMProviderConfigId().value,\n        assistantId: userEntity.assistantId()?.value ?? null,\n        createdAt: userEntity.createdAt.toISOString(),\n        updatedAt: userEntity.updatedAt.toISOString(),\n      };\n      return Result.ok(output);\n\n    } catch (error: any) {\n      this.logger.error('[GetUserUseCase] Unexpected error while getting user', error);\n      if (error instanceof DomainError) {\n        return Result.fail(error);\n      }\n      return Result.fail(new ApplicationError(`An unexpected error occurred: ${error.message}`));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/base.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/services/i-logger.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[541,544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[541,544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[786,789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[786,789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1124,1127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1124,1127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1420,1423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1420,1423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @interface ILogger\n * @description Defines a generic logging interface to abstract logging implementations.\n * This allows different parts of the application (domain, application, infrastructure)\n * to log messages without being tied to a specific logging library.\n */\nexport interface ILogger {\n  /**\n   * Logs an informational message.\n   * @param {string} message - The message to log.\n   * @param {Record<string, any>=} metadata - Optional metadata to include with the log.\n   */\n  info(message: string, metadata?: Record<string, any>): void;\n\n  /**\n   * Logs a warning message.\n   * @param {string} message - The message to log.\n   * @param {Record<string, any>=} metadata - Optional metadata to include with the log.\n   */\n  warn(message: string, metadata?: Record<string, any>): void;\n\n  /**\n   * Logs an error message.\n   * @param {string} message - The message to log.\n   * @param {Error=} error - Optional error object to associate with the log.\n   * @param {Record<string, any>=} metadata - Optional metadata to include with the log.\n   */\n  error(message: string, error?: Error, metadata?: Record<string, any>): void;\n\n  /**\n   * Logs a debug message. Typically used for detailed diagnostic information.\n   * @param {string} message - The message to log.\n   * @param {Record<string, any>=} metadata - Optional metadata to include with the log.\n   */\n  debug(message: string, metadata?: Record<string, any>): void;\n}\n\n/**\n * @constant LOGGER_INTERFACE_TYPE\n * @description Symbol identifier for binding the ILogger interface in DI containers.\n */\nexport const LOGGER_INTERFACE_TYPE = Symbol.for('ILogger');\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/value-objects/base.vo.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[111,114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[111,114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/common/value-objects/base.vo.ts\n\nexport interface ValueObjectProps {\n  [index: string]: any;\n}\n\n/**\n * @desc ValueObjects are objects that represent a simple entity whose equality is not based on identity:\n * two Value Objects are equal if they have the same value, not necessarily being the same object.\n *\n * Rule 3: Wrap all primitives and Strings.\n * Rule 9: No getters and setters.\n */\nexport abstract class AbstractValueObject<T extends ValueObjectProps> {\n  protected readonly props: Readonly<T>;\n\n  protected constructor(props: T) {\n    this.props = Object.freeze(props);\n  }\n\n  public equals(vo?: AbstractValueObject<T>): boolean {\n    if (vo === null || vo === undefined) {\n      return false;\n    }\n    if (vo.props === undefined) {\n      return false;\n    }\n    return JSON.stringify(this.props) === JSON.stringify(vo.props);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/value-objects/identity.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent-internal-state.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent-persona-template.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-internal-state-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-persona-template-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-repository.interface.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersonaId' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/agent/ports/agent-repository.interface.ts\nimport { Result } from '@/shared/result';\n\nimport { Agent } from '../agent.entity';\nimport { AgentId } from '../value-objects/agent-id.vo';\nimport { PersonaId } from '../value-objects/persona/persona-id.vo';\n\nexport interface IAgentRepository {\n  save(agent: Agent): Promise<Result<void>>;\n  findById(id: AgentId): Promise<Result<Agent | null>>;\n  // findAllByPersonaId(personaId: PersonaId): Promise<Result<Agent[]>>; // If multiple agents can use same persona template\n  findAll(): Promise<Result<Agent[]>>;\n  delete(id: AgentId): Promise<Result<void>>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-max-iterations.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-temperature.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_VALUE` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":36},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_VALUE` must match one of the following formats: camelCase","line":10,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/agent/value-objects/agent-temperature.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface AgentTemperatureProps extends ValueObjectProps {\n  value: number;\n}\n\nexport class AgentTemperature extends AbstractValueObject<AgentTemperatureProps> {\n  private static readonly MIN_VALUE = 0.0;\n  private static readonly MAX_VALUE = 2.0; // Common range for LLM temperature\n\n  private constructor(value: number) {\n    super({ value });\n  }\n\n  private static validate(temperature: number): void {\n    if (temperature < this.MIN_VALUE || temperature > this.MAX_VALUE) {\n      throw new Error(\n        `Agent temperature must be between ${this.MIN_VALUE} and ${this.MAX_VALUE}. Received: ${temperature}`\n      );\n    }\n  }\n\n  public static create(temperature: number): AgentTemperature {\n    this.validate(temperature);\n    return new AgentTemperature(temperature);\n  }\n\n  public static default(): AgentTemperature {\n    return new AgentTemperature(0.7); // A common default temperature\n  }\n\n  public value(): number {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value.toFixed(1); // Format to one decimal place\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/current-goal.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/agent/value-objects/internal-state/current-goal.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface CurrentGoalProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class CurrentGoal extends AbstractValueObject<CurrentGoalProps> {\n  private static readonly MAX_LENGTH = 500;\n\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  private static validate(goal: string): void {\n    // Goal can be empty if not set.\n    if (goal && goal.length > this.MAX_LENGTH) {\n      throw new Error(`Current goal description must be at most ${this.MAX_LENGTH} characters long.`);\n    }\n  }\n\n  public static create(goal: string): CurrentGoal {\n    this.validate(goal);\n    return new CurrentGoal(goal); // Not trimming, to preserve formatting\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/current-project-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/general-notes.collection.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name '_' is too short (< 2).","line":51,"column":47,"nodeType":"Identifier","messageId":"tooShort","endLine":51,"endColumn":48},{"ruleId":"id-length","severity":1,"message":"Identifier name 'i' is too short (< 2).","line":51,"column":50,"nodeType":"Identifier","messageId":"tooShort","endLine":51,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/agent/value-objects/internal-state/general-notes.collection.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\n// Re-using a simple string wrapper for individual notes\nclass NoteEntry extends AbstractValueObject<{value: string}> {\n    private constructor(value: string) { super({value}); }\n    public static create(text: string): NoteEntry {\n        if (text === null || text === undefined || text.trim().length === 0) {\n            throw new Error(\"General note text cannot be empty.\");\n        }\n        // Max length for a single general note entry\n        if (text.length > 2000) {\n            throw new Error(\"Single general note entry exceeds maximum length.\");\n        }\n        return new NoteEntry(text);\n    }\n    public value(): string { return this.props.value; }\n}\n\ninterface GeneralNotesCollectionProps extends ValueObjectProps {\n  notes: ReadonlyArray<NoteEntry>;\n}\n\nexport class GeneralNotesCollection extends AbstractValueObject<GeneralNotesCollectionProps> {\n  private constructor(notes: NoteEntry[]) {\n    super({ notes: Object.freeze([...notes]) });\n  }\n\n  public static create(notes: string[] = []): GeneralNotesCollection {\n    if (!Array.isArray(notes)) {\n      throw new Error('Notes must be an array to create GeneralNotesCollection.');\n    }\n    const noteEntryObjects = notes.map(noteStr => NoteEntry.create(noteStr));\n    return new GeneralNotesCollection(noteEntryObjects);\n  }\n\n  public list(): ReadonlyArray<string> {\n    return this.props.notes.map(note => note.value());\n  }\n\n  public addNote(note: string): GeneralNotesCollection {\n    const newNoteEntry = NoteEntry.create(note);\n    const newNotes = [...this.props.notes, newNoteEntry];\n    return new GeneralNotesCollection(newNotes);\n  }\n\n  public removeNoteAtIndex(index: number): GeneralNotesCollection {\n    if (index < 0 || index >= this.props.notes.length) {\n      throw new Error(\"Index out of bounds for removing note.\");\n    }\n    const newNotes = this.props.notes.filter((_, i) => i !== index);\n    return new GeneralNotesCollection(newNotes);\n  }\n\n  public count(): number {\n    return this.props.notes.length;\n  }\n\n  public isEmpty(): boolean {\n    return this.props.notes.length === 0;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-backstory.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/agent/value-objects/persona/persona-backstory.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface PersonaBackstoryProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class PersonaBackstory extends AbstractValueObject<PersonaBackstoryProps> {\n  private static readonly MAX_LENGTH = 2000; // Allow for a more detailed backstory\n\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  private static validate(backstory: string): void {\n    // Backstory can be empty if not provided\n    if (backstory.length > this.MAX_LENGTH) {\n      throw new Error(`Persona backstory must be at most ${this.MAX_LENGTH} characters long.`);\n    }\n  }\n\n  public static create(backstory: string): PersonaBackstory {\n    this.validate(backstory);\n    return new PersonaBackstory(backstory); // Not trimming, to preserve formatting if any\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-goal.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":10,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/agent/value-objects/persona/persona-goal.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface PersonaGoalProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class PersonaGoal extends AbstractValueObject<PersonaGoalProps> {\n  private static readonly MIN_LENGTH = 10; // Goals should be somewhat descriptive\n  private static readonly MAX_LENGTH = 500;\n\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  private static validate(goal: string): void {\n    if (goal.trim().length < this.MIN_LENGTH) {\n      throw new Error(`Persona goal must be at least ${this.MIN_LENGTH} characters long.`);\n    }\n    if (goal.length > this.MAX_LENGTH) {\n      throw new Error(`Persona goal must be at most ${this.MAX_LENGTH} characters long.`);\n    }\n  }\n\n  public static create(goal: string): PersonaGoal {\n    this.validate(goal);\n    return new PersonaGoal(goal.trim());\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-name.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":10,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/agent/value-objects/persona/persona-name.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface PersonaNameProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class PersonaName extends AbstractValueObject<PersonaNameProps> {\n  private static readonly MIN_LENGTH = 1;\n  private static readonly MAX_LENGTH = 100;\n\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  private static validate(name: string): void {\n    if (name.trim().length < this.MIN_LENGTH) {\n      throw new Error(`Persona name must be at least ${this.MIN_LENGTH} character long.`);\n    }\n    if (name.length > this.MAX_LENGTH) {\n      throw new Error(`Persona name must be at most ${this.MAX_LENGTH} characters long.`);\n    }\n  }\n\n  public static create(name: string): PersonaName {\n    this.validate(name);\n    return new PersonaName(name.trim());\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-role.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":10,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/agent/value-objects/persona/persona-role.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface PersonaRoleProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class PersonaRole extends AbstractValueObject<PersonaRoleProps> {\n  private static readonly MIN_LENGTH = 3;\n  private static readonly MAX_LENGTH = 50;\n\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  private static validate(role: string): void {\n    if (role.trim().length < this.MIN_LENGTH) {\n      throw new Error(`Persona role must be at least ${this.MIN_LENGTH} characters long.`);\n    }\n    if (role.length > this.MAX_LENGTH) {\n      throw new Error(`Persona role must be at most ${this.MAX_LENGTH} characters long.`);\n    }\n    // Could add regex for allowed characters if needed\n  }\n\n  public static create(role: string): PersonaRole {\n    this.validate(role);\n    return new PersonaRole(role.trim());\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/tool-names.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/annotation.entity.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":3,"column":41,"nodeType":"Literal","endLine":3,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/annotation/annotation.entity.ts\nimport { AbstractEntity, EntityProps } from '@/core/common/base.entity';\nimport { EntityError, ValueError } from '@/core/common/errors';\nimport { Identity } from '@/core/common/value-objects/identity.vo'; // For AgentId and JobId\n\nimport { AnnotationId } from './value-objects/annotation-id.vo';\nimport { AnnotationText } from './value-objects/annotation-text.vo';\n\nexport interface AnnotationProps {\n  id: AnnotationId;\n  text: AnnotationText;\n  agentId?: Identity | null;\n  jobId?: Identity | null;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\ninterface InternalAnnotationProps extends EntityProps<AnnotationId> {\n  text: AnnotationText;\n  agentId?: Identity | null;\n  jobId?: Identity | null;\n}\n\nexport class Annotation extends AbstractEntity<AnnotationId, InternalAnnotationProps> {\n  private constructor(props: InternalAnnotationProps) {\n    super(props);\n  }\n\n  public static create(props: AnnotationProps): Annotation {\n    this.validateProps(props);\n\n    const now = new Date();\n    const internalProps: InternalAnnotationProps = {\n      id: props.id,\n      text: props.text,\n      agentId: props.agentId === undefined ? null : props.agentId,\n      jobId: props.jobId === undefined ? null : props.jobId,\n      createdAt: props.createdAt || now,\n      updatedAt: props.updatedAt || now,\n    };\n\n    return new Annotation(internalProps);\n  }\n\n  private static validateProps(props: AnnotationProps): void {\n    if (!props.id) throw new EntityError('Annotation ID is required.');\n    if (!props.text) throw new EntityError('Annotation text is required.');\n    // agentId and jobId are optional\n  }\n\n  // --- Getters for VOs ---\n  public text(): AnnotationText { return this.props.text; }\n  public agentId(): Identity | null | undefined { return this.props.agentId; }\n  public jobId(): Identity | null | undefined { return this.props.jobId; }\n\n  // --- Update Methods ---\n  public updateText(newText: AnnotationText): Annotation {\n    if (!newText) {\n      throw new ValueError('New text cannot be null or undefined for update.');\n    }\n    if (this.props.text.equals(newText)) {\n      return this; // No change\n    }\n    const newProps = { ...this.props, text: newText, updatedAt: new Date() };\n    return new Annotation(newProps);\n  }\n\n  // Optional: methods to update agentId or jobId if they can be changed post-creation\n  public assignAgent(agentId: Identity | null): Annotation {\n    if (this.props.agentId === agentId || (this.props.agentId?.equals(agentId))) {\n        return this; // No change\n    }\n    const newProps = { ...this.props, agentId: agentId, updatedAt: new Date() };\n    return new Annotation(newProps);\n  }\n\n  public assignJob(jobId: Identity | null): Annotation {\n    if (this.props.jobId === jobId || (this.props.jobId?.equals(jobId))) {\n        return this; // No change\n    }\n    const newProps = { ...this.props, jobId: jobId, updatedAt: new Date() };\n    return new Annotation(newProps);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/ports/annotation-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/ports/annotation-repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/value-objects/annotation-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/value-objects/annotation-text.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/annotation/value-objects/annotation-text.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\ninterface AnnotationTextProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class AnnotationText extends AbstractValueObject<AnnotationTextProps> {\n  private static readonly MIN_LENGTH = 1;\n  private static readonly MAX_LENGTH = 5000; // Arbitrary max length, can be adjusted\n\n  private constructor(props: AnnotationTextProps) {\n    super(props);\n  }\n\n  public static create(text: string): AnnotationText {\n    this.validate(text);\n    return new AnnotationText({ value: text });\n  }\n\n  private static validate(text: string): void {\n    if (text === null || text === undefined) {\n      throw new ValueError('Annotation text cannot be null or undefined.');\n    }\n    const trimmedText = text.trim();\n    if (trimmedText.length < this.MIN_LENGTH) {\n      throw new ValueError(`Annotation text must be at least ${this.MIN_LENGTH} character long (after trimming).`);\n    }\n    if (trimmedText.length > this.MAX_LENGTH) {\n      throw new ValueError(`Annotation text must be no more than ${this.MAX_LENGTH} characters long (after trimming).`);\n    }\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  // equals is inherited from AbstractValueObject\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/common/errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[397,400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[397,400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[454,457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[454,457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[750,753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[750,753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[811,814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[811,814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1960,1963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1960,1963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2127,2130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2127,2130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2952,2955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2952,2955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3108,3111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3108,3111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/common/errors.ts\n\n/**\n * Base class for custom domain errors.\n * Ensures that the error name is set correctly and captures the stack trace.\n */\nexport class DomainError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n\n    // Capture stack trace in V8 environments (Node.js, Chrome)\n    if (typeof (Error as any).captureStackTrace === 'function') {\n      (Error as any).captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\n/**\n * Error thrown when a Value Object validation fails.\n */\nexport class ValueError extends DomainError {\n  // Optionally, include the field and value that caused the error\n  public readonly field?: string;\n  public readonly value?: any;\n\n  constructor(message: string, field?: string, value?: any) {\n    super(message);\n    this.field = field;\n    this.value = value;\n  }\n}\n\n/**\n * Error thrown when an Entity-specific business rule is violated.\n */\nexport class EntityError extends DomainError {\n  // Optionally, include the entity ID or related info\n  public readonly entityId?: string;\n\n  constructor(message: string, entityId?: string) {\n    super(message);\n    this.entityId = entityId;\n  }\n}\n\n/**\n * Error thrown when a requested resource or entity is not found.\n */\nexport class NotFoundError extends DomainError {\n  public readonly resourceType?: string;\n  public readonly resourceId?: string | number;\n\n  constructor(message: string, resourceType?: string, resourceId?: string | number) {\n    super(message);\n    this.resourceType = resourceType;\n    this.resourceId = resourceId;\n  }\n}\n\n/**\n * Error thrown when an IAgentTool fails during its execution.\n * Includes a flag to indicate if the error is considered recoverable by the agent executor,\n * potentially allowing the LLM to attempt a different approach.\n */\nexport class ToolError extends DomainError {\n  public readonly toolName?: string;\n  public readonly originalError?: any; // To store the underlying error if any\n  public readonly isRecoverable: boolean;\n\n  constructor(\n    message: string,\n    toolName?: string,\n    originalError?: any,\n    isRecoverable: boolean = true, // Default to recoverable\n  ) {\n    super(message);\n    this.toolName = toolName;\n    this.originalError = originalError;\n    this.isRecoverable = isRecoverable;\n  }\n}\n\n/**\n * Error thrown by queue operations.\n */\nexport class QueueError extends DomainError {\n  public readonly queueName?: string;\n  public readonly jobId?: string;\n\n  constructor(message: string, queueName?: string, jobId?: string) {\n    super(message);\n    this.queueName = queueName;\n    this.jobId = jobId;\n  }\n}\n\n/**\n * Error thrown by LLM interactions.\n */\nexport class LLMError extends DomainError {\n  public readonly modelId?: string;\n  public readonly provider?: string; // e.g., 'openai', 'anthropic'\n  public readonly statusCode?: number; // HTTP status code if applicable\n  public readonly originalError?: any;\n\n  constructor(\n    message: string,\n    details?: {\n      modelId?: string;\n      provider?: string;\n      statusCode?: number;\n      originalError?: any;\n    }\n  ) {\n    super(message);\n    this.modelId = details?.modelId;\n    this.provider = details?.provider;\n    this.statusCode = details?.statusCode;\n    this.originalError = details?.originalError;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/events/job-event.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1503,1506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1503,1506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1508,1511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1508,1511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1647,1650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1647,1650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1652,1655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1652,1655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1738,1741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1738,1741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1822,1825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1822,1825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2065,2068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2065,2068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2070,2073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2070,2073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.added` must match one of the following formats: camelCase","line":117,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":117,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.active` must match one of the following formats: camelCase","line":118,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":118,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.completed` must match one of the following formats: camelCase","line":119,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":119,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3398,3401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3398,3401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.failed` must match one of the following formats: camelCase","line":120,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":120,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.progress` must match one of the following formats: camelCase","line":121,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":121,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.stalled` must match one of the following formats: camelCase","line":122,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":122,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.delayed` must match one of the following formats: camelCase","line":123,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":123,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.promoted` must match one of the following formats: camelCase","line":124,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":124,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.removed` must match one of the following formats: camelCase","line":125,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":125,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `job.log_added` must match one of the following formats: camelCase","line":126,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":126,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `queue.paused` must match one of the following formats: camelCase","line":127,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":127,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `queue.resumed` must match one of the following formats: camelCase","line":128,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":128,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `worker.error` must match one of the following formats: camelCase","line":129,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":129,"endColumn":17}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/events/job-event.types.ts\nimport { JobEntity } from '../job.entity';\nimport { JobExecutionLogEntryProps } from '../value-objects/job-execution-log-entry.vo'; // For JobLog structure\nimport { JobProgressData } from '../value-objects/job-progress.vo';\n\n// Re-export JobId for convenience if it's just a string, or define it.\n// Assuming JobIdVO.value is used, which is string.\nexport type JobId = string;\nexport type WorkerId = string;\nexport type QueueName = string;\n\nexport type JobEventType =\n  | 'job.added'\n  | 'job.active'\n  | 'job.completed'\n  | 'job.failed'\n  | 'job.progress'\n  | 'job.stalled'\n  | 'job.delayed'\n  | 'job.promoted'\n  | 'job.removed'\n  | 'job.log_added'\n  | 'queue.paused'\n  | 'queue.resumed'\n  | 'worker.error';\n\n// --- Payload Interfaces ---\n\n// Using JobEntity itself for job payloads might be too heavy or cause circular deps\n// if JobEntity methods emit events. Using a simpler representation or relevant parts.\n// For now, let's use relevant parts or define simplified Job-like interfaces for events.\n// Or, we can use `Partial<JobEntityProps>` if appropriate.\n// Design doc mentioned: `job: Job<any, any>` or `job?: Job<any,any>`.\n// Let's use a simplified Job representation for events to avoid full entity dependency.\n// However, the design doc explicitly uses `Job<any,any>`.\n// Let's try to use JobEntity for now and see if it creates issues.\n\nexport interface JobAddedPayload {\n  queueName: QueueName;\n  jobId: JobId;\n  job: JobEntity<any, any>; // Full job entity as per design doc\n}\n\nexport interface JobActivePayload {\n  queueName: QueueName;\n  jobId: JobId;\n  job: JobEntity<any, any>; // Full or partial job entity\n}\n\nexport interface JobCompletedPayload<TResult = any> {\n  queueName: QueueName;\n  jobId: JobId;\n  result: TResult;\n  job?: JobEntity<any, TResult>; // Optional full job entity\n}\n\nexport interface JobFailedPayload {\n  queueName: QueueName;\n  jobId: JobId;\n  error: Error; // Serialized error might be better: { name: string, message: string, stack?: string }\n  job?: JobEntity<any, any>; // Optional full job entity\n}\n\nexport interface JobProgressPayload {\n  queueName: QueueName;\n  jobId: JobId;\n  progress: JobProgressData;\n}\n\nexport interface JobStalledPayload {\n  queueName: QueueName;\n  jobId: JobId;\n}\n\nexport interface JobDelayedPayload {\n  queueName: QueueName;\n  jobId: JobId;\n  delayUntil: number; // Timestamp in milliseconds\n}\n\nexport interface JobPromotedPayload {\n  queueName: QueueName;\n  jobId: JobId;\n}\n\nexport interface JobRemovedPayload {\n  queueName: QueueName;\n  jobId: JobId;\n}\n\n// JobExecutionLogEntryProps is { timestamp: number; message: string; level: LogLevel; details?: Record<string, any>; }\n// which matches the JobLog in design doc.\nexport interface JobLogAddedPayload {\n  queueName: QueueName;\n  jobId: JobId;\n  logEntry: JobExecutionLogEntryProps;\n}\n\n// Queue-Level Events\nexport interface QueuePausedPayload {\n  queueName: QueueName;\n}\n\nexport interface QueueResumedPayload {\n  queueName: QueueName;\n}\n\n// Worker-Level Events\nexport interface WorkerErrorPayload {\n  queueName: QueueName;\n  workerId: WorkerId;\n  error: Error; // Again, consider serialized error\n}\n\n// A type map for event payloads to allow for typed listeners later\nexport interface JobEventPayloadMap {\n  'job.added': JobAddedPayload;\n  'job.active': JobActivePayload;\n  'job.completed': JobCompletedPayload<any>; // Generic result type\n  'job.failed': JobFailedPayload;\n  'job.progress': JobProgressPayload;\n  'job.stalled': JobStalledPayload;\n  'job.delayed': JobDelayedPayload;\n  'job.promoted': JobPromotedPayload;\n  'job.removed': JobRemovedPayload;\n  'job.log_added': JobLogAddedPayload;\n  'queue.paused': QueuePausedPayload;\n  'queue.resumed': QueueResumedPayload;\n  'worker.error': WorkerErrorPayload;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-processing.types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `tool_calls` must match one of the following formats: camelCase","line":37,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":37,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `tool_call_id` must match one of the following formats: camelCase","line":38,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":38,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1500,1503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1500,1503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1556,1559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1556,1559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1588,1591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1588,1591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1999,2002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1999,2002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2371,2374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2371,2374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/job-processing.types.ts\n\nimport { ActivityHistoryEntry } from './value-objects/activity-history-entry.vo';\n\n// Based on usage in generic-agent-executor.service.ts\n\n/**\n * Status of the agent's execution attempt for a job.\n */\nexport type AgentExecutorStatus =\n  | 'SUCCESS'\n  | 'FAILURE_LLM'\n  | 'FAILURE_TOOL'\n  | 'FAILURE_MAX_ITERATIONS'\n  | 'FAILURE_INTERNAL'\n  | 'PENDING_REPLAN'; // Added based on replan logic\n\n/**\n * Represents a call to a tool made by the language model.\n */\nexport interface LanguageModelMessageToolCall {\n  id: string;\n  type: 'function'; // Currently, only 'function' is common\n  function: {\n    name: string;\n    arguments: string; // JSON string\n  };\n}\n\n/**\n * Represents a message in the conversation with the language model.\n * Standard structure, e.g., compatible with Vercel AI SDK.\n */\nexport interface LanguageModelMessage {\n  role: 'system' | 'user' | 'assistant' | 'tool';\n  content: string | null;\n  tool_calls?: LanguageModelMessageToolCall[];\n  tool_call_id?: string;\n}\n\n/**\n * Represents an entry in the execution history of an agent for a job.\n * This logs significant events, tool calls, and errors during the execution.\n */\nexport interface ExecutionHistoryEntry {\n  timestamp: Date;\n  type: 'llm_error' | 'tool_error' | 'system_error' | 'tool_call' | 'replan_attempt' | string; // string for future extensibility\n  name: string; // e.g., 'LLM Generation', tool name, 'UnhandledExecutorError', 'ReplanAttempt'\n  params?: any; // For tool_call, or context for replan\n  result?: any; // For tool_call\n  error?: any; // Could be Error object, string, or structured error representation\n  isCritical?: boolean; // For tool_error, indicates if it stopped execution\n  message?: string; // For replan_attempt or other informational entries\n}\n\n/**\n * Represents the result of an agent's execution of a job.\n */\nexport interface AgentExecutorResult {\n  jobId: string;\n  status: AgentExecutorStatus;\n  message: string;\n  output?: any; // Final output of the job, if any\n  history: ReadonlyArray<ActivityHistoryEntry>; // Conversation history\n  errors: ReadonlyArray<ExecutionHistoryEntry>; // Execution errors encountered\n}\n\n/**\n * Information about a critical tool failure.\n */\nexport interface CriticalToolFailureInfo {\n    toolName: string;\n    errorType: string;\n    message: string;\n    details?: any;\n    isRecoverable: boolean; // Should typically be false if critical\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job.entity.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RetryStrategyOptions' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RepeatOptions' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[858,861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[858,861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1367,1370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1367,1370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1382,1385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1382,1385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2412,2415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2412,2415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2427,2430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2427,2430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2611,2614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2611,2614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2620,2623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2620,2623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6230,6233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6230,6233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/job.entity.ts\nimport { AbstractEntity, EntityProps } from '@/core/common/base.entity';\n\nimport { DomainError, ValueError } from '@/domain/common/errors';\n\nimport { JobExecutionLogEntryProps } from './value-objects/job-execution-log-entry.vo';\nimport { JobExecutionLogsVO } from './value-objects/job-execution-logs.vo';\nimport { JobIdVO } from './value-objects/job-id.vo';\nimport { JobOptionsVO, IJobOptions, RetryStrategyOptions, RepeatOptions } from './value-objects/job-options.vo';\nimport { JobPriorityVO } from './value-objects/job-priority.vo';\nimport { JobProgressVO, JobProgressData } from './value-objects/job-progress.vo';\nimport { JobStatusVO, JobStatusEnum } from './value-objects/job-status.vo';\n\n\n// Interface for properties required to construct a JobEntity\nexport interface JobEntityConstructionProps<TData = any> {\n  id?: string | JobIdVO; // Optional: if not provided, one will be generated\n  queueName: string;\n  jobName: string; // Name/type of the job\n  payload: TData;\n  opts?: IJobOptions; // Uses the interface for flexibility in creation\n}\n\n// Interface for the internal state of JobEntity\n// All complex types are VOs. Timestamps are stored as numbers (epoch ms) for DB compatibility\n// but can be wrapped by Date or a TimestampVO on access if needed by domain logic.\nexport interface JobEntityProps<TData = any, TResult = any> extends EntityProps<JobIdVO> {\n  queueName: string;\n  jobName: string;\n  payload: Readonly<TData>;\n  opts: JobOptionsVO;\n\n  status: JobStatusVO;\n  priority: JobPriorityVO; // Derived from opts, but stored for direct access/querying\n\n  progress: JobProgressVO;\n  returnValue?: Readonly<TResult>;\n  failedReason?: string; // Primary error message for failure\n\n  attemptsMade: number;\n  // maxAttempts is part of opts.retryStrategy\n\n  createdAt: number; // Store as epoch milliseconds\n  updatedAt: number; // Store as epoch milliseconds\n  processAt?: number; // For DELAYED jobs: when it should be processed (epoch ms)\n  startedAt?: number; // Timestamp when processing started (epoch ms)\n  finishedAt?: number; // Timestamp when job completed or finally failed (epoch ms)\n\n  executionLogs: JobExecutionLogsVO;\n\n  // Worker locking mechanism\n  lockedByWorkerId?: string;\n  lockExpiresAt?: number; // Epoch ms\n\n  // For repeatable jobs (key derived from repeat options)\n  repeatJobKey?: string;\n}\n\nexport class JobEntity<TData = any, TResult = any> extends AbstractEntity<JobIdVO, JobEntityProps<TData, TResult>> {\n  private constructor(props: JobEntityProps<TData, TResult>) {\n    super(props);\n  }\n\n  public static create<D = any, R = any>(\n    constructProps: JobEntityConstructionProps<D>,\n  ): JobEntity<D, R> {\n    if (!constructProps.queueName || constructProps.queueName.trim() === '') {\n      throw new ValueError('Job creation requires a queueName.');\n    }\n    if (!constructProps.jobName || constructProps.jobName.trim() === '') {\n      throw new ValueError('Job creation requires a jobName.');\n    }\n    if (constructProps.payload === undefined) {\n      throw new ValueError('Job creation requires a payload.');\n    }\n\n    const id = constructProps.id instanceof JobIdVO ? constructProps.id : JobIdVO.create(constructProps.id);\n    const jobOptions = JobOptionsVO.create(constructProps.opts);\n    const nowMs = Date.now();\n\n    let initialStatus = JobStatusVO.pending();\n    let processAt: number | undefined = undefined;\n    if (jobOptions.delay > 0) {\n      initialStatus = JobStatusVO.delayed();\n      processAt = nowMs + jobOptions.delay;\n    }\n\n    const props: JobEntityProps<D, R> = {\n      id,\n      queueName: constructProps.queueName,\n      jobName: constructProps.jobName,\n      payload: Object.freeze(constructProps.payload) as Readonly<D>, // Ensure payload is immutable\n      opts: jobOptions,\n      status: initialStatus,\n      priority: JobPriorityVO.create(jobOptions.priority),\n      progress: JobProgressVO.initial(),\n      attemptsMade: 0,\n      createdAt: nowMs,\n      updatedAt: nowMs,\n      processAt: processAt,\n      executionLogs: JobExecutionLogsVO.empty(),\n    };\n\n    return new JobEntity<D, R>(props);\n  }\n\n  // --- Accessors ---\n  get queueName(): string { return this.props.queueName; }\n  get jobName(): string { return this.props.jobName; }\n  get payload(): Readonly<TData> { return this.props.payload; }\n  get opts(): JobOptionsVO { return this.props.opts; }\n  get status(): JobStatusVO { return this.props.status; }\n  get priority(): JobPriorityVO { return this.props.priority; }\n  get progress(): JobProgressVO { return this.props.progress; }\n  get returnValue(): Readonly<TResult> | undefined { return this.props.returnValue; }\n  get failedReason(): string | undefined { return this.props.failedReason; }\n  get attemptsMade(): number { return this.props.attemptsMade; }\n  get maxAttempts(): number { return this.opts.attempts; } // From JobOptionsVO\n\n  get createdAt(): Date { return new Date(this.props.createdAt); }\n  get updatedAt(): Date { return new Date(this.props.updatedAt); }\n  get processAt(): Date | undefined { return this.props.processAt ? new Date(this.props.processAt) : undefined; }\n  get startedAt(): Date | undefined { return this.props.startedAt ? new Date(this.props.startedAt) : undefined; }\n  get finishedAt(): Date | undefined { return this.props.finishedAt ? new Date(this.props.finishedAt) : undefined; }\n\n  get executionLogs(): JobExecutionLogsVO { return this.props.executionLogs; }\n  get lockedByWorkerId(): string | undefined { return this.props.lockedByWorkerId; }\n  get lockExpiresAt(): Date | undefined { return this.props.lockExpiresAt ? new Date(this.props.lockExpiresAt) : undefined; }\n  get repeatJobKey(): string | undefined { return this.props.repeatJobKey; }\n\n\n  // --- Mutators (internal state changes, persistence handled by repository) ---\n\n  private touch(): void {\n    this.props.updatedAt = Date.now();\n  }\n\n  public setProgress(progressData: JobProgressData): void {\n    this.props.progress = JobProgressVO.create(progressData);\n    this.touch();\n    // Event 'job.progress' should be emitted by the service calling this, after saving.\n  }\n\n  public addLog(message: string, level: JobExecutionLogEntryProps['level'] = 'INFO', details?: Record<string, any>): void {\n    this.props.executionLogs = this.props.executionLogs.addLog(message, level, details);\n    this.touch();\n    // Event 'job.log_added' should be emitted by the service calling this, after saving.\n  }\n\n  // --- State Transition Methods ---\n  // These methods only update the in-memory state of the entity.\n  // The repository is responsible for persisting these changes atomically.\n\n  public moveToActive(workerId: string, lockDurationMs: number): boolean {\n    if (!this.status.is(JobStatusEnum.PENDING) && !this.status.is(JobStatusEnum.DELAYED)) {\n      // DELAYED jobs should be promoted to PENDING by scheduler first\n      console.warn(`Job ${this.id.value} cannot be moved to ACTIVE from status ${this.status.value}`);\n      return false;\n    }\n    this.props.status = JobStatusVO.active();\n    this.props.attemptsMade += 1;\n    this.props.startedAt = Date.now();\n    this.props.lockedByWorkerId = workerId;\n    this.props.lockExpiresAt = Date.now() + lockDurationMs;\n    this.touch();\n    return true;\n  }\n\n  public renewLock(newLockExpiresAtMs: number, workerId: string): boolean {\n    if (!this.status.is(JobStatusEnum.ACTIVE) || this.props.lockedByWorkerId !== workerId) {\n      console.warn(`Job ${this.id.value} lock cannot be renewed. Status: ${this.status.value}, LockedBy: ${this.props.lockedByWorkerId}`);\n      return false;\n    }\n    this.props.lockExpiresAt = newLockExpiresAtMs;\n    this.touch();\n    return true;\n  }\n\n  public moveToCompleted(resultValue: TResult): boolean {\n    if (!this.status.is(JobStatusEnum.ACTIVE)) {\n      // Potentially log warning if trying to complete a non-active job\n      return false;\n    }\n    this.props.status = JobStatusVO.completed();\n    this.props.returnValue = Object.freeze(resultValue) as Readonly<TResult>;\n    this.props.finishedAt = Date.now();\n    this.props.progress = JobProgressVO.create(100); // Mark as 100% on completion\n    this.clearLock();\n    this.touch();\n    return true;\n  }\n\n  private clearLock(): void {\n    this.props.lockedByWorkerId = undefined;\n    this.props.lockExpiresAt = undefined;\n  }\n\n  public moveToFailed(reason: string): boolean {\n     if (this.status.isTerminal()) return false; // Already completed or failed\n\n    this.props.status = JobStatusVO.failed();\n    this.props.failedReason = reason;\n    this.props.finishedAt = Date.now();\n    this.clearLock();\n    this.touch();\n    return true;\n  }\n\n  public moveToDelayed(newProcessAtMs: number): boolean {\n    if (this.status.isTerminal()) return false;\n\n    this.props.status = JobStatusVO.delayed();\n    this.props.processAt = newProcessAtMs;\n    this.clearLock(); // If it was active and is being re-delayed for retry\n    this.touch();\n    return true;\n  }\n\n  public promoteToPending(): boolean {\n    if (!this.status.is(JobStatusEnum.DELAYED) && !this.status.is(JobStatusEnum.WAITING_CHILDREN)) {\n      // Only DELAYED or WAITING_CHILDREN jobs can be directly promoted to PENDING by scheduler\n      return false;\n    }\n    this.props.status = JobStatusVO.pending();\n    this.props.processAt = undefined; // Clear processAt if it was delayed\n    this.touch();\n    return true;\n  }\n\n  public isProcessable(currentTimeMs: number = Date.now()): boolean {\n    return this.status.is(JobStatusEnum.PENDING) &&\n           (!this.props.processAt || this.props.processAt <= currentTimeMs);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/ports/i-backoff-strategy.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/ports/i-retry-policy.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/ports/job-repository.interface.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobStatusVO' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobStatusEnum' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":36},{"ruleId":"no-redeclare","severity":2,"message":"'IJobRepository' is already defined.","line":17,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":17,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[696,699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[696,699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[701,704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[701,704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[829,832],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[829,832],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[834,837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[834,837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1038,1041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1038,1041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1043,1046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1043,1046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1933,1936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1933,1936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1938,1941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1938,1941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2364,2367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2364,2367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2369,2372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2369,2372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2780,2783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2780,2783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2785,2788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2785,2788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2972,2975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2972,2975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2977,2980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2977,2980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3129,3132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3129,3132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3134,3137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3134,3137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4211,4214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4211,4214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4216,4219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4216,4219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/ports/job-repository.interface.ts\nimport { Result } from '@/shared/result';\n\nimport { JobEntity } from '../job.entity';\nimport { JobIdVO } from '../value-objects/job-id.vo';\nimport { JobStatusVO, JobStatusEnum } from '../value-objects/job-status.vo'; // Assuming JobStatusType is JobStatusEnum\n\nimport {\n  JobSearchFilters,\n  PaginationOptions,\n  PaginatedJobsResult,\n  JobCountsByStatus\n} from './job-repository.types';\n\nexport const IJobRepository = Symbol('IJobRepository');\n\nexport interface IJobRepository {\n  /**\n   * Saves a job (creates if new, updates if existing based on ID).\n   * Implementations must handle upsert logic.\n   */\n  save(job: JobEntity<any, any>): Promise<Result<void, Error>>;\n\n  /**\n   * Finds a job by its ID.\n   */\n  findById(id: JobIdVO): Promise<Result<JobEntity<any, any> | null, Error>>;\n\n  /**\n   * Finds multiple jobs by their IDs.\n   * Returns only found jobs. Order may not be guaranteed unless specified.\n   */\n  findByIds(ids: JobIdVO[]): Promise<Result<JobEntity<any, any>[], Error>>;\n\n  /**\n   * Finds processable jobs for a given queue.\n   * This is a critical method for workers. Implementations must handle:\n   * - Filtering by queueName, status (PENDING), and processAt <= now.\n   * - Ordering by priority and then by createdAt (FIFO/LIFO based on job options or queue config).\n   * - Atomically locking the fetched jobs (e.g., setting status to ACTIVE, lockedByWorkerId, lockExpiresAt).\n   * @param queueName The name of the queue.\n   * @param workerId The ID of the worker attempting to fetch jobs (for locking).\n   * @param limit Max number of jobs to fetch.\n   * @param now Current timestamp for processAt comparison.\n   */\n  findAndLockProcessableJobs(\n    queueName: string,\n    workerId: string,\n    limit: number,\n    nowTimestampMs: number, // Pass as epoch ms for direct DB comparison\n    lockDurationMs: number,\n  ): Promise<Result<JobEntity<any, any>[], Error>>;\n\n  /**\n   * Finds active jobs whose lock has expired (stalled jobs).\n   * @param queueName Optional: filter by queue name.\n   * @param lockExpiresAtBefore Timestamp to consider locks expired (e.g., Date.now()).\n   * @param limit Max number of stalled jobs to fetch.\n   */\n  findStalledJobs(\n    lockExpiresAtBefore: number, // Epoch ms\n    limit: number,\n    queueName?: string,\n  ): Promise<Result<JobEntity<any, any>[], Error>>;\n\n  /**\n   * Finds delayed jobs that are ready to be promoted to pending.\n   * @param queueName Optional: filter by queue name.\n   * @param nowTimestampMs Current timestamp for processAt comparison.\n   * @param limit Max number of jobs to promote.\n   */\n  findDelayedJobsToPromote(\n    nowTimestampMs: number, // Epoch ms\n    limit: number,\n    queueName?: string,\n  ): Promise<Result<JobEntity<any, any>[], Error>>;\n\n  /**\n   * Finds all jobs associated with a specific repeat key.\n   */\n  findJobsByRepeatKey(\n    queueName: string,\n    repeatKey: string\n  ): Promise<Result<JobEntity<any, any>[], Error>>;\n\n  /**\n   * Finds all jobs that have a specific parent job ID.\n   */\n  findJobsByParentId(parentId: JobIdVO): Promise<Result<JobEntity<any, any>[], Error>>;\n\n  /**\n   * Gets counts of jobs grouped by status for a given queue.\n   */\n  getJobCountsByStatus(queueName: string): Promise<Result<JobCountsByStatus, Error>>;\n\n  /**\n   * Deletes a job by its ID.\n   */\n  delete(id: JobIdVO): Promise<Result<void, Error>>;\n\n  /**\n   * Removes completed jobs older than a certain date or up to a limit for a queue.\n   * @returns The number of jobs removed.\n   */\n  removeCompletedJobs(\n    queueName: string,\n    olderThanTimestampMs?: number, // Epoch ms\n    limit?: number,\n  ): Promise<Result<number, Error>>;\n\n  /**\n   * Removes failed jobs older than a certain date or up to a limit for a queue.\n   * @returns The number of jobs removed.\n   */\n  removeFailedJobs(\n    queueName: string,\n    olderThanTimestampMs?: number, // Epoch ms\n    limit?: number,\n  ): Promise<Result<number, Error>>;\n\n  /**\n   * Searches for jobs based on filters and pagination options.\n   * Primarily for admin/UI purposes.\n   */\n  search(\n    filters: JobSearchFilters,\n    pagination: PaginationOptions,\n  ): Promise<Result<PaginatedJobsResult<any, any>, Error>>;\n\n  // Potentially more specific update methods if needed for performance,\n  // though `save` should handle general updates.\n  // Example:\n  // updateJobStatus(jobId: JobIdVO, status: JobStatusVO, previousStatus?: JobStatusVO): Promise<Result<void, Error>>;\n  // updateJobProgress(jobId: JobIdVO, progress: JobProgressVO): Promise<Result<void, Error>>;\n  // addJobLog(jobId: JobIdVO, logEntry: JobExecutionLogEntryVO): Promise<Result<void, Error>>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/ports/job-repository.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[830,833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[830,833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[845,848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[845,848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/ports/job-repository.types.ts\nimport { JobEntity } from '../job.entity';\nimport { JobIdVO } from '../value-objects/job-id.vo';\nimport { JobStatusEnum } from '../value-objects/job-status.vo';\n\nexport interface JobSearchFilters {\n  queueName?: string;\n  jobName?: string;\n  status?: JobStatusEnum | JobStatusEnum[];\n  parentId?: JobIdVO | string;\n  repeatJobKey?: string;\n  // Add other filterable fields as needed, e.g., date ranges for createdAt/finishedAt\n  createdAtFrom?: Date;\n  createdAtTo?: Date;\n}\n\nexport interface PaginationOptions {\n  page?: number; // 1-indexed page number\n  limit?: number; // Number of items per page\n  sortBy?: string; // Field to sort by (implementation will map to valid column names)\n  sortOrder?: 'ASC' | 'DESC';\n}\n\nexport interface PaginatedJobsResult<TData = any, TResult = any> {\n  jobs: JobEntity<TData, TResult>[];\n  totalItems: number;\n  totalPages: number;\n  currentPage: number;\n  itemsPerPage: number;\n}\n\n// Type for getJobCountsByStatus result\nexport type JobCountsByStatus = Partial<Record<JobStatusEnum, number>> & {\n  waiting?: number; // Alias for PENDING, common in BullMQ\n  total?: number;   // Overall total\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/strategies/exponential-backoff.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/strategies/fixed-backoff.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/strategies/linear-backoff.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/activity-history-entry.vo.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `tool_calls` must match one of the following formats: camelCase","line":34,"column":12,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":34,"endColumn":22},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Parameter name `tool_calls` must match one of the following formats: camelCase","line":48,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":48,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `tool_calls` must match one of the following formats: camelCase","line":73,"column":7,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":73,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Method name `tool_calls` must match one of the following formats: camelCase","line":98,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":98,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/activity-history-entry.vo.ts\nimport { ValueObject } from '@/core/common/value-objects/base.vo';\n\nimport { DomainError, ValueError } from '@/domain/common/errors';\n\nimport { Result, ok, error } from '@/shared/result';\n\n// Based on usage in generic-agent-executor.service.ts\n// LanguageModelMessageToolCall is defined in generic-agent-executor.service.ts,\n// it should ideally be in a shared location. For now, let's duplicate a minimal version or make it `any`.\n// To avoid circular dependencies or too much complexity now, we'll use `any` for tool_calls structure.\ninterface MinimalToolCall {\n  id: string;\n  type: 'function';\n  function: {\n    name: string;\n    arguments: string;\n  };\n}\n\nexport enum HistoryEntryRoleType {\n  USER = 'user',\n  ASSISTANT = 'assistant',\n  TOOL_RESULT = 'tool_result',\n  SYSTEM = 'system', // Added as it's a common role, though not explicitly seen in create() calls\n}\n\nexport interface ActivityHistoryEntryProps {\n  readonly role: HistoryEntryRoleType;\n  readonly content: string | null; // Content can be null for assistant messages with only tool_calls\n  readonly timestamp: Date;\n  readonly toolName?: string;\n  readonly toolCallId?: string;\n  readonly tool_calls?: MinimalToolCall[]; // Simplified for now\n}\n\nexport class ActivityHistoryEntry extends ValueObject<ActivityHistoryEntryProps> {\n  private constructor(props: ActivityHistoryEntryProps) {\n    super(props);\n  }\n\n  public static create(\n    role: HistoryEntryRoleType,\n    content: string | null,\n    timestamp?: Date,\n    toolName?: string,\n    toolCallId?: string,\n    tool_calls?: MinimalToolCall[],\n  ): Result<ActivityHistoryEntry, ValueError> {\n    if (!Object.values(HistoryEntryRoleType).includes(role)) {\n      return error(new ValueError('Invalid role for history entry.'));\n    }\n    if (role === HistoryEntryRoleType.TOOL_RESULT && !toolCallId) {\n      return error(new ValueError('toolCallId is required for tool_result role.'));\n    }\n    if (role === HistoryEntryRoleType.TOOL_RESULT && !toolName) {\n        // Not strictly required by observed calls, but good practice\n        // return error(new ValueError('toolName is required for tool_result role.'));\n    }\n    if (tool_calls && !Array.isArray(tool_calls)) {\n        return error(new ValueError('tool_calls must be an array if provided.'));\n    }\n    // Content can be null (e.g. assistant message with only tool calls)\n    // but not undefined if it's not a tool_call only message.\n    // For simplicity, allowing null content broadly.\n\n    const props: ActivityHistoryEntryProps = {\n      role,\n      content,\n      timestamp: timestamp || new Date(),\n      toolName,\n      toolCallId,\n      tool_calls,\n    };\n    return ok(new ActivityHistoryEntry(props));\n  }\n\n  role(): HistoryEntryRoleType {\n    return this.props.role;\n  }\n\n  content(): string | null {\n    return this.props.content;\n  }\n\n  timestamp(): Date {\n    return this.props.timestamp;\n  }\n\n  toolName(): string | undefined {\n    return this.props.toolName;\n  }\n\n  toolCallId(): string | undefined {\n    return this.props.toolCallId;\n  }\n\n  tool_calls(): MinimalToolCall[] | undefined {\n    return this.props.tool_calls;\n  }\n\n  // equals, toJSON etc. can be added as needed\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/activity-history.vo.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValueError' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Result' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ok' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActivityHistoryEntryProps' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/activity-history.vo.ts\nimport { ValueObject } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport { ActivityHistoryEntry, ActivityHistoryEntryProps } from './activity-history-entry.vo'; // Assuming .vo extension\n\nexport interface ActivityHistoryProps {\n  readonly entries: ReadonlyArray<ActivityHistoryEntry>;\n}\n\nexport class ActivityHistory extends ValueObject<ActivityHistoryProps> {\n  private constructor(props: ActivityHistoryProps) {\n    super(props);\n  }\n\n  public static create(initialEntries?: ActivityHistoryEntry[]): ActivityHistory {\n    return new ActivityHistory({ entries: initialEntries ? Object.freeze([...initialEntries]) : Object.freeze([]) });\n  }\n\n  public addEntry(entry: ActivityHistoryEntry): ActivityHistory {\n    if (!entry || !(entry instanceof ActivityHistoryEntry)) {\n      // This case should ideally not happen if entry is type-checked, but as a safeguard.\n      // Consider if an error Result should be returned if create can fail.\n      // For now, assuming valid entry is passed.\n      console.error('Invalid entry passed to ActivityHistory.addEntry');\n      return this;\n    }\n    const newEntries = [...this.props.entries, entry];\n    return new ActivityHistory({ entries: Object.freeze(newEntries) });\n  }\n\n  public entries(): ReadonlyArray<ActivityHistoryEntry> {\n    return this.props.entries;\n  }\n\n  public isEmpty(): boolean {\n    return this.props.entries.length === 0;\n  }\n\n  public getProps(): ActivityHistoryProps { // Method to get underlying props if needed elsewhere\n    return this.props;\n  }\n\n  // Consider adding other useful methods: lastEntry(), findEntryById(), etc.\n  // For immutability, all modification methods should return a new ActivityHistory instance.\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/attempt-count.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":23,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/attempt-count.vo.ts\nimport { z } from 'zod';\n\nimport { ValueError } from '@/core/common/errors';\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nconst attemptCountSchema = z.number()\n  .int({ message: \"Attempt count must be an integer.\" })\n  .min(0, { message: \"Attempt count cannot be negative.\" });\n\nexport interface AttemptCountProps extends ValueObjectProps {\n  value: number;\n}\n\nexport class AttemptCountVO extends AbstractValueObject<AttemptCountProps> {\n  private constructor(props: AttemptCountProps) {\n    super(props);\n  }\n\n  public static create(count: number): AttemptCountVO {\n    try {\n      attemptCountSchema.parse(count);\n    } catch (e) {\n      if (e instanceof z.ZodError) {\n        throw new ValueError(`Invalid attempt count: ${e.errors.map(err => err.message).join(', ')}`);\n      }\n      throw e;\n    }\n    return new AttemptCountVO({ value: count });\n  }\n\n  public get value(): number {\n    return this.props.value;\n  }\n\n  public increment(): AttemptCountVO {\n    return new AttemptCountVO({ value: this.props.value + 1 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/backoff-strategy-type.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/backoff-type.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":74},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":33,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":33,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/backoff-type.vo.ts\nimport { z } from 'zod';\n\nimport { ValueError } from '@/core/common/errors';\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\n\nimport { IBackoffStrategy } from '../ports/i-backoff-strategy.interface';\n\n// AttemptCountVO no longer needed directly here as strategies are imported\n\nimport { ExponentialBackoffStrategy } from '../strategies/exponential-backoff.strategy';\nimport { FixedBackoffStrategy } from '../strategies/fixed-backoff.strategy';\nimport { LinearBackoffStrategy } from '../strategies/linear-backoff.strategy';\n\nimport { BackoffStrategyType } from './backoff-strategy-type.enum';\nimport { DelayMillisecondsVO } from './delay-milliseconds.vo';\n\nconst backoffTypeSchema = z.nativeEnum(BackoffStrategyType);\n\nexport interface BackoffTypeProps extends ValueObjectProps {\n  value: BackoffStrategyType;\n}\n\nexport class BackoffTypeVO extends AbstractValueObject<BackoffTypeProps> {\n  private constructor(props: BackoffTypeProps) {\n    super(props);\n  }\n\n  public static create(type: BackoffStrategyType): BackoffTypeVO {\n    try {\n      backoffTypeSchema.parse(type);\n    } catch (e) {\n      if (e instanceof z.ZodError) {\n        throw new ValueError(`Invalid backoff type: ${e.errors.map(err => err.message).join(', ')}`);\n      }\n      throw e;\n    }\n    return new BackoffTypeVO({ value: type });\n  }\n\n  public get value(): BackoffStrategyType {\n    return this.props.value;\n  }\n\n  /**\n   * Gets an instance of the configured backoff strategy.\n   * The RetryPolicyVO will typically call this and pass the necessary parameters.\n   */\n  public getStrategy(\n    baseDelay: DelayMillisecondsVO,\n    maxDelay?: DelayMillisecondsVO,\n    multiplier?: number // Specific to exponential\n  ): IBackoffStrategy {\n    switch (this.props.value) {\n      case BackoffStrategyType.EXPONENTIAL:\n        return new ExponentialBackoffStrategy(baseDelay, maxDelay, multiplier);\n      case BackoffStrategyType.LINEAR:\n        // Linear and Fixed strategies might not store these if they are passed to calculate()\n        return new LinearBackoffStrategy();\n      case BackoffStrategyType.FIXED:\n        return new FixedBackoffStrategy();\n      default:\n        // Should be caught by schema validation, but as a safeguard:\n        throw new Error(`Unknown backoff strategy type: ${this.props.value}`);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/delay-milliseconds.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":23,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/delay-milliseconds.vo.ts\nimport { z } from 'zod';\n\nimport { ValueError } from '@/core/common/errors';\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nconst delayMillisecondsSchema = z.number()\n  .int({ message: \"Delay milliseconds must be an integer.\" })\n  .nonnegative({ message: \"Delay milliseconds must be a non-negative integer.\" });\n\nexport interface DelayMillisecondsProps extends ValueObjectProps {\n  value: number;\n}\n\nexport class DelayMillisecondsVO extends AbstractValueObject<DelayMillisecondsProps> {\n  private constructor(props: DelayMillisecondsProps) {\n    super(props);\n  }\n\n  public static create(value: number): DelayMillisecondsVO {\n    try {\n      delayMillisecondsSchema.parse(value);\n    } catch (e) {\n      if (e instanceof z.ZodError) {\n        throw new ValueError(`Invalid delay milliseconds: ${e.errors.map(err => err.message).join(', ')}`);\n      }\n      throw e;\n    }\n    return new DelayMillisecondsVO({ value });\n  }\n\n  public static zero(): DelayMillisecondsVO {\n    return new DelayMillisecondsVO({ value: 0 });\n  }\n\n  public get value(): number {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/exponential-backoff.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `DEFAULT_MULTIPLIER` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":45},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":27,"column":16,"nodeType":"Identifier","messageId":"tooShort","endLine":27,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/exponential-backoff.vo.ts\nimport { z } from 'zod';\n\nimport { ValueError } from '@/core/common/errors';\n\nimport { AttemptCountVO } from './attempt-count.vo';\nimport { DelayMillisecondsVO } from './delay-milliseconds.vo';\n\nconst multiplierSchema = z.number().positive({ message: \"Multiplier must be a positive number.\" });\n\nexport class ExponentialBackoffVO {\n  private static readonly DEFAULT_MULTIPLIER = 2;\n  public readonly baseDelay: DelayMillisecondsVO;\n  public readonly maxDelay?: DelayMillisecondsVO;\n  public readonly multiplier: number;\n\n  private constructor(\n    baseDelay: DelayMillisecondsVO,\n    maxDelay?: DelayMillisecondsVO,\n    multiplier?: number\n  ) {\n    if (!baseDelay) throw new ValueError(\"Base delay is required for ExponentialBackoffVO.\");\n\n    if (multiplier !== undefined) {\n      try {\n        multiplierSchema.parse(multiplier);\n      } catch (e) {\n        if (e instanceof z.ZodError) {\n          throw new ValueError(`Invalid multiplier: ${e.errors.map(err => err.message).join(', ')}`);\n        }\n        throw e;\n      }\n    }\n    if (maxDelay && baseDelay.value > maxDelay.value) {\n        throw new ValueError('Base delay cannot be greater than max delay.');\n    }\n\n    this.baseDelay = baseDelay;\n    this.maxDelay = maxDelay;\n    this.multiplier = multiplier || ExponentialBackoffVO.DEFAULT_MULTIPLIER;\n  }\n\n  public static create(\n    baseDelay: DelayMillisecondsVO,\n    maxDelay?: DelayMillisecondsVO,\n    multiplier?: number\n  ): ExponentialBackoffVO {\n    return new ExponentialBackoffVO(baseDelay, maxDelay, multiplier);\n  }\n\n  public calculateDelay(attempts: AttemptCountVO): DelayMillisecondsVO {\n    if (attempts.value <= 0) {\n      return DelayMillisecondsVO.zero();\n    }\n\n    // attempts are 1-indexed for this formula (1st retry is attempt 1)\n    const calculatedValue =\n      this.baseDelay.value *\n      Math.pow(this.multiplier, attempts.value - 1);\n\n    let delayValue = Math.round(calculatedValue);\n\n    if (this.maxDelay && delayValue > this.maxDelay.value) {\n      delayValue = this.maxDelay.value;\n    }\n\n    return DelayMillisecondsVO.create(delayValue);\n  }\n\n  // No .equals method as this VO has behavior and identity might matter if we cache instances,\n  // or it's simply used as a calculator. If value-based equality is needed,\n  // an explicit .equals could be added comparing all properties.\n  // For now, it acts more as a configured calculator/strategy parameters holder.\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-depends-on.vo.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'a' is too short (< 2).","line":28,"column":24,"nodeType":"Identifier","messageId":"tooShort","endLine":28,"endColumn":25},{"ruleId":"id-length","severity":1,"message":"Identifier name 'b' is too short (< 2).","line":28,"column":27,"nodeType":"Identifier","messageId":"tooShort","endLine":28,"endColumn":28},{"ruleId":"id-length","severity":1,"message":"Identifier name 'a' is too short (< 2).","line":48,"column":21,"nodeType":"Identifier","messageId":"tooShort","endLine":48,"endColumn":22},{"ruleId":"id-length","severity":1,"message":"Identifier name 'b' is too short (< 2).","line":48,"column":24,"nodeType":"Identifier","messageId":"tooShort","endLine":48,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/job-depends-on.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { JobIdVO } from './job-id.vo'; // This file will need to be created\n\nexport interface JobDependsOnProps extends ValueObjectProps {\n  value: JobIdVO[]; // Array of JobIdVO instances\n}\n\nexport class JobDependsOnVO extends AbstractValueObject<JobDependsOnProps> {\n  private constructor(props: JobDependsOnProps) {\n    // Ensure the array is deeply immutable if JobIdVOs are mutable (they shouldn't be)\n    // For now, AbstractValueObject freezes `props`, and JobIdVO should be immutable.\n    super(props);\n  }\n\n  public static create(jobIds: JobIdVO[] = []): JobDependsOnVO {\n    // Ensure no duplicates for canonical representation, though AbstractValueObject.equals handles it by stringify\n    const uniqueJobIds = jobIds.reduce((acc, current) => {\n      if (!acc.find(item => item.equals(current))) {\n        acc.push(current);\n      }\n      return acc;\n    }, [] as JobIdVO[]);\n    // Sort by ID value for consistent equality checks if AbstractValueObject.equals is not used.\n    // However, with JSON.stringify in AbstractValueObject, order matters.\n    // For simplicity and consistency, let's sort them.\n    uniqueJobIds.sort((a, b) => a.value.localeCompare(b.value));\n    return new JobDependsOnVO({ value: uniqueJobIds });\n  }\n\n  /**\n   * Provides a copy of the JobIdVO array.\n   */\n  public get value(): ReadonlyArray<JobIdVO> {\n    return [...this.props.value]; // Return a new array (shallow copy)\n  }\n\n  /**\n   * Returns a new JobDependsOnVO with the added dependency.\n   * If the dependency already exists, returns the current instance.\n   */\n  public addDependency(jobId: JobIdVO): JobDependsOnVO {\n    if (this.props.value.some((id) => id.equals(jobId))) {\n      return this;\n    }\n    const newJobIds = [...this.props.value, jobId];\n    newJobIds.sort((a, b) => a.value.localeCompare(b.value)); // Maintain sort order\n    return new JobDependsOnVO({ value: newJobIds });\n  }\n\n  /**\n   * Returns a new JobDependsOnVO without the specified dependency.\n   * If the dependency doesn't exist, returns the current instance.\n   */\n  public removeDependency(jobId: JobIdVO): JobDependsOnVO {\n    const newJobIds = this.props.value.filter((id) => !id.equals(jobId));\n    if (newJobIds.length === this.props.value.length) {\n      return this;\n    }\n    // No need to re-sort as filter preserves order\n    return new JobDependsOnVO({ value: newJobIds });\n  }\n\n  public hasDependencies(): boolean {\n    return this.props.value.length > 0;\n  }\n\n  /**\n   * Provides an array of the string values of the Job IDs.\n   */\n  public getJobIdStrings(): string[] {\n    return this.props.value.map((jobIdVo) => jobIdVo.value);\n  }\n\n  // The .equals method is inherited from AbstractValueObject\n  // It will perform a JSON.stringify comparison of the props.\n  // For this to be reliable for an array of VOs, the VOs themselves must have\n  // a consistent string representation (which JobIdVO should, if based on a string ID)\n  // and the order of elements in the `value` array must be consistent.\n  // The sorting in `create` and `addDependency` helps ensure this.\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-execution-log-entry.vo.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[434,437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[434,437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[752,755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[752,755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1568,1571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1568,1571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/job-execution-log-entry.vo.ts\nimport { AbstractValueObject } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\nexport type LogLevel = 'INFO' | 'WARN' | 'ERROR' | 'DEBUG';\n\nexport interface JobExecutionLogEntryProps {\n  readonly timestamp: Date;\n  readonly message: string;\n  readonly level: LogLevel;\n  readonly details?: Record<string, any>; // Optional structured details\n}\n\nexport class JobExecutionLogEntryVO extends AbstractValueObject<JobExecutionLogEntryProps> {\n  private constructor(props: JobExecutionLogEntryProps) {\n    super(props);\n  }\n\n  public static create(\n    message: string,\n    level: LogLevel = 'INFO',\n    details?: Record<string, any>,\n    timestamp?: Date,\n  ): JobExecutionLogEntryVO {\n    if (!message || message.trim() === '') {\n      throw new ValueError('Log message cannot be empty.');\n    }\n    const validLevels: LogLevel[] = ['INFO', 'WARN', 'ERROR', 'DEBUG'];\n    if (!validLevels.includes(level)) {\n      throw new ValueError(`Invalid log level: ${level}. Must be one of ${validLevels.join(', ')}.`);\n    }\n\n    return new JobExecutionLogEntryVO(\n      Object.freeze({\n        timestamp: timestamp || new Date(),\n        message,\n        level,\n        details: details ? Object.freeze({ ...details }) : undefined,\n      }),\n    );\n  }\n\n  get timestamp(): Date { return this.props.timestamp; }\n  get message(): string { return this.props.message; }\n  get level(): LogLevel { return this.props.level; }\n  get details(): Record<string, any> | undefined { return this.props.details; }\n\n  public toString(): string {\n    return `[${this.props.timestamp.toISOString()}] [${this.props.level}] ${this.props.message}${this.props.details ? ' ' + JSON.stringify(this.props.details) : ''}`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-execution-logs.vo.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'a' is too short (< 2).","line":9,"column":42,"nodeType":"Identifier","messageId":"tooShort","endLine":9,"endColumn":43},{"ruleId":"id-length","severity":1,"message":"Identifier name 'b' is too short (< 2).","line":9,"column":45,"nodeType":"Identifier","messageId":"tooShort","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1317,1320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1317,1320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/job-execution-logs.vo.ts\nimport { AbstractValueObject } from '@/core/common/value-objects/base.vo';\n\nimport { JobExecutionLogEntryVO, JobExecutionLogEntryProps } from './job-execution-log-entry.vo'; // Assuming LogLevel is also exported or defined here\n\nexport class JobExecutionLogsVO extends AbstractValueObject<ReadonlyArray<JobExecutionLogEntryVO>> {\n  private constructor(props: ReadonlyArray<JobExecutionLogEntryVO>) {\n    // Sort logs by timestamp for consistent representation, oldest first\n    super(Object.freeze([...props].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime())));\n  }\n\n  public static create(entries?: JobExecutionLogEntryVO[]): JobExecutionLogsVO {\n    return new JobExecutionLogsVO(entries || []);\n  }\n\n  public static empty(): JobExecutionLogsVO {\n    return new JobExecutionLogsVO([]);\n  }\n\n  public get entries(): ReadonlyArray<JobExecutionLogEntryVO> {\n    return this.props;\n  }\n\n  public addEntry(entry: JobExecutionLogEntryVO): JobExecutionLogsVO {\n    // Returns a new VO instance with the added entry\n    return new JobExecutionLogsVO([...this.props, entry]);\n  }\n\n  public addLog(\n    message: string,\n    level?: JobExecutionLogEntryProps['level'], // Correctly reference LogLevel from props\n    details?: Record<string, any>,\n  ): JobExecutionLogsVO {\n    const entry = JobExecutionLogEntryVO.create(message, level, details);\n    return this.addEntry(entry);\n  }\n\n  public count(): number {\n    return this.props.length;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-id.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/job-id.vo.ts\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ValueError } from '@/core/common/errors';\nimport { AbstractValueObject } from '@/core/common/value-objects/base.vo';\n\nexport class JobIdVO extends AbstractValueObject<{ value: string }> {\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  public static create(value?: string): JobIdVO {\n    const id = value || uuidv4();\n    if (!JobIdVO.isValidUUID(id)) {\n      throw new ValueError('Invalid Job ID format. Must be a valid UUID.');\n    }\n    return new JobIdVO(id);\n  }\n\n  public static generate(): JobIdVO {\n    const newId = uuidv4();\n    if (!JobIdVO.isValidUUID(newId)) {\n      throw new Error('Generated UUID is invalid, which is unexpected.');\n    }\n    return new JobIdVO(newId);\n  }\n\n  private static isValidUUID(id: string): boolean {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(id);\n  }\n\n  public get value(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-name.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":23,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/job-name.vo.ts\nimport { z } from 'zod';\n\nimport { ValueError } from '@/core/common/errors';\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nconst jobNameSchema = z.string()\n  .min(1, { message: \"Job name cannot be empty.\" })\n  .max(255, { message: \"Job name must be 255 characters or less.\" }); // Added max length for good measure\n\nexport interface JobNameProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class JobNameVO extends AbstractValueObject<JobNameProps> {\n  private constructor(props: JobNameProps) {\n    super(props);\n  }\n\n  public static create(name: string): JobNameVO {\n    try {\n      jobNameSchema.parse(name);\n    } catch (e) {\n      if (e instanceof z.ZodError) {\n        throw new ValueError(`Invalid job name: ${e.errors.map(err => err.message).join(', ')}`);\n      }\n      throw e; // Re-throw other errors\n    }\n    return new JobNameVO({ value: name });\n  }\n\n  public get value(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-options.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-priority.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-progress.vo.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/job-progress.vo.ts\nimport { AbstractValueObject } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\n// Progress can be a simple percentage or a more complex object.\nexport type JobProgressData = number | Record<string, any>;\n\nexport class JobProgressVO extends AbstractValueObject<JobProgressData> {\n  private constructor(value: JobProgressData) {\n    super(value);\n  }\n\n  public static create(value: JobProgressData): JobProgressVO {\n    if (typeof value === 'number') {\n      if (value < 0 || value > 100) {\n        throw new ValueError('Progress percentage must be between 0 and 100.');\n      }\n    } else if (typeof value !== 'object' || value === null) {\n      throw new ValueError('Invalid job progress value. Must be a number or an object.');\n    }\n    // For objects, no specific validation here, but could be added if a schema is enforced.\n    return new JobProgressVO(value);\n  }\n\n  public static initial(): JobProgressVO {\n    return new JobProgressVO(0); // Default progress is 0 percent\n  }\n\n  public get value(): JobProgressData {\n    // Return a copy if it's an object to maintain immutability of the VO's internal state\n    if (typeof this.props === 'object' && this.props !== null) {\n      return { ...this.props };\n    }\n    return this.props;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-status.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-timestamp.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":25,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/job-timestamp.vo.ts\nimport { z } from 'zod';\n\nimport { ValueError } from '@/core/common/errors';\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\n// Timestamps are stored as epoch milliseconds\nconst jobTimestampSchema = z.number()\n  .int({ message: \"Timestamp must be an integer representing milliseconds.\" })\n  .nonnegative({ message: \"Timestamp must be non-negative.\" });\n\nexport interface JobTimestampProps extends ValueObjectProps {\n  value: number; // epoch milliseconds\n}\n\nexport class JobTimestampVO extends AbstractValueObject<JobTimestampProps> {\n  private constructor(props: JobTimestampProps) {\n    super(props);\n  }\n\n  public static create(dateOrMs: Date | number): JobTimestampVO {\n    const ms = typeof dateOrMs === 'number' ? dateOrMs : dateOrMs.getTime();\n    try {\n      jobTimestampSchema.parse(ms);\n    } catch (e) {\n      if (e instanceof z.ZodError) {\n        throw new ValueError(`Invalid timestamp: ${e.errors.map(err => err.message).join(', ')}`);\n      }\n      throw e;\n    }\n    return new JobTimestampVO({ value: ms });\n  }\n\n  public static now(): JobTimestampVO {\n    return new JobTimestampVO({ value: Date.now() });\n  }\n\n  public get value(): number { // Returns epoch milliseconds\n    return this.props.value;\n  }\n\n  public asDate(): Date {\n    return new Date(this.props.value);\n  }\n\n  // equals method is inherited from AbstractValueObject\n  public toString(): string {\n    return this.asDate().toISOString();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/max-attempts.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":23,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/max-attempts.vo.ts\nimport { z } from 'zod';\n\nimport { ValueError } from '@/core/common/errors';\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nconst maxAttemptsSchema = z.number()\n  .int({ message: \"Max attempts must be an integer.\" })\n  .positive({ message: \"Max attempts must be a positive integer.\" });\n\nexport interface MaxAttemptsProps extends ValueObjectProps {\n  value: number;\n}\n\nexport class MaxAttemptsVO extends AbstractValueObject<MaxAttemptsProps> {\n  private constructor(props: MaxAttemptsProps) {\n    super(props);\n  }\n\n  public static create(value: number): MaxAttemptsVO {\n    try {\n      maxAttemptsSchema.parse(value);\n    } catch (e) {\n      if (e instanceof z.ZodError) {\n        throw new ValueError(`Invalid max attempts: ${e.errors.map(err => err.message).join(', ')}`);\n      }\n      throw e;\n    }\n    return new MaxAttemptsVO({ value });\n  }\n\n  public get value(): number {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/retry-policy.vo.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":28,"nodeType":"Literal","endLine":4,"endColumn":50},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":52,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":52,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/job/value-objects/retry-policy.vo.ts\nimport { z } from 'zod';\n\nimport { ValueError } from '@/core/common/errors';\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { IBackoffStrategy } from '../ports/i-backoff-strategy.interface';\nimport { IRetryPolicy } from '../ports/i-retry-policy.interface';\n\nimport { AttemptCountVO } from './attempt-count.vo';\nimport { BackoffStrategyType } from './backoff-strategy-type.enum';\nimport { BackoffTypeVO } from './backoff-type.vo';\nimport { DelayMillisecondsVO } from './delay-milliseconds.vo';\nimport { MaxAttemptsVO } from './max-attempts.vo';\n\n\nexport const retryPolicyParamsSchema = z.object({\n  maxAttempts: z.number().int().positive().default(3),\n  delayBetweenAttemptsMs: z.number().int().nonnegative().default(1000), // Changed name for clarity\n  backoffType: z.nativeEnum(BackoffStrategyType).default(BackoffStrategyType.EXPONENTIAL),\n  maxDelayMs: z.number().int().nonnegative().optional(), // Changed name for clarity\n  exponentialMultiplier: z.number().positive().optional(),\n});\n\nexport type RetryPolicyParams = z.input<typeof retryPolicyParamsSchema>;\nexport type ValidatedRetryPolicyParams = z.output<typeof retryPolicyParamsSchema>;\n\nexport interface RetryPolicyProps extends ValueObjectProps {\n  maxAttempts: MaxAttemptsVO;\n  delayBetweenAttempts: DelayMillisecondsVO;\n  backoffType: BackoffTypeVO;\n  maxDelay?: DelayMillisecondsVO;\n  exponentialMultiplier?: number; // Specific to exponential, might be better in strategy config\n}\n\nexport class RetryPolicyVO extends AbstractValueObject<RetryPolicyProps> implements IRetryPolicy {\n  private readonly strategy: IBackoffStrategy;\n\n  private constructor(props: RetryPolicyProps) {\n    super(props);\n    this.strategy = this.props.backoffType.getStrategy(\n      this.props.delayBetweenAttempts,\n      this.props.maxDelay,\n      this.props.exponentialMultiplier\n    );\n  }\n\n  public static create(params: RetryPolicyParams = {}): RetryPolicyVO {\n    let validatedParams: ValidatedRetryPolicyParams;\n    try {\n      validatedParams = retryPolicyParamsSchema.parse(params);\n    } catch (e) {\n      if (e instanceof z.ZodError) {\n        throw new ValueError(`Invalid retry policy parameters: ${e.errors.map(err => err.message).join(', ')}`);\n      }\n      throw e;\n    }\n\n    const props: RetryPolicyProps = {\n      maxAttempts: MaxAttemptsVO.create(validatedParams.maxAttempts),\n      delayBetweenAttempts: DelayMillisecondsVO.create(validatedParams.delayBetweenAttemptsMs),\n      backoffType: BackoffTypeVO.create(validatedParams.backoffType),\n      maxDelay: validatedParams.maxDelayMs !== undefined ? DelayMillisecondsVO.create(validatedParams.maxDelayMs) : undefined,\n      exponentialMultiplier: validatedParams.exponentialMultiplier,\n    };\n    return new RetryPolicyVO(props);\n  }\n\n  public calculateDelay(attempts: AttemptCountVO): DelayMillisecondsVO {\n    if (!this.shouldRetry(attempts)) {\n      return DelayMillisecondsVO.zero();\n    }\n    return this.strategy.calculate(\n      this.props.delayBetweenAttempts,\n      attempts,\n      this.props.maxDelay\n    );\n  }\n\n  public shouldRetry(attempts: AttemptCountVO): boolean {\n    return attempts.value < this.props.maxAttempts.value;\n  }\n\n  // Getters for individual VOs\n  public get maxAttempts(): MaxAttemptsVO { return this.props.maxAttempts; }\n  public get delayBetweenAttempts(): DelayMillisecondsVO { return this.props.delayBetweenAttempts; }\n  public get backoffType(): BackoffTypeVO { return this.props.backoffType; }\n  public get maxDelay(): DelayMillisecondsVO | undefined { return this.props.maxDelay; }\n  public get exponentialMultiplier(): number | undefined { return this.props.exponentialMultiplier; }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/target-agent-role.vo.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":13,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":13,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ValueObject } from '@/core/common/value-objects/base.vo';\n\nimport { DomainError, ValueError } from '@/domain/common/errors';\n\nimport { Result, ok, error } from '@/shared/result';\n\ninterface TargetAgentRoleProps {\n  value: string;\n}\n\nexport class TargetAgentRoleVO extends ValueObject<TargetAgentRoleProps> {\n  private static readonly MIN_LENGTH = 1;\n  private static readonly MAX_LENGTH = 100; // Arbitrary max length\n\n  get value(): string {\n    return this.props.value;\n  }\n\n  private constructor(props: TargetAgentRoleProps) {\n    super(props);\n  }\n\n  public static create(role: string): Result<TargetAgentRoleVO, ValueError> {\n    if (role === null || role === undefined || typeof role !== 'string') {\n      return error(new ValueError('Target agent role must be a string.'));\n    }\n    if (role.length < this.MIN_LENGTH) {\n      return error(\n        new ValueError(\n          `Target agent role must be at least ${this.MIN_LENGTH} character long.`,\n        ),\n      );\n    }\n    if (role.length > this.MAX_LENGTH) {\n      return error(\n        new ValueError(\n          `Target agent role must be at most ${this.MAX_LENGTH} characters long.`,\n        ),\n      );\n    }\n    // Regex for typical role names (alphanumeric, underscores, hyphens)\n    if (!/^[a-zA-Z0-9_-]+$/.test(role)) {\n        return error(new ValueError('Target agent role contains invalid characters. Only alphanumeric, underscores, and hyphens are allowed.'));\n    }\n\n    return ok(new TargetAgentRoleVO({ value: role }));\n  }\n}\n\n// For convenience if the spec file uses TargetAgentRole directly\nexport { TargetAgentRoleVO as TargetAgentRole };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/llm-provider-config.entity.ts","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":14,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused caught errors must match /^_/u.","line":14,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/llm-provider-config/llm-provider-config.entity.ts\nimport { LLMApiKey } from './value-objects/llm-api-key.vo';\nimport { LLMProviderConfigId } from './value-objects/llm-provider-config-id.vo';\nimport { LLMProviderConfigName } from './value-objects/llm-provider-config-name.vo';\nimport { LLMProviderId } from './value-objects/llm-provider-id.vo';\n\n// Interface for optional base URL, could be a VO too if complex validation needed.\nexport class BaseUrl {\n  private readonly _value: string;\n  private constructor(value: string) {\n    // Basic validation for URL format\n    try {\n      new URL(value);\n    } catch (e) {\n      throw new Error('Invalid Base URL format.');\n    }\n    this._value = value;\n  }\n  public static create(value: string): BaseUrl {\n    return new BaseUrl(value);\n  }\n  public value(): string {\n    return this._value;\n  }\n  public equals(other?: BaseUrl): boolean {\n    return other instanceof BaseUrl && this._value === other._value;\n  }\n}\n\n\ninterface LLMProviderConfigProps {\n  id: LLMProviderConfigId;\n  name: LLMProviderConfigName;\n  providerId: LLMProviderId; // e.g., 'openai', 'deepseek'\n  apiKey: LLMApiKey;\n  baseUrl?: BaseUrl; // Optional custom base URL for the API\n  // otherOptions?: Record<string, any>; // For provider-specific settings\n  // createdAt: Date;\n  // updatedAt: Date;\n}\n\nexport class LLMProviderConfig {\n  private readonly _id: LLMProviderConfigId;\n  private readonly props: Readonly<Omit<LLMProviderConfigProps, 'id'>>;\n\n  private constructor(props: LLMProviderConfigProps) {\n    this._id = props.id;\n    const { id, ...otherProps } = props;\n    this.props = Object.freeze(otherProps);\n  }\n\n  public static create(props: {\n    id?: LLMProviderConfigId;\n    name: LLMProviderConfigName;\n    providerId: LLMProviderId;\n    apiKey: LLMApiKey;\n    baseUrl?: BaseUrl;\n    // otherOptions?: Record<string, any>;\n  }): LLMProviderConfig {\n    const configId = props.id || LLMProviderConfigId.generate();\n    return new LLMProviderConfig({\n      id: configId,\n      name: props.name,\n      providerId: props.providerId,\n      apiKey: props.apiKey, // The APIKey VO is passed directly\n      baseUrl: props.baseUrl,\n      // otherOptions: props.otherOptions || {},\n      // createdAt: new Date(),\n      // updatedAt: new Date(),\n    });\n  }\n\n  public id(): LLMProviderConfigId {\n    return this._id;\n  }\n\n  public name(): LLMProviderConfigName {\n    return this.props.name;\n  }\n\n  public providerId(): LLMProviderId {\n    return this.props.providerId;\n  }\n\n  // This method allows controlled access to the API key for internal use by LLM adapters/services.\n  // It should not be called casually.\n  public apiKeyForAdapter(): string {\n    return this.props.apiKey.forHeader(); // Use the controlled access method from LLMApiKey\n  }\n\n  public baseUrl(): BaseUrl | undefined {\n    return this.props.baseUrl;\n  }\n\n  // public otherOptions(): Record<string, any> {\n  //   return { ...this.props.otherOptions }; // Return a copy\n  // }\n\n  public equals(other?: LLMProviderConfig): boolean {\n    if (other === null || other === undefined) {\n      return false;\n    }\n    if (!(other instanceof LLMProviderConfig)) {\n      return false;\n    }\n    return this._id.equals(other._id);\n  }\n\n  // Example update methods, returning new instances\n  public changeName(newName: LLMProviderConfigName): LLMProviderConfig {\n    return new LLMProviderConfig({\n      ...this.props,\n      id: this._id,\n      name: newName,\n      // updatedAt: new Date(),\n    });\n  }\n\n  public changeApiKey(newApiKey: LLMApiKey): LLMProviderConfig {\n    return new LLMProviderConfig({\n      ...this.props,\n      id: this._id,\n      apiKey: newApiKey,\n      // updatedAt: new Date(),\n    });\n  }\n\n  public changeBaseUrl(newBaseUrl?: BaseUrl): LLMProviderConfig {\n    return new LLMProviderConfig({\n      ...this.props,\n      id: this._id,\n      baseUrl: newBaseUrl,\n      // updatedAt: new Date(),\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/ports/llm-provider-config-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-api-key.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-name.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":10,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-name.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface LLMProviderConfigNameProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class LLMProviderConfigName extends AbstractValueObject<LLMProviderConfigNameProps> {\n  private static readonly MIN_LENGTH = 1;\n  private static readonly MAX_LENGTH = 100;\n\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  private static validate(name: string): void {\n    if (name.trim().length < this.MIN_LENGTH) {\n      throw new Error(`LLMProviderConfig name must be at least ${this.MIN_LENGTH} character long.`);\n    }\n    if (name.length > this.MAX_LENGTH) {\n      throw new Error(`LLMProviderConfig name must be at most ${this.MAX_LENGTH} characters long.`);\n    }\n  }\n\n  public static create(name: string): LLMProviderConfigName {\n    this.validate(name);\n    return new LLMProviderConfigName(name.trim());\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/memory-item.entity.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":3,"column":41,"nodeType":"Literal","endLine":3,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/memory/memory-item.entity.ts\nimport { AbstractEntity, EntityProps } from '@/core/common/base.entity';\nimport { EntityError, ValueError } from '@/core/common/errors';\nimport { Identity } from '@/core/common/value-objects/identity.vo'; // For AgentId\n\nimport { MemoryItemContent } from './value-objects/memory-item-content.vo';\nimport { MemoryItemEmbedding } from './value-objects/memory-item-embedding.vo';\nimport { MemoryItemId } from './value-objects/memory-item-id.vo';\nimport { MemoryItemSource } from './value-objects/memory-item-source.vo';\nimport { MemoryItemTags } from './value-objects/memory-item-tags.vo';\n\nexport interface MemoryItemProps {\n  id: MemoryItemId;\n  content: MemoryItemContent;\n  tags: MemoryItemTags; // Should be initialized even if empty\n  source: MemoryItemSource; // Should be initialized even if null\n  embedding: MemoryItemEmbedding; // Should be initialized even if null\n  agentId?: Identity | null;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\ninterface InternalMemoryItemProps extends EntityProps<MemoryItemId> {\n  content: MemoryItemContent;\n  tags: MemoryItemTags;\n  source: MemoryItemSource;\n  embedding: MemoryItemEmbedding;\n  agentId?: Identity | null;\n}\n\nexport class MemoryItem extends AbstractEntity<MemoryItemId, InternalMemoryItemProps> {\n  private constructor(props: InternalMemoryItemProps) {\n    super(props);\n  }\n\n  public static create(props: MemoryItemProps): MemoryItem {\n    this.validateProps(props);\n\n    const now = new Date();\n    const internalProps: InternalMemoryItemProps = {\n      id: props.id,\n      content: props.content,\n      tags: props.tags || MemoryItemTags.create(null), // Ensure VO instance\n      source: props.source || MemoryItemSource.create(null), // Ensure VO instance\n      embedding: props.embedding || MemoryItemEmbedding.create(null), // Ensure VO instance\n      agentId: props.agentId === undefined ? null : props.agentId,\n      createdAt: props.createdAt || now,\n      updatedAt: props.updatedAt || now,\n    };\n\n    return new MemoryItem(internalProps);\n  }\n\n  private static validateProps(props: MemoryItemProps): void {\n    if (!props.id) throw new EntityError('MemoryItem ID is required.');\n    if (!props.content) throw new EntityError('MemoryItem content is required.');\n    // Tags, source, embedding, agentId are handled with defaults or are optional VOs.\n  }\n\n  // --- Getters for VOs ---\n  public content(): MemoryItemContent { return this.props.content; }\n  public tags(): MemoryItemTags { return this.props.tags; }\n  public source(): MemoryItemSource { return this.props.source; }\n  public embedding(): MemoryItemEmbedding { return this.props.embedding; }\n  public agentId(): Identity | null | undefined { return this.props.agentId; }\n\n  // --- Update Methods ---\n  public updateContent(newContent: MemoryItemContent): MemoryItem {\n    if (!newContent) throw new ValueError('New content cannot be null or undefined.');\n    if (this.props.content.equals(newContent)) return this;\n    return new MemoryItem({ ...this.props, content: newContent, updatedAt: new Date() });\n  }\n\n  public updateTags(newTags: MemoryItemTags): MemoryItem {\n    if (!newTags) throw new ValueError('New tags cannot be null or undefined.'); // Though VO might handle empty array\n    if (this.props.tags.equals(newTags)) return this;\n    return new MemoryItem({ ...this.props, tags: newTags, updatedAt: new Date() });\n  }\n\n  public updateSource(newSource: MemoryItemSource): MemoryItem {\n    if (!newSource) throw new ValueError('New source cannot be null or undefined.');\n    if (this.props.source.equals(newSource)) return this;\n    return new MemoryItem({ ...this.props, source: newSource, updatedAt: new Date() });\n  }\n\n  public setEmbedding(newEmbedding: MemoryItemEmbedding): MemoryItem {\n    if (!newEmbedding) throw new ValueError('New embedding cannot be null or undefined.');\n    if (this.props.embedding.equals(newEmbedding)) return this;\n    return new MemoryItem({ ...this.props, embedding: newEmbedding, updatedAt: new Date() });\n  }\n\n  public assignAgent(agentId: Identity | null): MemoryItem {\n    if (this.props.agentId === agentId || (this.props.agentId?.equals(agentId))) {\n        return this;\n    }\n    return new MemoryItem({ ...this.props, agentId: agentId, updatedAt: new Date() });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/ports/memory-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/ports/memory-repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-content.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/memory/value-objects/memory-item-content.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo'; // Corrected path\n\nimport { ValueError } from '@/domain/common/errors'; // Corrected path\n\ninterface MemoryItemContentProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class MemoryItemContent extends AbstractValueObject<MemoryItemContentProps> {\n  private static readonly MIN_LENGTH = 1;\n  private static readonly MAX_LENGTH = 10000; // Max length for memory content, adjustable\n\n  private constructor(props: MemoryItemContentProps) {\n    super(props);\n  }\n\n  public static create(content: string): MemoryItemContent {\n    this.validate(content);\n    return new MemoryItemContent({ value: content });\n  }\n\n  private static validate(content: string): void {\n    if (content === null || content === undefined) {\n      throw new ValueError('Memory item content cannot be null or undefined.');\n    }\n    const trimmedContent = content.trim();\n    if (trimmedContent.length < this.MIN_LENGTH) {\n      throw new ValueError(`Memory item content must be at least ${this.MIN_LENGTH} character long (after trimming).`);\n    }\n    if (trimmedContent.length > this.MAX_LENGTH) {\n      throw new ValueError(`Memory item content must be no more than ${this.MAX_LENGTH} characters long (after trimming).`);\n    }\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-embedding.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-source.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/memory/value-objects/memory-item-source.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo'; // Corrected path\n\nimport { ValueError } from '@/domain/common/errors'; // Corrected path\n\ninterface MemoryItemSourceProps extends ValueObjectProps {\n  value: string | null; // Source can be optional\n}\n\nexport class MemoryItemSource extends AbstractValueObject<MemoryItemSourceProps> {\n  private static readonly MAX_LENGTH = 100;\n\n  private constructor(props: MemoryItemSourceProps) {\n    super(props);\n  }\n\n  public static create(source: string | null | undefined): MemoryItemSource {\n    if (source === null || source === undefined || source.trim() === '') {\n      return new MemoryItemSource({ value: null });\n    }\n    this.validate(source);\n    return new MemoryItemSource({ value: source.trim() });\n  }\n\n  private static validate(source: string): void {\n    const trimmedSource = source.trim();\n    if (trimmedSource.length > this.MAX_LENGTH) {\n      throw new ValueError(`Memory item source must be no more than ${this.MAX_LENGTH} characters long.`);\n    }\n    // Optional: Add regex for allowed characters if needed\n  }\n\n  public value(): string | null {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-tags.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_TAGS` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_TAG_LENGTH` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":41},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_TAG_LENGTH` must match one of the following formats: camelCase","line":13,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":13,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/memory/value-objects/memory-item-tags.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo'; // Corrected path\n\nimport { ValueError } from '@/domain/common/errors'; // Corrected path\n\ninterface MemoryItemTagsProps extends ValueObjectProps {\n  value: string[];\n}\n\nexport class MemoryItemTags extends AbstractValueObject<MemoryItemTagsProps> {\n  private static readonly MAX_TAGS = 20;\n  private static readonly MAX_TAG_LENGTH = 50;\n  private static readonly MIN_TAG_LENGTH = 1;\n\n  private constructor(props: MemoryItemTagsProps) {\n    super(props);\n  }\n\n  public static create(tags: string[] | null | undefined): MemoryItemTags {\n    const processedTags = this.processAndValidate(tags);\n    return new MemoryItemTags({ value: processedTags });\n  }\n\n  private static processAndValidate(tags: string[] | null | undefined): string[] {\n    if (tags === null || tags === undefined || tags.length === 0) {\n      return []; // Return empty array for null, undefined, or empty input\n    }\n\n    if (tags.length > this.MAX_TAGS) {\n      throw new ValueError(`A memory item cannot have more than ${this.MAX_TAGS} tags.`);\n    }\n\n    const cleanedTags = tags\n      .map(tag => {\n        if (tag === null || tag === undefined) {\n          throw new ValueError('Tag cannot be null or undefined.');\n        }\n        const trimmedTag = tag.trim();\n        if (trimmedTag.length < this.MIN_TAG_LENGTH) {\n          throw new ValueError(`Tag \"${tag}\" is too short. Minimum length is ${this.MIN_TAG_LENGTH}.`);\n        }\n        if (trimmedTag.length > this.MAX_TAG_LENGTH) {\n          throw new ValueError(`Tag \"${tag}\" is too long. Maximum length is ${this.MAX_TAG_LENGTH}.`);\n        }\n        // Optional: Add regex for allowed characters in tags (e.g., no spaces, specific symbols)\n        // For now, just ensuring it's a valid string of certain length.\n        return trimmedTag;\n      })\n      .filter(tag => tag.length > 0); // Should be redundant due to MIN_TAG_LENGTH check but good for safety\n\n    // Check for duplicate tags after cleaning\n    const uniqueTags = new Set(cleanedTags);\n    if (uniqueTags.size !== cleanedTags.length) {\n      throw new ValueError('Duplicate tags are not allowed.');\n    }\n\n    return Array.from(uniqueTags);\n  }\n\n  public value(): string[] {\n    // Return a copy to maintain immutability of the internal array\n    return [...this.props.value];\n  }\n\n  // Override equals for array comparison\n  public equals(other?: MemoryItemTags | null): boolean {\n    if (other === null || other === undefined) {\n      return false;\n    }\n    if (this.props.value.length !== other.props.value.length) {\n      return false;\n    }\n    // Sort copies of arrays to ensure order doesn't matter for equality\n    const thisSorted = [...this.props.value].sort();\n    const otherSorted = [...other.props.value].sort();\n    return thisSorted.every((val, index) => val === otherSorted[index]);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/ports/project-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/project.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-description.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/project/value-objects/project-description.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface ProjectDescriptionProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class ProjectDescription extends AbstractValueObject<ProjectDescriptionProps> {\n  private static readonly MAX_LENGTH = 500; // Example max length\n\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  private static validate(description: string): void {\n    if (description.length > this.MAX_LENGTH) {\n      throw new Error(`Project description must be at most ${this.MAX_LENGTH} characters long.`);\n    }\n    // Add other validation rules if necessary\n  }\n\n  public static create(description: string): ProjectDescription {\n    this.validate(description);\n    return new ProjectDescription(description);\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-name.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":9,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":10,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/project/value-objects/project-name.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\ninterface ProjectNameProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class ProjectName extends AbstractValueObject<ProjectNameProps> {\n  private static readonly MIN_LENGTH = 1;\n  private static readonly MAX_LENGTH = 100; // Example max length\n\n  private constructor(value: string) {\n    super({ value });\n  }\n\n  private static validate(name: string): void {\n    if (name.length < this.MIN_LENGTH) {\n      throw new Error(`Project name must be at least ${this.MIN_LENGTH} character long.`);\n    }\n    if (name.length > this.MAX_LENGTH) {\n      throw new Error(`Project name must be at most ${this.MAX_LENGTH} characters long.`);\n    }\n    // Add other validation rules if necessary (e.g., allowed characters)\n  }\n\n  public static create(name: string): ProjectName {\n    this.validate(name);\n    return new ProjectName(name);\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  public toString(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/queue/ports/queue-metadata-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/queue/queue.entity.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":3,"column":41,"nodeType":"Literal","endLine":3,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/queue/queue.entity.ts\nimport { AbstractEntity, EntityProps } from '@/core/common/base.entity';\nimport { EntityError, ValueError } from '@/core/common/errors';\n\nimport { QueueConcurrency } from './value-objects/queue-concurrency.vo';\nimport { QueueDescription } from './value-objects/queue-description.vo';\nimport { QueueId } from './value-objects/queue-id.vo';\nimport { QueueName } from './value-objects/queue-name.vo';\n\nexport interface QueueProps {\n  id: QueueId;\n  name: QueueName;\n  concurrency: QueueConcurrency;\n  description: QueueDescription; // Should be initialized even if null\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\ninterface InternalQueueProps extends EntityProps<QueueId> {\n  name: QueueName;\n  concurrency: QueueConcurrency;\n  description: QueueDescription;\n}\n\nexport class Queue extends AbstractEntity<QueueId, InternalQueueProps> {\n  private constructor(props: InternalQueueProps) {\n    super(props);\n  }\n\n  public static create(props: QueueProps): Queue {\n    this.validateProps(props);\n\n    const now = new Date();\n    const internalProps: InternalQueueProps = {\n      id: props.id,\n      name: props.name,\n      concurrency: props.concurrency,\n      description: props.description || QueueDescription.create(null), // Ensure VO instance\n      createdAt: props.createdAt || now,\n      updatedAt: props.updatedAt || now,\n    };\n\n    return new Queue(internalProps);\n  }\n\n  private static validateProps(props: QueueProps): void {\n    if (!props.id) throw new EntityError('Queue ID is required.');\n    if (!props.name) throw new EntityError('Queue name is required.');\n    if (!props.concurrency) throw new EntityError('Queue concurrency is required.');\n    // description is handled with a default if not provided\n  }\n\n  // --- Getters for VOs ---\n  public name(): QueueName { return this.props.name; }\n  public concurrency(): QueueConcurrency { return this.props.concurrency; }\n  public description(): QueueDescription { return this.props.description; }\n\n  // --- Update Methods ---\n  public updateDetails(params: {\n    name?: QueueName;\n    description?: QueueDescription;\n  }): Queue {\n    const newProps = { ...this.props };\n    let updated = false;\n\n    if (params.name && !this.props.name.equals(params.name)) {\n      newProps.name = params.name;\n      updated = true;\n    }\n    if (params.description && !this.props.description.equals(params.description)) {\n      newProps.description = params.description;\n      updated = true;\n    }\n\n    if (updated) {\n      newProps.updatedAt = new Date();\n      return new Queue(newProps);\n    }\n    return this; // No changes\n  }\n\n  public setConcurrency(newConcurrency: QueueConcurrency): Queue {\n    if (!newConcurrency) throw new ValueError('New concurrency cannot be null or undefined.');\n    if (this.props.concurrency.equals(newConcurrency)) {\n      return this; // No change\n    }\n    const newProps = { ...this.props, concurrency: newConcurrency, updatedAt: new Date() };\n    return new Queue(newProps);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/queue/value-objects/queue-concurrency.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_VALUE` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":36},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_VALUE` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/queue/value-objects/queue-concurrency.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\ninterface QueueConcurrencyProps extends ValueObjectProps {\n  value: number;\n}\n\nexport class QueueConcurrency extends AbstractValueObject<QueueConcurrencyProps> {\n  private static readonly MIN_VALUE = 1;\n  private static readonly MAX_VALUE = 100; // Arbitrary practical max, can be adjusted\n\n  private constructor(props: QueueConcurrencyProps) {\n    super(props);\n  }\n\n  public static create(concurrency: number): QueueConcurrency {\n    this.validate(concurrency);\n    return new QueueConcurrency({ value: concurrency });\n  }\n\n  private static validate(concurrency: number): void {\n    if (concurrency === null || concurrency === undefined) {\n      throw new ValueError('Queue concurrency cannot be null or undefined.');\n    }\n    if (!Number.isInteger(concurrency)) {\n      throw new ValueError('Queue concurrency must be an integer.');\n    }\n    if (concurrency < this.MIN_VALUE) {\n      throw new ValueError(`Queue concurrency must be at least ${this.MIN_VALUE}.`);\n    }\n    if (concurrency > this.MAX_VALUE) {\n      throw new ValueError(`Queue concurrency must be no more than ${this.MAX_VALUE}.`);\n    }\n  }\n\n  public value(): number {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/queue/value-objects/queue-description.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/queue/value-objects/queue-description.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\ninterface QueueDescriptionProps extends ValueObjectProps {\n  value: string | null; // Description can be optional\n}\n\nexport class QueueDescription extends AbstractValueObject<QueueDescriptionProps> {\n  private static readonly MAX_LENGTH = 255; // Arbitrary max length\n\n  private constructor(props: QueueDescriptionProps) {\n    super(props);\n  }\n\n  public static create(description: string | null | undefined): QueueDescription {\n    if (description === null || description === undefined || description.trim() === '') {\n      return new QueueDescription({ value: null });\n    }\n    this.validate(description);\n    // Store trimmed version if not null\n    return new QueueDescription({ value: description.trim() });\n  }\n\n  private static validate(description: string): void {\n    const trimmedDescription = description.trim();\n    if (trimmedDescription.length > this.MAX_LENGTH) {\n      throw new ValueError(`Queue description must be no more than ${this.MAX_LENGTH} characters long.`);\n    }\n  }\n\n  public value(): string | null {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/queue/value-objects/queue-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/queue/value-objects/queue-name.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `QUEUE_NAME_REGEX` must match one of the following formats: camelCase","line":15,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":15,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/queue/value-objects/queue-name.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\ninterface QueueNameProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class QueueName extends AbstractValueObject<QueueNameProps> {\n  private static readonly MIN_LENGTH = 3;\n  private static readonly MAX_LENGTH = 50;\n  // Regex for valid queue names: lowercase alphanumeric, underscores, hyphens\n  // Must start and end with an alphanumeric character. Similar to UserUsername.\n  private static readonly QUEUE_NAME_REGEX = /^[a-z0-9][a-z0-9_-]*[a-z0-9]$/;\n\n  private constructor(props: QueueNameProps) {\n    super(props);\n  }\n\n  public static create(name: string): QueueName {\n    this.validate(name);\n    return new QueueName({ value: name.toLowerCase() }); // Store as lowercase\n  }\n\n  private static validate(name: string): void {\n    if (name === null || name === undefined) {\n      throw new ValueError('Queue name cannot be null or undefined.');\n    }\n    const trimmedName = name.trim();\n    if (trimmedName.length < this.MIN_LENGTH) {\n      throw new ValueError(`Queue name must be at least ${this.MIN_LENGTH} characters long.`);\n    }\n    if (trimmedName.length > this.MAX_LENGTH) {\n      throw new ValueError(`Queue name must be no more than ${this.MAX_LENGTH} characters long.`);\n    }\n    if (!this.QUEUE_NAME_REGEX.test(trimmedName.toLowerCase())) {\n      throw new ValueError(\n        'Queue name can only contain lowercase letters, numbers, underscores, and hyphens. ' +\n        'It must start and end with a letter or number.'\n      );\n    }\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/ports/source-code-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/source-code.entity.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":23,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/source-code/source-code.entity.ts\nimport { ProjectId } from '../project/value-objects/project-id.vo';\n\nimport { RepositoryDocsPath } from './value-objects/repository-docs-path.vo';\nimport { RepositoryId } from './value-objects/repository-id.vo';\nimport { RepositoryPath } from './value-objects/repository-path.vo';\n\ninterface SourceCodeProps {\n  id: RepositoryId;\n  projectId: ProjectId;\n  path: RepositoryPath;\n  docsPath?: RepositoryDocsPath; // Optional, as per CreateProjectUseCase logic\n  // createdAt: Date;\n  // updatedAt: Date;\n}\n\nexport class SourceCode {\n  private readonly _id: RepositoryId; // Instance variable 1\n  private readonly props: Readonly<Omit<SourceCodeProps, 'id'>>; // Instance variable 2\n\n  private constructor(props: SourceCodeProps) {\n    this._id = props.id;\n    const { id, ...otherProps } = props;\n    this.props = Object.freeze(otherProps);\n  }\n\n  public static create(props: {\n    id?: RepositoryId;\n    projectId: ProjectId;\n    path: RepositoryPath;\n    docsPath?: RepositoryDocsPath;\n  }): SourceCode {\n    const repoId = props.id || RepositoryId.generate();\n    return new SourceCode({\n      id: repoId,\n      projectId: props.projectId,\n      path: props.path,\n      docsPath: props.docsPath,\n      // createdAt: new Date(),\n      // updatedAt: new Date(),\n    });\n  }\n\n  public id(): RepositoryId {\n    return this._id;\n  }\n\n  public projectId(): ProjectId {\n    return this.props.projectId;\n  }\n\n  public path(): RepositoryPath {\n    return this.props.path;\n  }\n\n  public docsPath(): RepositoryDocsPath | undefined {\n    return this.props.docsPath;\n  }\n\n  // Example behavior method, if SourceCode entity had mutable properties\n  // public updateDocsPath(newDocsPath?: RepositoryDocsPath): SourceCode {\n  //   return new SourceCode({\n  //     ...this.props,\n  //     id: this._id,\n  //     docsPath: newDocsPath,\n  //     // updatedAt: new Date(),\n  //   });\n  // }\n\n  public equals(other?: SourceCode): boolean {\n    if (other === null || other === undefined) {\n      return false;\n    }\n    if (!(other instanceof SourceCode)) {\n      return false;\n    }\n    return this._id.equals(other._id);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-docs-path.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-path.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/ports/user-repository.interface.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":2,"column":29,"nodeType":"Literal","endLine":2,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/user/ports/user-repository.interface.ts\nimport { DomainError } from '@/core/common/errors';\n\nimport { Result } from '../../../../shared/result';\nimport { User } from '../user.entity';\nimport { UserEmail } from '../value-objects/user-email.vo';\nimport { UserId } from '../value-objects/user-id.vo';\nimport { UserUsername } from '../value-objects/user-username.vo';\n\nexport interface IUserRepository {\n  /**\n   * Saves a user entity. This can be used for both creation and updates.\n   * Implementations should handle upsert logic if appropriate.\n   * @param user The user entity to save.\n   * @returns A Result containing the saved user or a DomainError.\n   */\n  save(user: User): Promise<Result<User, DomainError>>;\n\n  /**\n   * Finds a user by their ID.\n   * @param id The UserId of the user.\n   * @returns A Result containing the user or null if not found, or a DomainError.\n   */\n  findById(id: UserId): Promise<Result<User | null, DomainError>>;\n\n  /**\n   * Finds a user by their email address.\n   * @param email The UserEmail of the user.\n   * @returns A Result containing the user or null if not found, or a DomainError.\n   */\n  findByEmail(email: UserEmail): Promise<Result<User | null, DomainError>>;\n\n  /**\n   * Finds a user by their username.\n   * @param username The UserUsername of the user.\n   * @returns A Result containing the user or null if not found, or a DomainError.\n   */\n  findByUsername(username: UserUsername): Promise<Result<User | null, DomainError>>;\n\n  /**\n   * Lists all users.\n   * Implementations may add pagination parameters if necessary.\n   * @returns A Result containing an array of users or a DomainError.\n   */\n  listAll(): Promise<Result<User[], DomainError>>;\n\n  /**\n   * Deletes a user by their ID.\n   * @param id The UserId of the user to delete.\n   * @returns A Result containing void or a DomainError.\n   */\n  delete(id: UserId): Promise<Result<void, DomainError>>;\n}\n\nexport const IUserRepositoryToken = Symbol('IUserRepository');\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/user.entity.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":3,"column":41,"nodeType":"Literal","endLine":3,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/user/user.entity.ts\nimport { AbstractEntity, EntityProps } from '@/core/common/base.entity';\nimport { EntityError, ValueError } from '@/core/common/errors';\nimport { Identity } from '@/core/common/value-objects/identity.vo'; // For LLMProviderConfigId and AgentId\n\nimport { UserAvatar } from './value-objects/user-avatar.vo';\nimport { UserEmail } from './value-objects/user-email.vo';\nimport { UserId } from './value-objects/user-id.vo';\nimport { UserNickname } from './value-objects/user-nickname.vo';\nimport { UserUsername } from './value-objects/user-username.vo';\n\n\n\n// Properties for User creation, excluding what AbstractEntity handles (id, createdAt, updatedAt implicitly)\n// but including them for the constructor of the concrete entity.\nexport interface UserProps {\n  id: UserId;\n  nickname: UserNickname;\n  username: UserUsername;\n  email: UserEmail;\n  avatar: UserAvatar;\n  defaultLLMProviderConfigId: Identity; // Using generic Identity for now\n  assistantId?: Identity | null; // Using generic Identity for now, optional\n  createdAt?: Date; // Optional at creation, will be defaulted\n  updatedAt?: Date; // Optional at creation, will be defaulted\n}\n\n// Interface for the internal state that AbstractEntity will manage via `this.props`\ninterface InternalUserProps extends EntityProps<UserId> {\n  nickname: UserNickname;\n  username: UserUsername;\n  email: UserEmail;\n  avatar: UserAvatar;\n  defaultLLMProviderConfigId: Identity;\n  assistantId?: Identity | null;\n}\n\nexport class User extends AbstractEntity<UserId, InternalUserProps> {\n  private constructor(props: InternalUserProps) {\n    super(props);\n  }\n\n  public static create(props: UserProps): User {\n    this.validateProps(props);\n\n    const now = new Date();\n    const internalProps: InternalUserProps = {\n      id: props.id,\n      nickname: props.nickname,\n      username: props.username,\n      email: props.email,\n      avatar: props.avatar,\n      defaultLLMProviderConfigId: props.defaultLLMProviderConfigId,\n      assistantId: props.assistantId === undefined ? null : props.assistantId, // Ensure undefined becomes null\n      createdAt: props.createdAt || now,\n      updatedAt: props.updatedAt || now,\n    };\n\n    return new User(internalProps);\n  }\n\n  private static validateProps(props: UserProps): void {\n    if (!props.id) throw new EntityError('User ID is required.');\n    if (!props.nickname) throw new EntityError('User nickname is required.');\n    if (!props.username) throw new EntityError('User username is required.');\n    if (!props.email) throw new EntityError('User email is required.');\n    if (!props.avatar) throw new EntityError('User avatar is required.'); // Even if null, the VO instance should be there\n    if (!props.defaultLLMProviderConfigId) throw new EntityError('Default LLM Provider Config ID is required.');\n    // assistantId is optional\n  }\n\n  // --- Getters for VOs ---\n  public nickname(): UserNickname { return this.props.nickname; }\n  public username(): UserUsername { return this.props.username; }\n  public email(): UserEmail { return this.props.email; }\n  public avatar(): UserAvatar { return this.props.avatar; }\n  public defaultLLMProviderConfigId(): Identity { return this.props.defaultLLMProviderConfigId; }\n  public assistantId(): Identity | null | undefined { return this.props.assistantId; }\n\n\n  // --- Update Methods ---\n  // These methods demonstrate an immutable approach by returning new instances.\n\n  public updateProfile(params: {\n    nickname?: UserNickname;\n    avatar?: UserAvatar;\n  }): User {\n    const newProps = { ...this.props };\n    let updated = false;\n\n    if (params.nickname && !this.props.nickname.equals(params.nickname)) {\n      newProps.nickname = params.nickname;\n      updated = true;\n    }\n    if (params.avatar && !this.props.avatar.equals(params.avatar)) {\n      newProps.avatar = params.avatar;\n      updated = true;\n    }\n\n    if (updated) {\n      newProps.updatedAt = new Date();\n      return new User(newProps);\n    }\n    return this; // No changes\n  }\n\n  public changeEmail(newEmail: UserEmail): User {\n    if (!newEmail) throw new ValueError('New email cannot be null or undefined.');\n    if (this.props.email.equals(newEmail)) {\n      return this; // No change\n    }\n    const newProps = { ...this.props, email: newEmail, updatedAt: new Date() };\n    return new User(newProps);\n  }\n\n  public changeUsername(newUsername: UserUsername): User {\n    if (!newUsername) throw new ValueError('New username cannot be null or undefined.');\n    if (this.props.username.equals(newUsername)) {\n      return this; // No change\n    }\n    const newProps = { ...this.props, username: newUsername, updatedAt: new Date() };\n    return new User(newProps);\n  }\n\n  public setDefaultLLMProviderConfig(configId: Identity): User {\n    if (!configId) throw new ValueError('LLM Provider Config ID cannot be null or undefined.');\n    if (this.props.defaultLLMProviderConfigId.equals(configId)) {\n      return this; // No change\n    }\n    const newProps = { ...this.props, defaultLLMProviderConfigId: configId, updatedAt: new Date() };\n    return new User(newProps);\n  }\n\n  public assignAssistant(assistantId: Identity | null): User {\n     // Handle null for removal, or if current is already null and new is null\n    if (this.props.assistantId === assistantId || (this.props.assistantId?.equals(assistantId))) {\n        return this; // No change\n    }\n    const newProps = { ...this.props, assistantId: assistantId, updatedAt: new Date() };\n    return new User(newProps);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-avatar.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-email.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `EMAIL_REGEX` must match one of the following formats: camelCase","line":15,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":15,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/user/value-objects/user-email.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\ninterface UserEmailProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class UserEmail extends AbstractValueObject<UserEmailProps> {\n  // Basic email regex. For production, a more robust validation library might be preferred.\n  // This regex checks for a common structure: local-part@domain-part\n  // local-part: alphanumeric characters, dots, hyphens, pluses\n  // domain-part: alphanumeric characters, dots, hyphens, with at least one dot\n  private static readonly EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n  private constructor(props: UserEmailProps) {\n    super(props);\n  }\n\n  public static create(email: string): UserEmail {\n    this.validate(email);\n    // Emails are often case-insensitive in the local part, but domain part is case-insensitive by spec.\n    // Storing as lowercase is a common practice to avoid duplicates.\n    return new UserEmail({ value: email.toLowerCase() });\n  }\n\n  private static validate(email: string): void {\n    if (email === null || email === undefined || email.trim() === '') {\n      throw new ValueError('Email cannot be empty.');\n    }\n    const trimmedEmail = email.trim();\n    if (!this.EMAIL_REGEX.test(trimmedEmail)) {\n      throw new ValueError(`Invalid email format: ${email}`);\n    }\n    // Max length for email is typically 254 characters\n    if (trimmedEmail.length > 254) {\n        throw new ValueError('Email address is too long.');\n    }\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  // equals is inherited from AbstractValueObject\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-nickname.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/user/value-objects/user-nickname.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\ninterface UserNicknameProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class UserNickname extends AbstractValueObject<UserNicknameProps> {\n  private static readonly MIN_LENGTH = 2;\n  private static readonly MAX_LENGTH = 50;\n\n  private constructor(props: UserNicknameProps) {\n    super(props);\n  }\n\n  public static create(nickname: string): UserNickname {\n    this.validate(nickname);\n    return new UserNickname({ value: nickname });\n  }\n\n  private static validate(nickname: string): void {\n    if (nickname === null || nickname === undefined || nickname.trim() === '') {\n      throw new ValueError('Nickname cannot be empty.');\n    }\n    const trimmedNickname = nickname.trim();\n    if (trimmedNickname.length < this.MIN_LENGTH) {\n      throw new ValueError(`Nickname must be at least ${this.MIN_LENGTH} characters long.`);\n    }\n    if (trimmedNickname.length > this.MAX_LENGTH) {\n      throw new ValueError(`Nickname must be no more than ${this.MAX_LENGTH} characters long.`);\n    }\n    // Potentially add other validation rules, e.g., allowed characters\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  // equals is inherited from AbstractValueObject\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-username.vo.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MIN_LENGTH` must match one of the following formats: camelCase","line":11,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `MAX_LENGTH` must match one of the following formats: camelCase","line":12,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Class Property name `USERNAME_REGEX` must match one of the following formats: camelCase","line":15,"column":27,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":15,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/user/value-objects/user-username.vo.ts\nimport { AbstractValueObject, ValueObjectProps } from '@/core/common/value-objects/base.vo';\n\nimport { ValueError } from '@/domain/common/errors';\n\ninterface UserUsernameProps extends ValueObjectProps {\n  value: string;\n}\n\nexport class UserUsername extends AbstractValueObject<UserUsernameProps> {\n  private static readonly MIN_LENGTH = 3;\n  private static readonly MAX_LENGTH = 30;\n  // Regex for valid usernames: lowercase alphanumeric, underscores, hyphens\n  // Must start and end with an alphanumeric character\n  private static readonly USERNAME_REGEX = /^[a-z0-9][a-z0-9_-]*[a-z0-9]$/;\n\n  private constructor(props: UserUsernameProps) {\n    super(props);\n  }\n\n  public static create(username: string): UserUsername {\n    this.validate(username);\n    // It's generally good practice for usernames to be stored in a consistent case, e.g., lowercase\n    return new UserUsername({ value: username.toLowerCase() });\n  }\n\n  private static validate(username: string): void {\n    if (username === null || username === undefined || username.trim() === '') {\n      throw new ValueError('Username cannot be empty.');\n    }\n    const trimmedUsername = username.trim();\n    if (trimmedUsername.length < this.MIN_LENGTH) {\n      throw new ValueError(`Username must be at least ${this.MIN_LENGTH} characters long.`);\n    }\n    if (trimmedUsername.length > this.MAX_LENGTH) {\n      throw new ValueError(`Username must be no more than ${this.MAX_LENGTH} characters long.`);\n    }\n    if (!this.USERNAME_REGEX.test(trimmedUsername.toLowerCase())) {\n      throw new ValueError(\n        'Username can only contain lowercase letters, numbers, underscores, and hyphens. ' +\n        'It must start and end with a letter or number.'\n      );\n    }\n  }\n\n  public value(): string {\n    return this.props.value;\n  }\n\n  // equals is inherited from AbstractValueObject\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/file-system.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/job-queue.interface.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":2,"column":28,"nodeType":"Literal","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2195,2198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2195,2198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/ports/adapters/job-queue.interface.ts\nimport { QueueError } from '@/core/common/errors';\n\nimport { Result } from '../../../shared/result';\nimport { Job } from '../../domain/job/job.entity';\nimport { JobId } from '../../domain/job/value-objects/job-id.vo';\n// Assuming TargetAgentRole is a VO that might be string-based or more complex\nimport { TargetAgentRole } from '../../domain/job/value-objects/target-agent-role.vo';\n\nexport interface FailDetails {\n  message: string;\n  stack?: string;\n  retryable?: boolean;\n  // Additional structured error data can be added here\n}\n\nexport interface IJobQueue {\n  /**\n   * Adds a job to the queue.\n   * The implementation will determine how the job is stored and prioritized.\n   * @param job The Job entity to add.\n   * @returns A Result containing the added Job (possibly updated by the queue, e.g., with a queue-specific ID or status) or a QueueError.\n   */\n  add(job: Job): Promise<Result<Job, QueueError>>;\n\n  /**\n   * Retrieves the next available job from the queue for a worker that supports specific roles.\n   * The implementation should handle locking or marking the job as acquired to prevent multiple workers from processing the same job.\n   * @param workerId A unique identifier for the worker attempting to get the job.\n   * @param supportedRoles An array of TargetAgentRole VOs or their string representations that the worker can process.\n   * @returns A Result containing the Job or null if no suitable job is available, or a QueueError.\n   */\n  getNext(workerId: string, supportedRoles: TargetAgentRole[]): Promise<Result<Job | null, QueueError>>;\n  // Alternative for supportedRoles if TargetAgentRole is complex:\n  // getNext(workerId: string, supportedRoles: string[]): Promise<Result<Job | null, QueueError>>;\n\n\n  /**\n   * Marks a job as successfully completed.\n   * This typically involves updating the job's status and potentially removing it from active processing.\n   * @param jobId The JobId of the completed job.\n   * @param resultData Optional data representing the outcome or result of the job.\n   * @returns A Result indicating success (void) or a QueueError.\n   */\n  complete(jobId: JobId, resultData?: any): Promise<Result<void, QueueError>>;\n\n  /**\n   * Marks a job as failed.\n   * This typically involves updating the job's status, logging error details, and potentially scheduling a retry.\n   * @param jobId The JobId of the failed job.\n   * @param errorDetails An object containing details about the failure.\n   * @param attempt The attempt number for this job execution.\n   * @returns A Result indicating success (void) or a QueueError.\n   */\n  fail(jobId: JobId, errorDetails: FailDetails, attempt: number): Promise<Result<void, QueueError>>;\n\n  /**\n   * Delays a job's execution until a specified time.\n   * The job might be moved to a delayed state or its visibility in the queue adjusted.\n   * @param jobId The JobId of the job to delay.\n   * @param delayUntil The Date until which the job execution should be postponed.\n   * @returns A Result indicating success (void) or a QueueError.\n   */\n  delay(jobId: JobId, delayUntil: Date): Promise<Result<void, QueueError>>;\n\n  /**\n   * Retrieves a specific job by its ID from the queue/storage, regardless of its current status.\n   * Useful for monitoring, direct inspection, or manual intervention.\n   * @param jobId The JobId of the job to retrieve.\n   * @returns A Result containing the Job or null if not found, or a QueueError.\n   */\n  getJobById(jobId: JobId): Promise<Result<Job | null, QueueError>>;\n\n  // Consider other potential methods:\n  // - updateJob(job: Job): Promise<Result<Job, QueueError>>; (For more general updates if needed by application layer)\n  // - requeue(jobId: JobId): Promise<Result<void, QueueError>>; (To explicitly put a job back for processing)\n  // - countJobs(status?: JobStatus): Promise<Result<number, QueueError>>; (For monitoring)\n}\n\nexport const IJobQueueToken = Symbol('IJobQueue');\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/llm-adapter.interface.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":26,"nodeType":"Literal","endLine":4,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/ports/adapters/llm-adapter.interface.ts\nimport { z } from 'zod';\n\nimport { LLMError } from '@/core/common/errors';\n\nimport { Result } from '../../../shared/result';\n\nimport { LLMGenerationOptions, LanguageModelMessage } from './llm-adapter.types';\n\n/**\n * Interface for an LLM (Large Language Model) Adapter.\n * This abstraction allows the application to interact with different LLM providers\n * or implementations through a consistent API.\n */\nexport interface ILLMAdapter {\n  /**\n   * Generates a language model response based on a sequence of messages.\n   * The response can include text content and/or tool calls.\n   *\n   * @param messages - An array of LanguageModelMessage objects representing the conversation history.\n   * @param options - Optional parameters to control the generation process.\n   * @returns A Promise that resolves to a Result containing the assistant's LanguageModelMessage response or an LLMError.\n   */\n  generateText(\n    messages: LanguageModelMessage[],\n    options?: LLMGenerationOptions,\n  ): Promise<Result<LanguageModelMessage, LLMError>>;\n\n  /**\n   * Generates structured output that conforms to a provided Zod schema.\n   * The adapter implementation is responsible for instructing the LLM to produce\n   * output in a format (e.g., JSON) that can be parsed and validated against the schema.\n   *\n   * @template S - The Zod schema type.\n   * @param prompt - The input string prompt for the LLM.\n   * @param schema - The Zod schema to which the output should conform.\n   * @param options - Optional parameters to control the generation process.\n   * @returns A Promise that resolves to a Result containing the parsed and validated structured data (of type `z.infer<S>`) or an LLMError.\n   *          The error may indicate issues with LLM generation, output parsing, or schema validation.\n   */\n  generateStructuredOutput<S extends z.ZodTypeAny>(\n    prompt: string,\n    schema: S,\n    options?: LLMGenerationOptions,\n  ): Promise<Result<z.infer<S>, LLMError>>;\n\n  /**\n   * Generates text as an asynchronous stream based on a given prompt and options.\n   * Each yielded item is a Result, allowing for streamed error handling or partial results.\n   * This method is optional for an adapter to implement.\n   *\n   * @param prompt - The input string prompt for the LLM.\n   * @param options - Optional parameters to control the generation process.\n   * @returns An AsyncGenerator that yields Results, each containing a chunk of the generated text string or an LLMError.\n   */\n  streamText?(\n    prompt: string,\n    options?: LLMGenerationOptions,\n  ): AsyncGenerator<Result<string, LLMError>>;\n\n  // Potential future additions:\n  // - generateChatCompletion(messages: ChatMessage[], options?: LLMGenerationOptions): Promise<Result<ChatMessage, LLMError>>;\n  // - countTokens(text: string, modelId?: string): Promise<Result<number, LLMError>>;\n  // - listAvailableModels?(): Promise<Result<string[], LLMError>>;\n}\n\nexport const ILLMAdapterToken = Symbol('ILLMAdapter');\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/llm-adapter.types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `tool_calls` must match one of the following formats: camelCase","line":26,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":26,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Type Property name `tool_call_id` must match one of the following formats: camelCase","line":27,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":27,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/ports/adapters/llm-adapter.types.ts\n\nexport interface LLMGenerationOptions {\n  modelId?: string; // Specific model ID if overriding a default\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n  topK?: number;\n  stopSequences?: string[];\n  // TODO: Add 'tools' and 'tool_choice' options if the underlying SDKs support them directly in options\n  // For now, tool definitions will be passed as part of the LanguageModelMessage sequence or handled by the adapter.\n}\n\nexport interface LanguageModelMessageToolCall {\n  id: string;\n  type: 'function'; // Currently, only 'function' is common\n  function: {\n    name: string;\n    arguments: string; // JSON string\n  };\n}\n\nexport interface LanguageModelMessage {\n  role: 'system' | 'user' | 'assistant' | 'tool';\n  content: string | null; // Content can be null, e.g., for assistant messages with only tool_calls\n  tool_calls?: LanguageModelMessageToolCall[]; // For assistant role (response from LLM)\n  tool_call_id?: string; // For tool role (request to LLM with tool result)\n  // name?: string; // Optional: For 'tool' role, the name of the tool whose result is being provided.\n                 // Or for 'function' role (if functions are directly used instead of tools).\n                 // Vercel AI SDK examples show 'name' on 'tool' role messages for results.\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/version-control-system.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/tools/tool.interface.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/common/errors'.","line":4,"column":27,"nodeType":"Literal","endLine":4,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1047,1050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1047,1050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/tools/tool.interface.ts\nimport { z } from 'zod';\n\nimport { ToolError } from '@/core/common/errors'; // To be created in the next step\n\nimport { Result } from '../../shared/result'; // Assuming Result type is in shared\n\n/**\n * Optional context passed to tool execution.\n * Provides the tool with information about the environment or agent calling it.\n */\nexport interface IToolExecutionContext {\n  agentId?: string;\n  projectId?: string;\n  userId?: string;\n  // Other relevant contextual information can be added here.\n}\n\n/**\n * Defines the structure for an agent tool.\n *\n * @template InputSchema - A Zod schema defining the input parameters for the tool.\n * @template OutputType - The type of the output returned by the tool's execute method.\n *                       It's recommended this be a `Result<ActualData, ToolError>` for robust error handling.\n */\nexport interface IAgentTool<\n  InputSchema extends z.ZodTypeAny,\n  // Using TOutput for the successful data type, ToolError for the error type in Result\n  TOutput = any,\n> {\n  /**\n   * A unique name for the tool, typically in 'namespace.action' format.\n   * Example: \"fileSystem.readFile\", \"codeInterpreter.executePython\"\n   */\n  name: string;\n\n  /**\n   * A clear and concise description of what the tool does,\n   * its capabilities, and when it should be used by an LLM.\n   */\n  description: string;\n\n  /**\n   * A Zod schema that defines the expected input parameters for the tool.\n   * This schema is used by the agent executor to validate inputs before calling the tool.\n   */\n  parameters: InputSchema;\n\n  /**\n   * Executes the tool's functionality with the given parameters.\n   *\n   * @param params - The validated input parameters, conforming to `z.infer<InputSchema>`.\n   * @param executionContext - Optional context providing additional information for the tool's execution.\n   * @returns A Promise that resolves to the tool's output.\n   *          It is strongly recommended that OutputType is `Result<ActualData, ToolError>`.\n   */\n  execute(\n    params: z.infer<InputSchema>,\n    executionContext?: IToolExecutionContext,\n  ): Promise<Result<TOutput, ToolError>>; // Recommended to use Result for output\n}\n\n/**\n * Token for IAgentTool, can be used for Dependency Injection if tools are registered this way.\n * A more common pattern might be a ToolRegistry that holds instances of IAgentTool.\n */\nexport const IAgentToolToken = Symbol('IAgentTool');\n\n/**\n * Example of a simple tool's parameter schema and output type.\n * This is not part of the interface itself but demonstrates usage.\n *\n * const exampleToolParams = z.object({\n *   message: z.string().describe(\"The message to echo.\"),\n * });\n * type ExampleToolOutput = { echoedMessage: string };\n *\n * // class ExampleEchoTool implements IAgentTool<typeof exampleToolParams, ExampleToolOutput> { ... }\n */\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/events/in-memory-job-event-emitter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QueueName' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobId' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WorkerId' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1538,1541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1538,1541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1775,1778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1775,1778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1996,1999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1996,1999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/events/in-memory-job-event-emitter.ts\nimport { EventEmitter } from 'events';\n\nimport {\n  JobEventType,\n  JobEventPayloadMap,\n  QueueName,\n  JobId,\n  WorkerId,\n} from '../../core/domain/job/events/job-event.types';\n\n// Interface for the event emitter to allow for different implementations later if needed\nexport interface IJobEventEmitter {\n  emit<K extends JobEventType>(event: K, payload: JobEventPayloadMap[K]): boolean;\n\n  on<K extends JobEventType>(\n    event: K,\n    listener: (payload: JobEventPayloadMap[K]) => void,\n  ): this;\n\n  off<K extends JobEventType>(\n    event: K,\n    listener: (payload: JobEventPayloadMap[K]) => void,\n  ): this;\n\n  once<K extends JobEventType>(\n    event: K,\n    listener: (payload: JobEventPayloadMap[K]) => void,\n  ): this;\n\n  removeAllListeners(event?: JobEventType): this;\n  listenerCount(event: JobEventType): number;\n}\n\n\nexport class InMemoryJobEventEmitter extends EventEmitter implements IJobEventEmitter {\n  constructor() {\n    super();\n    // Increase max listeners if needed, default is 10\n    // this.setMaxListeners(20);\n  }\n\n  // Provide strongly-typed wrappers\n\n  public emit<K extends JobEventType>(event: K, payload: JobEventPayloadMap[K]): boolean {\n    // The payload itself contains queueName, jobId etc. as per JobEventPayloadMap definitions\n    return super.emit(event, payload);\n  }\n\n  public on<K extends JobEventType>(\n    event: K,\n    listener: (payload: JobEventPayloadMap[K]) => void,\n  ): this {\n    super.on(event, listener as (...args: any[]) => void); // Cast listener for compatibility\n    return this;\n  }\n\n  public off<K extends JobEventType>(\n    event: K,\n    listener: (payload: JobEventPayloadMap[K]) => void,\n  ): this {\n    super.off(event, listener as (...args: any[]) => void); // Cast listener\n    return this;\n  }\n\n  public once<K extends JobEventType>(\n    event: K,\n    listener: (payload: JobEventPayloadMap[K]) => void,\n  ): this {\n    super.once(event, listener as (...args: any[]) => void); // Cast listener\n    return this;\n  }\n\n  // removeAllListeners and listenerCount can be inherited directly if their\n  // signature matches EventEmitter's and is acceptable.\n  // EventEmitter's removeAllListeners([eventName]) and listenerCount(eventName) are fine.\n}\n\n// Optional: Export a default instance if it's to be used as a singleton directly\n// export const globalJobEventEmitter = new InMemoryJobEventEmitter();\n// However, it's often better to let DI handle singleton creation and injection.\n// For now, just exporting the class.\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/ioc/inversify.config.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IEmbeddingService' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":27},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/core/application/ports/services/i-embedding.service'.","line":8,"column":35,"nodeType":"Literal","endLine":8,"endColumn":90},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IWorkerService' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":24},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":95},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IJobQueueAdapter' is defined but never used. Allowed unused vars must match /^_/u.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ILLMAdapter' is defined but never used. Allowed unused vars must match /^_/u.","line":57,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":21},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/drizzle/repositories/job.repository'.","line":63,"column":38,"nodeType":"Literal","endLine":63,"endColumn":90},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/agent-internal-state.repository'.","line":64,"column":54,"nodeType":"Literal","endLine":64,"endColumn":125},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/agent-persona-template.repository'.","line":65,"column":56,"nodeType":"Literal","endLine":65,"endColumn":129},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/agent.repository'.","line":66,"column":41,"nodeType":"Literal","endLine":66,"endColumn":97},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/annotation.repository'.","line":67,"column":46,"nodeType":"Literal","endLine":67,"endColumn":107},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/llm-provider-config.repository'.","line":68,"column":53,"nodeType":"Literal","endLine":68,"endColumn":123},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/memory.repository'.","line":69,"column":42,"nodeType":"Literal","endLine":69,"endColumn":99},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/project.repository'.","line":70,"column":43,"nodeType":"Literal","endLine":70,"endColumn":101},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/source-code.repository'.","line":71,"column":46,"nodeType":"Literal","endLine":71,"endColumn":108},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":72,"column":1,"nodeType":"ImportDeclaration","endLine":72,"endColumn":96},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../persistence/in-memory/repositories/user.repository'.","line":72,"column":40,"nodeType":"Literal","endLine":72,"endColumn":95},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":76,"column":1,"nodeType":"ImportDeclaration","endLine":76,"endColumn":87},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../services/tool-registry/tool-registry.service'.","line":76,"column":37,"nodeType":"Literal","endLine":76,"endColumn":86},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../tools/file-system.tool'.","line":84,"column":32,"nodeType":"Literal","endLine":84,"endColumn":59}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/ioc/inversify.config.ts\nimport 'reflect-metadata'; // Must be imported once at the application's entry point\nimport { Container } from 'inversify';\n\n\n// --- Domain Layer Ports (Interfaces) ---\nimport { IAgentExecutor } from '@/core/application/ports/services/i-agent-executor.interface';\nimport { IEmbeddingService } from '@/core/application/ports/services/i-embedding.service';\nimport { IToolRegistryService } from '@/core/application/ports/services/i-tool-registry.service';\nimport { IWorkerService } from '@/core/application/ports/services/i-worker.service';\nimport { GenericAgentExecutor } from '@/core/application/services/generic-agent-executor.service';\nimport { CreateAgentUseCase } from '@/core/application/use-cases/agent/create-agent.use-case';\n// import { IQueueMetadataRepository } from '@/core/domain/queue/ports/queue-metadata-repository.interface'; // If needed\n\n// --- Service Interfaces (Domain, Application, Infrastructure) ---\n// import { IQueueService } from '@/core/application/ports/services/i-queue.service'; // If a high-level queue service exists\n\n// --- Adapter Interfaces ---\n// import { IFileSystemAdapter } from '@/core/ports/adapters/file-system.adapter.interface'; // If defined\n// import { IVersionControlAdapter } from '@/core/ports/adapters/version-control.adapter.interface'; // If defined\n\n// --- Use Cases ---\nimport { LoadAgentInternalStateUseCase } from '@/core/application/use-cases/agent-internal-state/load-agent-internal-state.use-case';\nimport { SaveAgentInternalStateUseCase } from '@/core/application/use-cases/agent-internal-state/save-agent-internal-state.use-case';\nimport { CreatePersonaTemplateUseCase } from '@/core/application/use-cases/agent-persona-template/create-persona-template.use-case';\nimport { ListAnnotationsUseCase } from '@/core/application/use-cases/annotation/list-annotations.use-case';\nimport { RemoveAnnotationUseCase } from '@/core/application/use-cases/annotation/remove-annotation.use-case';\nimport { SaveAnnotationUseCase } from '@/core/application/use-cases/annotation/save-annotation.use-case';\nimport { CancelJobUseCase } from '@/core/application/use-cases/job/cancel-job.use-case';\nimport { CreateJobUseCase } from '@/core/application/use-cases/job/create-job.use-case';\nimport { ListJobsUseCase } from '@/core/application/use-cases/job/list-jobs.use-case';\n// import { GetJobDetailsUseCase } from '@/core/application/use-cases/job/get-job-details.use-case'; // Example\nimport { RetryJobUseCase } from '@/core/application/use-cases/job/retry-job.use-case';\nimport { UpdateJobUseCase } from '@/core/application/use-cases/job/update-job.use-case';\nimport { CreateLLMProviderConfigUseCase } from '@/core/application/use-cases/llm-provider-config/create-llm-provider-config.use-case';\nimport { RemoveMemoryItemUseCase } from '@/core/application/use-cases/memory/remove-memory-item.use-case';\nimport { SaveMemoryItemUseCase } from '@/core/application/use-cases/memory/save-memory-item.use-case';\nimport { SearchMemoryItemsUseCase } from '@/core/application/use-cases/memory/search-memory-items.use-case';\nimport { SearchSimilarMemoryItemsUseCase } from '@/core/application/use-cases/memory/search-similar-memory-items.use-case';\nimport { CreateProjectUseCase } from '@/core/application/use-cases/project/create-project.use-case';\nimport { GetProjectDetailsUseCase as GetProjectDetailsAppUseCase } from '@/core/application/use-cases/project/get-project-details.use-case';\nimport { ListProjectsUseCase as ListProjectsAppUseCase } from '@/core/application/use-cases/project/list-projects.use-case';\nimport { CreateUserUseCase } from '@/core/application/use-cases/user/create-user.use-case';\nimport { GetUserUseCase } from '@/core/application/use-cases/user/get-user.use-case';\nimport { ILoggerService } from '@/core/common/services/i-logger.service';\nimport { IAgentInternalStateRepository } from '@/core/domain/agent/ports/agent-internal-state-repository.interface';\nimport { IAgentPersonaTemplateRepository } from '@/core/domain/agent/ports/agent-persona-template-repository.interface';\nimport { IAgentRepository } from '@/core/domain/agent/ports/agent-repository.interface';\nimport { IAnnotationRepository } from '@/core/domain/annotation/ports/annotation-repository.interface';\nimport { IJobRepository } from '@/core/domain/job/ports/job-repository.interface';\nimport { ILLMProviderConfigRepository } from '@/core/domain/llm-provider-config/ports/llm-provider-config-repository.interface';\nimport { IMemoryRepository } from '@/core/domain/memory/ports/memory-repository.interface';\nimport { IProjectRepository } from '@/core/domain/project/ports/project-repository.interface';\nimport { ISourceCodeRepository } from '@/core/domain/source-code/ports/source-code-repository.interface';\nimport { IUserRepository } from '@/core/domain/user/ports/user-repository.interface';\nimport { IJobQueueAdapter } from '@/core/ports/adapters/job-queue.interface';\nimport { ILLMAdapter } from '@/core/ports/adapters/llm-adapter.interface';\n\n\n// --- Infrastructure Layer Implementations ---\n// Persistence\nimport { db, schema } from '../persistence/drizzle/drizzle.client'; // Assuming this file exists and exports db and schema\nimport { DrizzleJobRepository } from '../persistence/drizzle/repositories/job.repository';\nimport { InMemoryAgentInternalStateRepository } from '../persistence/in-memory/repositories/agent-internal-state.repository'; // Example\nimport { InMemoryAgentPersonaTemplateRepository } from '../persistence/in-memory/repositories/agent-persona-template.repository'; // Example\nimport { InMemoryAgentRepository } from '../persistence/in-memory/repositories/agent.repository'; // Example\nimport { InMemoryAnnotationRepository } from '../persistence/in-memory/repositories/annotation.repository'; // Example\nimport { InMemoryLLMProviderConfigRepository } from '../persistence/in-memory/repositories/llm-provider-config.repository'; // Example\nimport { InMemoryMemoryRepository } from '../persistence/in-memory/repositories/memory.repository'; // Example\nimport { InMemoryProjectRepository } from '../persistence/in-memory/repositories/project.repository'; // Example\nimport { InMemorySourceCodeRepository } from '../persistence/in-memory/repositories/source-code.repository'; // Example\nimport { InMemoryUserRepository } from '../persistence/in-memory/repositories/user.repository'; // Example\n\n// Services\nimport { ConsoleLoggerService } from '../services/logger/console-logger.service';\nimport { ToolRegistryService } from '../services/tool-registry/tool-registry.service';\n\n// import { WorkerService } from '@/core/application/services/worker.service'; // Assuming this is the one to bind\n// import { SdkEmbeddingService } from '../services/ai/sdk-embedding.service'; // Example\n// import { SdkLLMAdapter } from '../adapters/llm/sdk-llm.adapter'; // Example\n// import { BullMQJobQueueAdapter } from '../queue/bullmq/bullmq-job-queue.adapter'; // Example\n\n// Tools\nimport { FileSystemTool } from '../tools/file-system.tool';\n// import { ExecuteCommandTool } from '../tools/execute-command.tool'; // Example\n\n// Drizzle Client (example, may need actual setup)\nimport { TYPES } from './types';\n\n\n// Create the container\nconst appContainer = new Container({ defaultScope: 'Singleton' });\n\n// === Bindings ===\n\n// Logger (essential, bind first)\nappContainer.bind<ILoggerService>(TYPES.ILoggerService).to(ConsoleLoggerService);\n\n// Database Client (example, actual setup might differ)\n// This is a simplified binding. In a real app, you'd have a proper DB connection manager.\nappContainer.bind(TYPES.DrizzleClient).toConstantValue({ db, schema });\n\n\n// Repositories (using In-Memory for now, switch to Drizzle as they are implemented)\nappContainer.bind<IAgentInternalStateRepository>(TYPES.IAgentInternalStateRepository).to(InMemoryAgentInternalStateRepository);\nappContainer.bind<IAgentPersonaTemplateRepository>(TYPES.IAgentPersonaTemplateRepository).to(InMemoryAgentPersonaTemplateRepository);\nappContainer.bind<IAgentRepository>(TYPES.IAgentRepository).to(InMemoryAgentRepository);\nappContainer.bind<IAnnotationRepository>(TYPES.IAnnotationRepository).to(InMemoryAnnotationRepository);\nappContainer.bind<IJobRepository>(TYPES.IJobRepository).to(DrizzleJobRepository); // Example using Drizzle\nappContainer.bind<ILLMProviderConfigRepository>(TYPES.ILLMProviderConfigRepository).to(InMemoryLLMProviderConfigRepository);\nappContainer.bind<IMemoryRepository>(TYPES.IMemoryRepository).to(InMemoryMemoryRepository);\nappContainer.bind<IProjectRepository>(TYPES.IProjectRepository).to(InMemoryProjectRepository);\n// appContainer.bind<IQueueMetadataRepository>(TYPES.IQueueMetadataRepository).to(InMemoryQueueMetadataRepository);\nappContainer.bind<ISourceCodeRepository>(TYPES.ISourceCodeRepository).to(InMemorySourceCodeRepository);\nappContainer.bind<IUserRepository>(TYPES.IUserRepository).to(InMemoryUserRepository);\n\n// Infrastructure Services & Adapters\nappContainer.bind<IToolRegistryService>(TYPES.IToolRegistryService).to(ToolRegistryService);\n// appContainer.bind<IEmbeddingService>(TYPES.IEmbeddingService).to(SdkEmbeddingService);\n// appContainer.bind<ILLMAdapter>(TYPES.ILLMAdapter).to(SdkLLMAdapter);\n// appContainer.bind<IJobQueueAdapter>(TYPES.IJobQueueAdapter).to(BullMQJobQueueAdapter);\n\n// Application Services\nappContainer.bind<IAgentExecutor>(TYPES.IAgentExecutor).to(GenericAgentExecutor);\n// appContainer.bind<IWorkerService>(TYPES.IWorkerService).to(WorkerService); // Assuming WorkerService is in core/application\n\n// Use Cases (typically transient, unless stateless and all deps are singletons)\nappContainer.bind<CreateAgentUseCase>(TYPES.CreateAgentUseCase).to(CreateAgentUseCase).inTransientScope();\nappContainer.bind<LoadAgentInternalStateUseCase>(TYPES.LoadAgentInternalStateUseCase).to(LoadAgentInternalStateUseCase).inTransientScope();\nappContainer.bind<SaveAgentInternalStateUseCase>(TYPES.SaveAgentInternalStateUseCase).to(SaveAgentInternalStateUseCase).inTransientScope();\nappContainer.bind<CreatePersonaTemplateUseCase>(TYPES.CreatePersonaTemplateUseCase).to(CreatePersonaTemplateUseCase).inTransientScope();\nappContainer.bind<ListAnnotationsUseCase>(TYPES.ListAnnotationsUseCase).to(ListAnnotationsUseCase).inTransientScope();\nappContainer.bind<RemoveAnnotationUseCase>(TYPES.RemoveAnnotationUseCase).to(RemoveAnnotationUseCase).inTransientScope();\nappContainer.bind<SaveAnnotationUseCase>(TYPES.SaveAnnotationUseCase).to(SaveAnnotationUseCase).inTransientScope();\nappContainer.bind<CancelJobUseCase>(TYPES.CancelJobUseCase).to(CancelJobUseCase).inTransientScope();\nappContainer.bind<CreateJobUseCase>(TYPES.CreateJobUseCase).to(CreateJobUseCase).inTransientScope();\nappContainer.bind<ListJobsUseCase>(TYPES.ListJobsUseCase).to(ListJobsUseCase).inTransientScope();\n// appContainer.bind<GetJobDetailsUseCase>(TYPES.GetJobDetailsUseCase).to(GetJobDetailsUseCase).inTransientScope();\nappContainer.bind<RetryJobUseCase>(TYPES.RetryJobUseCase).to(RetryJobUseCase).inTransientScope();\nappContainer.bind<UpdateJobUseCase>(TYPES.UpdateJobUseCase).to(UpdateJobUseCase).inTransientScope();\nappContainer.bind<CreateLLMProviderConfigUseCase>(TYPES.CreateLLMProviderConfigUseCase).to(CreateLLMProviderConfigUseCase).inTransientScope();\nappContainer.bind<RemoveMemoryItemUseCase>(TYPES.RemoveMemoryItemUseCase).to(RemoveMemoryItemUseCase).inTransientScope();\nappContainer.bind<SaveMemoryItemUseCase>(TYPES.SaveMemoryItemUseCase).to(SaveMemoryItemUseCase).inTransientScope();\nappContainer.bind<SearchMemoryItemsUseCase>(TYPES.SearchMemoryItemsUseCase).to(SearchMemoryItemsUseCase).inTransientScope();\nappContainer.bind<SearchSimilarMemoryItemsUseCase>(TYPES.SearchSimilarMemoryItemsUseCase).to(SearchSimilarMemoryItemsUseCase).inTransientScope();\nappContainer.bind<CreateProjectUseCase>(TYPES.CreateProjectUseCase).to(CreateProjectUseCase).inTransientScope();\nappContainer.bind<GetProjectDetailsAppUseCase>(TYPES.GetProjectDetailsAppUseCase).to(GetProjectDetailsAppUseCase).inTransientScope();\nappContainer.bind<ListProjectsAppUseCase>(TYPES.ListProjectsAppUseCase).to(ListProjectsAppUseCase).inTransientScope();\nappContainer.bind<CreateUserUseCase>(TYPES.CreateUserUseCase).to(CreateUserUseCase).inTransientScope();\nappContainer.bind<GetUserUseCase>(TYPES.GetUserUseCase).to(GetUserUseCase).inTransientScope();\n\n// Tools\nappContainer.bind<FileSystemTool>(TYPES.FileSystemTool).to(FileSystemTool).inSingletonScope();\n// appContainer.bind<ExecuteCommandTool>(TYPES.ExecuteCommandTool).to(ExecuteCommandTool).inSingletonScope();\n\n// --- Post-build setup: Register tools ---\n// This might be done in a separate bootstrap phase of the application.\nconst toolRegistryInstance = appContainer.get<IToolRegistryService>(TYPES.IToolRegistryService);\nconst loggerForTools = appContainer.get<ILoggerService>(TYPES.ILoggerService);\n\ntry {\n  const fileSystemToolInstance = appContainer.get<FileSystemTool>(TYPES.FileSystemTool);\n  toolRegistryInstance.registerTool(fileSystemToolInstance);\n  loggerForTools.info('[InversifyConfig] FileSystemTool registered with ToolRegistryService.');\n} catch (error) {\n  loggerForTools.error('[InversifyConfig] CRITICAL: Failed to register FileSystemTool:', error);\n}\n\n// try {\n//   const executeCommandToolInstance = appContainer.get<ExecuteCommandTool>(TYPES.ExecuteCommandTool);\n//   toolRegistryInstance.registerTool(executeCommandToolInstance);\n//   loggerForTools.info('[InversifyConfig] ExecuteCommandTool registered with ToolRegistryService.');\n// } catch (error) {\n//   loggerForTools.error('[InversifyConfig] CRITICAL: Failed to register ExecuteCommandTool:', error);\n// }\n\nexport { appContainer };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/ioc/types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IAgentInternalStateRepository` must match one of the following formats: camelCase","line":5,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":5,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IAgentPersonaTemplateRepository` must match one of the following formats: camelCase","line":6,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":6,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IAgentRepository` must match one of the following formats: camelCase","line":7,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IAnnotationRepository` must match one of the following formats: camelCase","line":8,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":8,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IJobRepository` must match one of the following formats: camelCase","line":9,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `ILLMProviderConfigRepository` must match one of the following formats: camelCase","line":10,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":31},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IMemoryRepository` must match one of the following formats: camelCase","line":11,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IProjectRepository` must match one of the following formats: camelCase","line":12,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IQueueMetadataRepository` must match one of the following formats: camelCase","line":13,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":13,"endColumn":27},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `ISourceCodeRepository` must match one of the following formats: camelCase","line":14,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":14,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IUserRepository` must match one of the following formats: camelCase","line":15,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":15,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IAgentExecutor` must match one of the following formats: camelCase","line":20,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":20,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IWorkerService` must match one of the following formats: camelCase","line":21,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":21,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `ILoggerService` must match one of the following formats: camelCase","line":24,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":24,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IToolRegistryService` must match one of the following formats: camelCase","line":25,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":25,"endColumn":23},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IQueueService` must match one of the following formats: camelCase","line":26,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":26,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IEmbeddingService` must match one of the following formats: camelCase","line":27,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":27,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IJobQueueAdapter` must match one of the following formats: camelCase","line":30,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":30,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `ILLMAdapter` must match one of the following formats: camelCase","line":31,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":31,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IFileSystemAdapter` must match one of the following formats: camelCase","line":32,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":32,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IVersionControlAdapter` must match one of the following formats: camelCase","line":33,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":33,"endColumn":25},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CreateAgentUseCase` must match one of the following formats: camelCase","line":39,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":39,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `LoadAgentInternalStateUseCase` must match one of the following formats: camelCase","line":41,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":41,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `SaveAgentInternalStateUseCase` must match one of the following formats: camelCase","line":42,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":42,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CreatePersonaTemplateUseCase` must match one of the following formats: camelCase","line":44,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":44,"endColumn":31},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `ListAnnotationsUseCase` must match one of the following formats: camelCase","line":46,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":46,"endColumn":25},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `RemoveAnnotationUseCase` must match one of the following formats: camelCase","line":47,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":47,"endColumn":26},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `SaveAnnotationUseCase` must match one of the following formats: camelCase","line":48,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":48,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CancelJobUseCase` must match one of the following formats: camelCase","line":50,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":50,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CreateJobUseCase` must match one of the following formats: camelCase","line":51,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":51,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `ListJobsUseCase` must match one of the following formats: camelCase","line":52,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":52,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `GetJobDetailsUseCase` must match one of the following formats: camelCase","line":53,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":53,"endColumn":23},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `RetryJobUseCase` must match one of the following formats: camelCase","line":54,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":54,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `UpdateJobUseCase` must match one of the following formats: camelCase","line":55,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":55,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CreateLLMProviderConfigUseCase` must match one of the following formats: camelCase","line":57,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":57,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `RemoveMemoryItemUseCase` must match one of the following formats: camelCase","line":59,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":59,"endColumn":26},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `SaveMemoryItemUseCase` must match one of the following formats: camelCase","line":60,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":60,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `SearchMemoryItemsUseCase` must match one of the following formats: camelCase","line":61,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":61,"endColumn":27},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `SearchSimilarMemoryItemsUseCase` must match one of the following formats: camelCase","line":62,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":62,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CreateProjectUseCase` must match one of the following formats: camelCase","line":64,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":64,"endColumn":23},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `GetProjectDetailsAppUseCase` must match one of the following formats: camelCase","line":65,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":65,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `ListProjectsAppUseCase` must match one of the following formats: camelCase","line":66,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":66,"endColumn":25},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CreateUserUseCase` must match one of the following formats: camelCase","line":68,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":68,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `GetUserUseCase` must match one of the following formats: camelCase","line":69,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":69,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `FileSystemTool` must match one of the following formats: camelCase","line":74,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":74,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `ExecuteCommandTool` must match one of the following formats: camelCase","line":75,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":75,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `DrizzleClient` must match one of the following formats: camelCase","line":83,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":83,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `IWorkerPool` must match one of the following formats: camelCase","line":91,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":91,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/ioc/types.ts\nconst TYPES = {\n  // === Repositories ===\n  // Domain Layer Ports (Interfaces)\n  IAgentInternalStateRepository: Symbol.for('IAgentInternalStateRepository'),\n  IAgentPersonaTemplateRepository: Symbol.for('IAgentPersonaTemplateRepository'),\n  IAgentRepository: Symbol.for('IAgentRepository'),\n  IAnnotationRepository: Symbol.for('IAnnotationRepository'),\n  IJobRepository: Symbol.for('IJobRepository'),\n  ILLMProviderConfigRepository: Symbol.for('ILLMProviderConfigRepository'),\n  IMemoryRepository: Symbol.for('IMemoryRepository'),\n  IProjectRepository: Symbol.for('IProjectRepository'),\n  IQueueMetadataRepository: Symbol.for('IQueueMetadataRepository'), // For queue specific metadata\n  ISourceCodeRepository: Symbol.for('ISourceCodeRepository'),\n  IUserRepository: Symbol.for('IUserRepository'),\n  // Note: IWorkerRepository might be needed if Worker becomes a full-fledged entity managed by a repo\n\n  // === Services ===\n  // Domain or Application Layer Services (Interfaces)\n  IAgentExecutor: Symbol.for('IAgentExecutor'), // Core service for agent execution logic\n  IWorkerService: Symbol.for('IWorkerService'),   // Manages worker lifecycle and job processing delegation\n\n  // Infrastructure Layer Services (Interfaces)\n  ILoggerService: Symbol.for('ILoggerService'),\n  IToolRegistryService: Symbol.for('IToolRegistryService'), // Changed from IToolRegistry for clarity\n  IQueueService: Symbol.for('IQueueService'), // High-level queue operations (might wrap IJobQueue)\n  IEmbeddingService: Symbol.for('IEmbeddingService'), // For generating embeddings\n\n  // Adapters (Interfaces for external systems or complex drivers)\n  IJobQueueAdapter: Symbol.for('IJobQueueAdapter'), // Interface for the actual job queue implementation (BullMQ, RabbitMQ etc.)\n  ILLMAdapter: Symbol.for('ILLMAdapter'),           // Interface for specific LLM provider communication\n  IFileSystemAdapter: Symbol.for('IFileSystemAdapter'),\n  IVersionControlAdapter: Symbol.for('IVersionControlAdapter'),\n\n\n  // === Use Cases ===\n  // Application Layer Use Cases (Specific command/query handlers)\n  // Agent\n  CreateAgentUseCase: Symbol.for('CreateAgentUseCase'),\n  // AgentInternalState\n  LoadAgentInternalStateUseCase: Symbol.for('LoadAgentInternalStateUseCase'),\n  SaveAgentInternalStateUseCase: Symbol.for('SaveAgentInternalStateUseCase'),\n  // AgentPersonaTemplate\n  CreatePersonaTemplateUseCase: Symbol.for('CreatePersonaTemplateUseCase'),\n  // Annotation\n  ListAnnotationsUseCase: Symbol.for('ListAnnotationsUseCase'),\n  RemoveAnnotationUseCase: Symbol.for('RemoveAnnotationUseCase'),\n  SaveAnnotationUseCase: Symbol.for('SaveAnnotationUseCase'),\n  // Job\n  CancelJobUseCase: Symbol.for('CancelJobUseCase'),\n  CreateJobUseCase: Symbol.for('CreateJobUseCase'),\n  ListJobsUseCase: Symbol.for('ListJobsUseCase'),\n  GetJobDetailsUseCase: Symbol.for('GetJobDetailsUseCase'), // Assuming this exists or will\n  RetryJobUseCase: Symbol.for('RetryJobUseCase'),\n  UpdateJobUseCase: Symbol.for('UpdateJobUseCase'),\n  // LLMProviderConfig\n  CreateLLMProviderConfigUseCase: Symbol.for('CreateLLMProviderConfigUseCase'),\n  // Memory\n  RemoveMemoryItemUseCase: Symbol.for('RemoveMemoryItemUseCase'),\n  SaveMemoryItemUseCase: Symbol.for('SaveMemoryItemUseCase'),\n  SearchMemoryItemsUseCase: Symbol.for('SearchMemoryItemsUseCase'),\n  SearchSimilarMemoryItemsUseCase: Symbol.for('SearchSimilarMemoryItemsUseCase'),\n  // Project\n  CreateProjectUseCase: Symbol.for('CreateProjectUseCase'),\n  GetProjectDetailsAppUseCase: Symbol.for('GetProjectDetailsAppUseCase'), // Renamed to avoid conflict with domain one\n  ListProjectsAppUseCase: Symbol.for('ListProjectsAppUseCase'),       // Renamed\n  // User\n  CreateUserUseCase: Symbol.for('CreateUserUseCase'),\n  GetUserUseCase: Symbol.for('GetUserUseCase'),\n  // Queue Management Use Cases (if any, e.g., PauseQueueUseCase, ResumeQueueUseCase)\n\n  // === Tools ===\n  // Specific IAgentTool implementations\n  FileSystemTool: Symbol.for('FileSystemTool'),\n  ExecuteCommandTool: Symbol.for('ExecuteCommandTool'),\n  // Add other specific tools here\n\n  // === Factories & Other Infrastructure ===\n  // Example: If a factory is complex enough to be injected\n  // IQueueClientFactory: Symbol.for('IQueueClientFactory'), // If queue client creation is complex\n\n  // Example: Database Connection/Client (if directly injected, though often wrapped by repositories)\n  DrizzleClient: Symbol.for('DrizzleClient'), // For the Drizzle ORM client instance\n  // Add other specific infrastructure components if needed\n\n  // Specific LLM Providers (if multiple are to be switchable via DI for the ILLMAdapter)\n  // OpenAIService: Symbol.for('OpenAIService'),\n  // AnthropicService: Symbol.for('AnthropicService'),\n\n  // Worker Pool (if managed via DI)\n  IWorkerPool: Symbol.for('IWorkerPool'),\n};\n\nexport { TYPES };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/drizzle.client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/repositories/project.repository.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/domain/services/i-logger.service'.","line":9,"column":32,"nodeType":"Literal","endLine":9,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '../../ioc/types'.","line":13,"column":23,"nodeType":"Literal","endLine":13,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[881,884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[881,884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/persistence/drizzle/repositories/project.repository.ts\nimport { injectable, inject } from 'inversify';\n\nimport { IProjectRepository } from '@/core/domain/project/ports/project-repository.interface';\nimport { Project } from '@/core/domain/project/project.entity';\nimport { ProjectId } from '@/core/domain/project/value-objects/project-id.vo';\n\nimport { DomainError, NotFoundError } from '@/domain/common/errors';\nimport { ILoggerService } from '@/domain/services/i-logger.service';\n\nimport { Result, ok, error } from '@/shared/result';\n\nimport { TYPES } from '../../ioc/types'; // Assuming TYPES is in the new ioc directory\n\n// Placeholder for Drizzle schema and db client type\n// import { LibSQLDatabase } from 'drizzle-orm/libsql';\n// import * as schema from '../schema'; // Assuming schema is generated and available\n\nexport type DrizzleSchema = any; // Replace with actual schema type: typeof schema;\nexport type DrizzleDB = any; // Replace with actual DB type: LibSQLDatabase<DrizzleSchema>;\n\n@injectable()\nexport class DrizzleProjectRepository implements IProjectRepository {\n  constructor(\n    @inject(TYPES.DrizzleClient) private readonly db: DrizzleDB, // Placeholder type\n    @inject(TYPES.ILoggerService) private readonly logger: ILoggerService,\n  ) {\n    this.logger.info('[DrizzleProjectRepository] initialized');\n  }\n\n  async save(project: Project): Promise<Result<Project, DomainError>> {\n    this.logger.info(`[DrizzleProjectRepository] save called for project ID: ${project.id.value}`);\n    // Placeholder implementation\n    // In a real scenario, this would involve an upsert operation using Drizzle ORM\n    // e.g., this.db.insert(schema.projects).values(...).onConflictDoUpdate(...).returning();\n    return ok(project); // Simulate successful save\n  }\n\n  async findById(id: ProjectId): Promise<Result<Project | null, DomainError>> {\n    this.logger.info(`[DrizzleProjectRepository] findById called for project ID: ${id.value}`);\n    // Placeholder implementation\n    // e.g., const result = await this.db.select().from(schema.projects).where(eq(schema.projects.id, id.value)).limit(1);\n    // if (result.length === 0) return ok(null);\n    // return ok(Project.create(result[0] as any)); // Map raw DB data to entity\n    return ok(null); // Simulate not found\n  }\n\n  async findByName(name: string): Promise<Result<Project | null, DomainError>> {\n    this.logger.info(`[DrizzleProjectRepository] findByName called for name: ${name}`);\n    // Placeholder implementation\n    return ok(null); // Simulate not found\n  }\n\n  async listAll(): Promise<Result<Project[], DomainError>> {\n    this.logger.info(`[DrizzleProjectRepository] listAll called`);\n    // Placeholder implementation\n    // e.g., const results = await this.db.select().from(schema.projects);\n    // return ok(results.map(p => Project.create(p as any)));\n    return ok([]); // Simulate empty list\n  }\n\n  async delete(id: ProjectId): Promise<Result<void, DomainError | NotFoundError>> {\n    this.logger.info(`[DrizzleProjectRepository] delete called for project ID: ${id.value}`);\n    // Placeholder implementation\n    // e.g., await this.db.delete(schema.projects).where(eq(schema.projects.id, id.value));\n    return ok(undefined); // Simulate successful delete\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/services/logger/console-logger.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[517,520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[517,520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"id-length","severity":1,"message":"Identifier name 'm' is too short (< 2).","line":21,"column":34,"nodeType":"Identifier","messageId":"tooShort","endLine":21,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[993,996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[993,996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1120,1123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1120,1123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1134,1137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1134,1137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1315,1318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1315,1318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1436,1439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1436,1439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1558,1561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1558,1561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/infrastructure/services/logger/console-logger.service.ts\nimport { injectable, unmanaged } from 'inversify';\n\nimport { ILoggerService } from '@/core/common/services/i-logger.service';\n\n@injectable()\nexport class ConsoleLoggerService implements ILoggerService {\n  private context?: string;\n\n  // Allow context to be optional or set via a method if preferred\n  constructor(@unmanaged() context?: string) {\n    this.context = context;\n  }\n\n  private formatMessage(level: string, message: string, meta?: any[]): string {\n    const timestamp = new Date().toISOString();\n    const contextString = this.context ? `[${this.context}] ` : '';\n    let logMessage = `${timestamp} [${level.toUpperCase()}] ${contextString}${message}`;\n    if (meta && meta.length > 0) {\n      // Basic meta formatting, can be expanded\n      logMessage += ` ${meta.map(m => typeof m === 'object' ? JSON.stringify(m) : m).join(' ')}`;\n    }\n    return logMessage;\n  }\n\n  public log(message: string, ...meta: any[]): void {\n    console.log(this.formatMessage('log', message, meta));\n  }\n\n  public error(message: string, error?: Error | any, ...meta: any[]): void {\n    const fullMeta = error ? [error, ...meta] : meta;\n    console.error(this.formatMessage('error', message, fullMeta));\n  }\n\n  public warn(message: string, ...meta: any[]): void {\n    console.warn(this.formatMessage('warn', message, meta));\n  }\n\n  public info(message: string, ...meta: any[]): void {\n    console.info(this.formatMessage('info', message, meta));\n  }\n\n  public debug(message: string, ...meta: any[]): void {\n    // In production, debug logs might be conditional based on an env var\n    console.debug(this.formatMessage('debug', message, meta));\n  }\n\n  public setContext(context: string): void {\n    this.context = context;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-chat.handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LanguageModelMessage' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"boundaries/element-types","severity":2,"message":"PRESENTATION: Proibido importar de infrastructure (permitido: domain, application, shared, ui/*).","line":7,"column":30,"nodeType":"Literal","endLine":7,"endColumn":69},{"ruleId":"max-statements","severity":1,"message":"Async arrow function has too many statements (42). Maximum allowed is 25.","line":18,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":110,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'm' is too short (< 2).","line":60,"column":56,"nodeType":"Identifier","messageId":"tooShort","endLine":60,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4466,4469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4466,4469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/electron/main/ipc-chat.handlers.ts\nimport { ipcMain, IpcMainInvokeEvent } from 'electron';\n\nimport { ILLMAdapter, ILLMAdapterToken } from '@/core/ports/adapters/llm-adapter.interface'; // Adjust path\nimport { LanguageModelMessage } from '@/core/ports/adapters/llm-adapter.types'; // Adjust path\n\nimport { appContainer } from '@/infrastructure/ioc/inversify.config'; // Assuming DI container is set up\n\nimport { IPCChannel } from '@/shared/ipc-channels'; // Adjust path as necessary\nimport { ChatSendMessagePayload, ChatStreamEventPayload, ChatStreamTokenPayload, ChatStreamEndPayload, ChatStreamErrorPayload } from '@/shared/ipc-chat.types'; // Adjust path\n\n\n// Placeholder for a more sophisticated ChatService\n// For now, this handler will directly use the ILLMAdapter.\n// In a real app, this logic would likely be in an application service.\n\nexport function registerChatIPCHandlers(): void {\n  ipcMain.handle(IPCChannel.CHAT_SEND_MESSAGE, async (event: IpcMainInvokeEvent, payload: ChatSendMessagePayload) => {\n    console.log(`[IPC Chat Handler] Received ${IPCChannel.CHAT_SEND_MESSAGE}`, payload);\n\n    // TODO: Get ILLMAdapter from DI container if available\n    // For now, this is a placeholder. In a real setup, you'd resolve this from your DI container.\n    let llmAdapter: ILLMAdapter | null = null;\n    try {\n        // This assumes ILLMAdapterToken is correctly bound in your InversifyJS (or other DI) setup for the main process.\n        // If DI is not set up for main process or this specific adapter, this will fail or needs alternative.\n        if (appContainer.isBound(ILLMAdapterToken)) {\n             llmAdapter = appContainer.get<ILLMAdapter>(ILLMAdapterToken);\n        } else {\n            console.warn('[IPC Chat Handler] ILLMAdapterToken not bound in DI container. Chat streaming will be mocked/limited.');\n        }\n    } catch (diError) {\n        console.error('[IPC Chat Handler] Error resolving ILLMAdapter from DI container:', diError);\n    }\n\n\n    // Simulate streaming response\n    const sendStreamEvent = (streamPayload: ChatStreamEventPayload) => {\n      if (!event.sender.isDestroyed()) {\n        event.sender.send(IPCChannel.CHAT_STREAM_EVENT, streamPayload);\n      }\n    };\n\n    if (llmAdapter && payload.messages) {\n        try {\n            // Assuming streamText exists and is implemented by the adapter\n            if (typeof llmAdapter.streamText !== 'function') {\n                throw new Error('LLMAdapter does not support streamText method.');\n            }\n\n            // Minimal prompt for demonstration if messages are empty or just a system message\n            let effectiveMessages = payload.messages;\n            if (effectiveMessages.length === 0 || (effectiveMessages.length === 1 && effectiveMessages[0].role === 'system')) {\n                effectiveMessages.push({ role: 'user', content: 'Hello!' });\n            }\n\n            // Convert LanguageModelMessage[] to a simple prompt string for streamText\n            // This is a simplification; a real implementation might pass messages directly\n            // or have the adapter handle the message array.\n            const simplePrompt = effectiveMessages.map(m => `${m.role}: ${m.content}`).join('\\\\n');\n\n            const stream = llmAdapter.streamText(simplePrompt); // Or adapt to use messages if streamText supports it\n\n            for await (const result of stream) {\n                if (result.isSuccess()) {\n                    const tokenPayload: ChatStreamTokenPayload = { type: 'token', data: result.value };\n                    sendStreamEvent(tokenPayload);\n                } else {\n                    console.error('[IPC Chat Handler] Error from LLM stream:', result.error);\n                    const errorPayload: ChatStreamErrorPayload = { type: 'error', error: { message: result.error.message, name: result.error.name }};\n                    sendStreamEvent(errorPayload);\n                    // Optionally, break or handle differently\n                }\n            }\n            const endPayload: ChatStreamEndPayload = { type: 'end' };\n            sendStreamEvent(endPayload);\n\n            // For invoke, we need to return a promise.\n            // The actual \"result\" of sendMessage might be an acknowledgement or initial status.\n            // Streaming happens via event.sender.send.\n            return { success: true, data: { message: \"Message received, streaming started.\" } };\n\n        } catch (error: any) {\n            console.error('[IPC Chat Handler] Error processing stream with LLMAdapter:', error);\n            const errorPayload: ChatStreamErrorPayload = { type: 'error', error: { message: error.message || 'Failed to process stream' }};\n            sendStreamEvent(errorPayload);\n            const endPayload: ChatStreamEndPayload = { type: 'end' }; // Ensure stream ends even on error\n            sendStreamEvent(endPayload);\n            return { success: false, error: { message: error.message || 'Failed to process stream with LLMAdapter' } };\n        }\n    } else {\n        // Fallback mock streaming if no LLM adapter or no messages\n        console.warn('[IPC Chat Handler] Using mock stream response.');\n        const mockMessage = \"This is a mock streamed response from the main process. \";\n        const tokens = mockMessage.split(' ');\n        let delay = 0;\n        for (const token of tokens) {\n            delay += 100;\n            setTimeout(() => {\n                const tokenPayload: ChatStreamTokenPayload = { type: 'token', data: token + \" \" };\n                sendStreamEvent(tokenPayload);\n            }, delay);\n        }\n        setTimeout(() => {\n            const endPayload: ChatStreamEndPayload = { type: 'end' };\n            sendStreamEvent(endPayload);\n        }, delay + 100);\n        return { success: true, data: { message: \"Message received, mock streaming started.\" } };\n    }\n  });\n\n  console.log('[IPC Chat Handler] Chat IPC handlers registered.');\n}\n\n// To unregister (optional, if needed during app lifecycle, e.g., for testing or module unloading)\nexport function unregisterChatIPCHandlers(): void {\n  ipcMain.removeHandler(IPCChannel.CHAT_SEND_MESSAGE);\n  console.log('[IPC Chat Handler] Chat IPC handlers unregistered.');\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-project.handlers.ts","messages":[{"ruleId":"boundaries/element-types","severity":2,"message":"PRESENTATION: Proibido importar de infrastructure (permitido: domain, application, shared, ui/*).","line":8,"column":30,"nodeType":"Literal","endLine":8,"endColumn":69},{"ruleId":"boundaries/element-types","severity":2,"message":"PRESENTATION: Proibido importar de infrastructure (permitido: domain, application, shared, ui/*).","line":9,"column":28,"nodeType":"Literal","endLine":9,"endColumn":81},{"ruleId":"boundaries/element-types","severity":2,"message":"PRESENTATION: Proibido importar de infrastructure (permitido: domain, application, shared, ui/*).","line":10,"column":42,"nodeType":"Literal","endLine":10,"endColumn":112},{"ruleId":"boundaries/element-types","severity":2,"message":"PRESENTATION: Proibido importar de infrastructure (permitido: domain, application, shared, ui/*).","line":11,"column":38,"nodeType":"Literal","endLine":11,"endColumn":95},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":54,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4345,4348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4345,4348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/electron/main/ipc-project.handlers.ts\nimport { ipcMain, IpcMainInvokeEvent } from 'electron';\n\nimport { ListProjectsUseCase } from '@/core/application/use-cases/project/list-projects.use-case';\nimport { LoggerServiceToken } from '@/core/common/services/i-logger.service';\nimport { ProjectRepositoryToken } from '@/core/domain/project/ports/project-repository.interface';\n\nimport { appContainer } from '@/infrastructure/ioc/inversify.config'; // Assuming DI container\nimport { db, schema } from '@/infrastructure/persistence/drizzle/drizzle.client'; // Example db client and schema\nimport { DrizzleProjectRepository } from '@/infrastructure/persistence/drizzle/repositories/project.repository'; // Example concrete repo\nimport { ConsoleLoggerService } from '@/infrastructure/services/logger/console-logger.service'; // Example Logger\n\nimport { IPCChannel } from '@/shared/ipc-channels';\nimport { ProjectListItem } from '@/shared/ipc-project.types'; // Ensure this path is correct\n\n\n\n\n// Placeholder for actual ProjectRepository implementation if DI is not fully set up for main process\n// This is a simplified setup for demonstration. A real app would use DI.\nlet listProjectsUseCase: ListProjectsUseCase;\n\nfunction initializeUseCases() {\n    if (appContainer.isBound(ListProjectsUseCase)) {\n        listProjectsUseCase = appContainer.get(ListProjectsUseCase);\n    } else {\n        console.warn(\"[IPC Project Handler] ListProjectsUseCase not bound in DI. Attempting manual instantiation (may be incomplete).\");\n        // Manual instantiation as a fallback (less ideal)\n        // This requires knowing all dependencies of ListProjectsUseCase and its own dependencies.\n        // This is a common issue when DI isn't fully integrated into the Electron main process early.\n        let projectRepo;\n        if (appContainer.isBound(ProjectRepositoryToken)) {\n            projectRepo = appContainer.get(ProjectRepositoryToken);\n        } else {\n            console.warn(\"[IPC Project Handler] ProjectRepositoryToken not bound in DI for ListProjectsUseCase. Using direct DrizzleProjectRepository.\");\n            // This is highly simplified and likely won't work without a proper DB connection configured for main process\n            // and potentially migrations run.\n            projectRepo = new DrizzleProjectRepository(db, schema, new ConsoleLoggerService('DrizzleProjectRepo'));\n        }\n        let logger;\n        if(appContainer.isBound(LoggerServiceToken)) {\n            logger = appContainer.get(LoggerServiceToken);\n        } else {\n            logger = new ConsoleLoggerService('ListProjectsUseCase');\n        }\n        listProjectsUseCase = new ListProjectsUseCase(projectRepo, logger);\n    }\n}\n\n\nexport function registerProjectIPCHandlers(): void {\n  initializeUseCases(); // Initialize use case (DI or manual)\n\n  ipcMain.handle(IPCChannel.PROJECT_LIST_QUERY, async (event: IpcMainInvokeEvent) => {\n    console.log(`[IPC Project Handler] Received ${IPCChannel.PROJECT_LIST_QUERY}`);\n    try {\n      if (!listProjectsUseCase) {\n        // Re-initialize if it wasn't ready on first call (e.g. async DI setup)\n        initializeUseCases();\n        if (!listProjectsUseCase) {\n          throw new Error(\"ListProjectsUseCase could not be initialized.\");\n        }\n      }\n\n      const result = await listProjectsUseCase.execute();\n\n      if (result.isSuccess()) {\n        const projects = result.value;\n        // Map domain entities to ProjectListItem DTOs\n        const projectListItems: ProjectListItem[] = projects.map(project => ({\n          id: project.id.value,\n          name: project.name.value,\n          description: project.description?.value,\n          createdAt: project.createdAt.toISOString(),\n          updatedAt: project.updatedAt.toISOString(),\n          // ownerName: project.owner?.name.value, // Example, if Project entity has owner\n          // thumbnailUrl: project.thumbnailUrl?.value, // Example\n        }));\n        console.log(`[IPC Project Handler] Sending ${projectListItems.length} projects.`);\n        return { success: true, data: projectListItems };\n      } \n        console.error('[IPC Project Handler] Error listing projects:', result.error);\n        return { success: false, error: { message: result.error.message, name: result.error.name } };\n      \n    } catch (error: any) {\n      console.error('[IPC Project Handler] Exception in project:list handler:', error);\n      return { success: false, error: { message: error.message || 'An unexpected error occurred while listing projects.' } };\n    }\n  });\n\n  console.log('[IPC Project Handler] Project IPC handlers registered.');\n}\n\nexport function unregisterProjectIPCHandlers(): void {\n  ipcMain.removeHandler(IPCChannel.PROJECT_LIST_QUERY);\n  console.log('[IPC Project Handler] Project IPC handlers unregistered.');\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/main.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":10,"column":5,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/electron/main/main.ts\nimport path from 'path';\n\nimport { app, BrowserWindow, ipcMain } from 'electron';\n\nimport { registerChatIPCHandlers } from './ipc-chat.handlers';\nimport { registerProjectIPCHandlers } from './ipc-project.handlers'; // Import project handlers\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\nif (require('electron-squirrel-startup')) {\n  app.quit();\n}\n\nlet mainWindow: BrowserWindow | null = null;\n\nconst createWindow = () => {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      preload: path.join(__dirname, '../preload/preload.js'), // IMPORTANT: This assumes preload.js will be in this location after build\n      contextIsolation: true,\n      nodeIntegration: false,\n    },\n  });\n\n  // Load the index.html of the app.\n  if (import.meta.env.MAIN_WINDOW_VITE_DEV_SERVER_URL) {\n    mainWindow.loadURL(import.meta.env.MAIN_WINDOW_VITE_DEV_SERVER_URL);\n  } else {\n    mainWindow.loadFile(path.join(__dirname, `../renderer/${import.meta.env.MAIN_WINDOW_VITE_NAME}/index.html`));\n  }\n\n  // Open the DevTools.\n  if (process.env.NODE_ENV === 'development' || import.meta.env.MAIN_WINDOW_VITE_DEV_SERVER_URL) {\n    mainWindow.webContents.openDevTools();\n  }\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', () => {\n  // Register IPC handlers\n  registerChatIPCHandlers();\n  registerProjectIPCHandlers(); // Register project handlers\n  // Register other IPC handlers here (e.g., for onboarding, etc.)\n\n  createWindow();\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n\n// Ensure appContainer is initialized if it's used by handlers directly\n// import '../../../infrastructure/ioc/inversify.config'; // This might be needed if handlers access appContainer directly at module load time\n// However, it's better if handlers get dependencies passed or resolve them lazily.\n// For the current ipc-chat.handlers.ts, it attempts to use appContainer.\n// This line should ideally be in the main entry point of the application logic,\n// before any services using DI are instantiated.\n// For now, this is a basic main.ts. DI setup for main process is a larger topic.\n\n// Handle IPC unregistration on quit (optional, good practice if handlers hold resources)\napp.on('will-quit', () => {\n  // Example:\n  // unregisterChatIPCHandlers();\n  // unregisterProjectIPCHandlers(); // Example if unregistration is needed\n});\n\n// Expose a simple function for preload to check if running in dev\nipcMain.handle('app:is-dev', () => {\n    return process.env.NODE_ENV === 'development' || !!import.meta.env.MAIN_WINDOW_VITE_DEV_SERVER_URL;\n});\n\nconsole.log('[Main Process] Main process script loaded.');\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/App.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":3,"column":24,"nodeType":"Literal","endLine":3,"endColumn":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { Button } from \"@ui/components/ui/button\";\n\nfunction App() {\n  return (\n    <div style={{ fontFamily: 'sans-serif', textAlign: 'center', paddingTop: '50px' }}>\n      <h1>Project Wiz - Refactored Frontend</h1>\n      <p>UI Application Placeholder - It works!</p>\n      <div style={{ marginTop: '20px' }}>\n        <Button>Click Me</Button>\n        <Button variant=\"secondary\" style={{ marginLeft: '10px' }}>Secondary Button</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/__root.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/MarkdownRenderer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/theme-provider.tsx","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":30,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":30,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused caught errors must match /^_/u.","line":30,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":51,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":51,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused caught errors must match /^_/u.","line":51,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark' | 'system'; // Added 'system' as a valid theme type\n\ninterface ThemeProviderState {\n  theme: Theme; // This will store 'light' or 'dark' after resolving 'system'\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'vite-ui-theme',\n}: ThemeProviderProps) {\n  const [theme, setThemeState] = useState<Theme>(() => {\n    try {\n      const storedTheme = localStorage.getItem(storageKey) as Theme | null;\n      if (storedTheme) {\n        return storedTheme;\n      }\n      return defaultTheme;\n    } catch (e) {\n      // localStorage is not available (e.g., SSR or restricted environment)\n      // console.warn('localStorage not available for theme persistence:', e);\n      return defaultTheme;\n    }\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n\n    let effectiveTheme = theme;\n    if (theme === 'system') {\n      effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    }\n\n    root.classList.add(effectiveTheme);\n\n    try {\n      // Store the raw theme value (could be 'system')\n      localStorage.setItem(storageKey, theme);\n    } catch (e) {\n      // Ignore localStorage errors if persistence fails\n      // console.warn('Failed to persist theme to localStorage:', e);\n    }\n  }, [theme, storageKey]);\n\n  const handleSetTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme: handleSetTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = (): ThemeProviderState => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/layout/AppSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Parameter name `Icon` must match one of the following formats: camelCase","line":22,"column":40,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":22,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router';\nimport { Home, Briefcase, Settings, PlusCircle, GripHorizontal } from 'lucide-react';\nimport React from 'react';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\n\n\ninterface AppSidebarProps {\n  className?: string;\n  // isMobileOpen?: boolean; // Example prop if parent controls mobile visibility\n}\n\ninterface NavLinkProps {\n  to: string;\n  children: React.ReactNode;\n  icon?: React.ElementType;\n  onClick?: () => void; // For closing mobile sidebar on navigation\n}\n\nfunction NavLink({ to, children, icon: Icon, onClick }: NavLinkProps) {\n  return (\n    <Link\n      to={to}\n      onClick={onClick}\n      className=\"flex items-center space-x-2 px-2 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-md\"\n      activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50' }}\n    >\n      {Icon && <Icon className=\"h-4 w-4\" />}\n      <span>{children}</span>\n    </Link>\n  );\n}\n\n\nexport function AppSidebar({ className /*, isMobileOpen */ }: AppSidebarProps) {\n  console.log('LINT TEST'); // Added for testing if file changes are picked up\n  // Placeholder data\n  const projects = [\n    { id: '1', name: 'Project Phoenix' },\n    { id: '2', name: 'Operation Chimera' },\n    { id: '3', name: 'Project Griffin' },\n  ];\n\n  const user = {\n    name: 'J. Doe',\n    avatarUrl: '',\n  };\n\n  // const handleLinkClick = () => {\n  //   if (isMobileOpen && closeMobileSidebar) { // Assuming closeMobileSidebar is passed as a prop\n  //     closeMobileSidebar();\n  //   }\n  // };\n\n  return (\n    // Basic responsiveness: fixed for potential mobile overlay, static for desktop\n    // For fixed mobile overlay: inset-y-0 left-0 z-50\n    // Example for mobile: ${isMobileOpen ? 'translate-x-0' : '-translate-x-full'}\n    // This would be controlled by a parent component and state.\n    // For now, it will be hidden on small screens by default if not explicitly shown by a parent.\n    // To make it simpler for now: hidden on mobile, shown on md+\n    // This means a parent component would need to provide a toggle for mobile.\n    // For this isolated component, let's assume it's part of a layout that handles mobile toggling.\n    // The `hidden md:flex` approach is common for this.\n    <aside\n      className={`\n        flex flex-col h-full bg-slate-50 dark:bg-slate-900 border-r border-slate-200 dark:border-slate-800\n        fixed md:static md:translate-x-0\n        inset-y-0 left-0 z-50\n        w-64 transition-transform duration-300 ease-in-out\n        ${className || ''}\n      `}\n    >\n      {/* User/Workspace Info */}\n      <div className=\"p-4 border-b border-slate-200 dark:border-slate-800\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 rounded-full bg-slate-300 dark:bg-slate-700 flex items-center justify-center text-slate-500 dark:text-slate-300\">\n            {user.name.substring(0,1).toUpperCase() || <Settings className=\"w-5 h-5\"/>}\n          </div>\n          <div>\n            <p className=\"font-semibold text-sm text-slate-800 dark:text-slate-200\">{user.name}</p>\n            <p className=\"text-xs text-slate-500 dark:text-slate-400\">Personal Workspace</p>\n          </div>\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-grow\">\n        <nav className=\"py-4 px-2\">\n          {/* Main Navigation Links */}\n          <div className=\"mb-4\">\n            <h3 className=\"px-2 mb-1 text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n              Menu\n            </h3>\n            <div className=\"space-y-1\">\n              <NavLink to=\"/dashboard\" icon={Home} /* onClick={handleLinkClick} */ >Dashboard</NavLink>\n              <NavLink to=\"/projects\" icon={Briefcase} /* onClick={handleLinkClick} */ >Projects</NavLink>\n              <NavLink to=\"/settings\" icon={Settings} /* onClick={handleLinkClick} */ >Settings</NavLink>\n            </div>\n          </div>\n\n          <Separator className=\"my-4\" />\n\n          {/* Project List */}\n          <div className=\"mb-4\">\n            <div className=\"flex justify-between items-center px-2 mb-2\">\n              <h3 className=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                Your Projects\n              </h3>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\">\n                <PlusCircle className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Add new project</span>\n              </Button>\n            </div>\n            <div className=\"space-y-1\">\n              {projects.map((project) => (\n                <Link\n                  key={project.id}\n                  to=\"/projects/$projectId\"\n                  params={{ projectId: project.id }}\n                  // onClick={handleLinkClick}\n                  className=\"group flex items-center justify-between px-2 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-md\"\n                  activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50' }}\n                >\n                  <span className=\"truncate\">{project.name}</span>\n                  <GripHorizontal className=\"h-4 w-4 text-slate-400 dark:text-slate-500 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                </Link>\n              ))}\n              {projects.length === 0 && (\n                <p className=\"px-2 text-xs text-slate-500 dark:text-slate-400\">No projects yet.</p>\n              )}\n            </div>\n          </div>\n        </nav>\n      </ScrollArea>\n\n      <div className=\"p-4 mt-auto border-t border-slate-200 dark:border-slate-800\">\n        <Button variant=\"outline\" className=\"w-full flex items-center justify-center space-x-2\">\n          <PlusCircle className=\"h-4 w-4\" />\n          <span>Add New Project</span>\n        </Button>\n      </div>\n    </aside>\n  );\n}\n\nexport default AppSidebar;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/accordion.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert-dialog.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":6,"column":32,"nodeType":"Literal","endLine":6,"endColumn":58},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":8,"column":20,"nodeType":"Literal","endLine":8,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\nimport * as React from \"react\"\n\nimport { buttonVariants } from \"@ui/components/ui/button\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/avatar.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/badge.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/breadcrumb.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<\"ol\">) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        \"text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn(\"inline-flex items-center gap-1.5\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn(\"hover:text-foreground transition-colors\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"text-foreground font-normal\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"[&>svg]:size-3.5\", className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/button.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/calendar.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":11,"column":40,"nodeType":"Literal","endLine":11,"endColumn":66},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":13,"column":20,"nodeType":"Literal","endLine":13,"endColumn":35},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'Calendar' has too many lines (154). Maximum allowed is 100.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":171,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `button_previous` must match one of the following formats: camelCase","line":55,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":55,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `button_next` must match one of the following formats: camelCase","line":60,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":60,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `month_caption` must match one of the following formats: camelCase","line":65,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":65,"endColumn":22},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `dropdown_root` must match one of the following formats: camelCase","line":73,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":73,"endColumn":22},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `caption_label` must match one of the following formats: camelCase","line":78,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":78,"endColumn":22},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `week_number_header` must match one of the following formats: camelCase","line":92,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":92,"endColumn":27},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `week_number` must match one of the following formats: camelCase","line":96,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":96,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `range_start` must match one of the following formats: camelCase","line":104,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":104,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `range_middle` must match one of the following formats: camelCase","line":108,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":108,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `range_end` must match one of the following formats: camelCase","line":109,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":109,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Method name `Root` must match one of the following formats: camelCase","line":126,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":126,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Method name `Chevron` must match one of the following formats: camelCase","line":136,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":136,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `DayButton` must match one of the following formats: camelCase","line":156,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":156,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Method name `WeekNumber` must match one of the following formats: camelCase","line":157,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":157,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\";\nimport * as React from \"react\";\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\";\n\nimport { Button, buttonVariants } from \"@ui/components/ui/button\"; // Corrected path\n\nimport { cn } from \"@ui/lib/utils\"; // Corrected path\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"];\n}) {\n  const defaultClassNames = getDefaultClassNames();\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"flex gap-4 flex-col md:flex-row relative\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex flex-col w-full gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames.dropdown),\n        caption_label: cn(\n          \"select-none font-medium\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"flex w-full mt-2\", defaultClassNames.week),\n        week_number_header: cn(\n          \"select-none w-(--cell-size)\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-[0.8rem] select-none text-muted-foreground\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"rounded-l-md bg-accent\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          );\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            );\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            );\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          );\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          );\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames();\n\n  const ref = React.useRef<HTMLButtonElement>(null);\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus();\n  }, [modifiers.focused]);\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Calendar, CalendarDayButton };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/card.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":3,"column":20,"nodeType":"Literal","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/carousel.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":9,"column":24,"nodeType":"Literal","endLine":9,"endColumn":50},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":11,"column":20,"nodeType":"Literal","endLine":11,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { Button } from \"@ui/components/ui/button\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -left-12 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -right-12 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/chart.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `__html` trimmed as `_html` must match one of the following formats: camelCase","line":82,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormatTrimmed","endLine":82,"endColumn":15},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ChartTooltipContent' has too many lines (134). Maximum allowed is 100.","line":105,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":247,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `h-2.5 w-2.5` must match one of the following formats: camelCase","line":205,"column":29,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":205,"endColumn":42},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `w-1` must match one of the following formats: camelCase","line":206,"column":29,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":206,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `w-0 border-[1.5px] border-dashed bg-transparent` must match one of the following formats: camelCase","line":207,"column":29,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":207,"endColumn":78},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `my-0.5` must match one of the following formats: camelCase","line":209,"column":29,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":209,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--color-bg` must match one of the following formats: camelCase","line":214,"column":29,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":214,"endColumn":41},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--color-border` must match one of the following formats: camelCase","line":215,"column":29,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":215,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@ui/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: \"line\" | \"dot\" | \"dashed\"\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\"\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          }\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/checkbox.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/command.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/dialog'.","line":13,"column":8,"nodeType":"Literal","endLine":13,"endColumn":34},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":15,"column":20,"nodeType":"Literal","endLine":15,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { SearchIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@ui/components/ui/dialog\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/context-menu.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dialog.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/drawer.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dropdown-menu.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/form.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/label'.","line":14,"column":23,"nodeType":"Literal","endLine":14,"endColumn":48},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":16,"column":20,"nodeType":"Literal","endLine":16,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport * as React from \"react\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { Label } from \"@ui/components/ui/label\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/hover-card.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input-otp.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { MinusIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        \"flex items-center gap-2 has-disabled:opacity-50\",\n        containerClassName\n      )}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn(\"flex items-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        \"data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":3,"column":20,"nodeType":"Literal","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/label.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/navigation-menu.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        \"group/navigation-menu relative flex max-w-max flex-1 items-center justify-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        \"group flex flex-1 list-none items-center justify-center gap-1\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn(\"relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1\"\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n      {...props}\n    >\n      {children}{\" \"}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto\",\n        \"group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={cn(\n        \"absolute top-full left-0 isolate z-50 flex justify-center\"\n      )}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          \"origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/pagination.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":8,"column":40,"nodeType":"Literal","endLine":8,"endColumn":66},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":10,"column":20,"nodeType":"Literal","endLine":10,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { Button, buttonVariants } from \"@ui/components/ui/button\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction Pagination({ className, ...props }: React.ComponentProps<\"nav\">) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn(\"mx-auto flex w-full justify-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn(\"flex flex-row items-center gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<\"li\">) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, \"size\"> &\n  React.ComponentProps<\"a\">\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? \"page\" : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? \"outline\" : \"ghost\",\n          size,\n        }),\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pl-2.5\", className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pr-2.5\", className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/popover.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/progress.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        \"bg-primary/20 relative h-2 w-full overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/radio-group.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { CircleIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/resizable.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GripVerticalIcon } from \"lucide-react\"\nimport * as React from \"react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        \"bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n        className\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/scroll-area.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/select.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/separator.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator-root\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sheet.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sidebar.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":8,"column":24,"nodeType":"Literal","endLine":8,"endColumn":50},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/input'.","line":9,"column":23,"nodeType":"Literal","endLine":9,"endColumn":48},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/separator'.","line":10,"column":27,"nodeType":"Literal","endLine":10,"endColumn":56},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/sheet'.","line":17,"column":8,"nodeType":"Literal","endLine":17,"endColumn":33},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/skeleton'.","line":18,"column":26,"nodeType":"Literal","endLine":18,"endColumn":54},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/tooltip'.","line":24,"column":8,"nodeType":"Literal","endLine":24,"endColumn":35},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/hooks/use-mobile'.","line":26,"column":29,"nodeType":"Literal","endLine":26,"endColumn":51},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":28,"column":20,"nodeType":"Literal","endLine":28,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--sidebar-width` must match one of the following formats: camelCase","line":138,"column":15,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":138,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--sidebar-width-icon` must match one of the following formats: camelCase","line":139,"column":15,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":139,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--sidebar-width` must match one of the following formats: camelCase","line":195,"column":15,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":195,"endColumn":32},{"ruleId":"max-lines","severity":1,"message":"File has too many lines (661). Maximum allowed is 500.","line":557,"column":1,"nodeType":null,"messageId":"exceed","endLine":729,"endColumn":1},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--skeleton-width` must match one of the following formats: camelCase","line":634,"column":13,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":634,"endColumn":31}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { Button } from \"@ui/components/ui/button\" // Corrected path\nimport { Input } from \"@ui/components/ui/input\" // Corrected path\nimport { Separator } from \"@ui/components/ui/separator\" // Corrected path\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@ui/components/ui/sheet\" // Corrected path\nimport { Skeleton } from \"@ui/components/ui/skeleton\" // Corrected path\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@ui/components/ui/tooltip\" // Corrected path\n\nimport { useIsMobile } from \"@ui/hooks/use-mobile\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/skeleton.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":1,"column":20,"nodeType":"Literal","endLine":1,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@ui/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/slider.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35},{"ruleId":"id-length","severity":1,"message":"Identifier name '_' is too short (< 2).","line":52,"column":48,"nodeType":"Identifier","messageId":"tooShort","endLine":52,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sonner.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--normal-bg` must match one of the following formats: camelCase","line":13,"column":11,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":13,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--normal-text` must match one of the following formats: camelCase","line":14,"column":11,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":14,"endColumn":26},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `--normal-border` must match one of the following formats: camelCase","line":15,"column":11,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":15,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/switch.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n        )}\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/table.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":3,"column":20,"nodeType":"Literal","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tabs.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/textarea.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":3,"column":20,"nodeType":"Literal","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@ui/lib/utils\";\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 \",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle-group.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/toggle'.","line":7,"column":32,"nodeType":"Literal","endLine":7,"endColumn":58},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":9,"column":20,"nodeType":"Literal","endLine":9,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { toggleVariants } from \"@ui/components/ui/toggle\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        \"group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs\",\n        className\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        \"min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tooltip.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatInput.tsx","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":66,"column":20,"nodeType":"Identifier","messageId":"tooShort","endLine":66,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SendHorizontal, Paperclip, Mic } from 'lucide-react'; // Example icons\nimport React, { useState, useRef, useEffect, KeyboardEvent } from 'react';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Textarea } from '@/presentation/ui/components/ui/textarea';\nimport { cn } from '@/presentation/ui/lib/utils';\n\nexport interface ChatInputProps {\n  onSubmit: (message: string) => void;\n  isLoading?: boolean;\n  placeholder?: string;\n  className?: string;\n  initialValue?: string;\n}\n\nexport function ChatInput({\n  onSubmit,\n  isLoading = false,\n  placeholder = 'Message...',\n  className,\n  initialValue = '',\n}: ChatInputProps) {\n  const [message, setMessage] = useState(initialValue);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  // Auto-resize textarea height based on content\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto'; // Reset height\n      const scrollHeight = textareaRef.current.scrollHeight;\n      // Max height for textarea, e.g., 5 lines. Adjust as needed.\n      // Assuming line height of ~20-24px. 5 lines ~ 100-120px.\n      const maxHeight = 120;\n      textareaRef.current.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, [message]);\n\n  const handleSendMessage = () => {\n    const trimmedMessage = message.trim();\n    if (trimmedMessage && !isLoading) {\n      onSubmit(trimmedMessage);\n      setMessage('');\n      // Optionally refocus textarea after send\n      // textareaRef.current?.focus();\n    }\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey && !isLoading) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className={cn(\"flex items-end p-2 bg-slate-100 dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700 space-x-2\", className)}>\n      {/* Placeholder for attachment button */}\n      <Button variant=\"ghost\" size=\"icon\" className=\"text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-300\" disabled={isLoading}>\n        <Paperclip className=\"h-5 w-5\" />\n        <span className=\"sr-only\">Attach file</span>\n      </Button>\n\n      <Textarea\n        ref={textareaRef}\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyDown={handleKeyDown}\n        placeholder={placeholder}\n        className=\"flex-1 resize-none border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700/50 focus:ring-sky-500 dark:focus:ring-sky-500 focus:border-sky-500 dark:focus:border-sky-500 min-h-[40px] max-h-[120px] overflow-y-auto rounded-lg px-3 py-2 text-sm\"\n        rows={1} // Start with 1 row, auto-expands\n        disabled={isLoading}\n      />\n\n      {/* Placeholder for voice input button, or use Send if message is not empty */}\n      {message.trim() || isLoading ? (\n        <Button\n            variant=\"default\"\n            size=\"icon\"\n            onClick={handleSendMessage}\n            disabled={isLoading || !message.trim()}\n            className=\"bg-sky-500 hover:bg-sky-600 text-white\"\n        >\n          <SendHorizontal className=\"h-5 w-5\" />\n          <span className=\"sr-only\">Send message</span>\n        </Button>\n      ) : (\n        <Button variant=\"ghost\" size=\"icon\" className=\"text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-300\" disabled={isLoading}>\n          <Mic className=\"h-5 w-5\" />\n          <span className=\"sr-only\">Record voice message</span>\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default ChatInput;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/PersonaList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CheckCircle2 } from 'lucide-react'; // Icon for selected state\nimport React from 'react';\n\nimport { Button } from '@/presentation/ui/components/ui/button'; // Will be used if \"Select\" button per card is desired\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/presentation/ui/components/ui/card';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { cn } from '@/presentation/ui/lib/utils'; // For conditional class names\n\n// Define the Persona type\nexport interface Persona {\n  id: string;\n  name: string;\n  description: string;\n  icon?: React.ElementType; // Placeholder for an icon component or URL string for an image\n  tags?: string[];\n}\n\n// Define props for the PersonaList component\ninterface PersonaListProps {\n  personas: Persona[];\n  selectedPersonaId?: string | null;\n  onSelectPersona: (personaId: string) => void;\n  className?: string;\n  cardClassName?: string;\n}\n\n// Placeholder personas data (will be passed as a prop in a real scenario)\nconst placeholderPersonas: Persona[] = [\n  {\n    id: 'developer',\n    name: 'Software Developer',\n    description: 'Helps with coding tasks, debugging, and software design.',\n    tags: ['Coding', 'Debugging', 'Development'],\n    // icon: Code, // Example if using lucide-react icons directly\n  },\n  {\n    id: 'writer',\n    name: 'Content Writer',\n    description: 'Assists in writing articles, blog posts, and other content.',\n    tags: ['Writing', 'Content Creation', 'Marketing'],\n    // icon: FileText,\n  },\n  {\n    id: 'researcher',\n    name: 'Researcher',\n    description: 'Helps gather information, summarize findings, and analyze data.',\n    tags: ['Research', 'Analysis', 'Data'],\n    // icon: Search,\n  },\n  {\n    id: 'project_manager',\n    name: 'Project Manager',\n    description: 'Assists in planning, organizing, and managing project tasks.',\n    tags: ['Planning', 'Organization', 'Management'],\n    // icon: Briefcase,\n  },\n];\n\n\nexport function PersonaList({\n  personas = placeholderPersonas, // Use placeholder if no personas prop is provided\n  selectedPersonaId,\n  onSelectPersona,\n  className,\n  cardClassName,\n}: PersonaListProps) {\n  return (\n    <ScrollArea className={cn(\"h-[400px] w-full\", className)}> {/* Default height, can be overridden */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-1\">\n        {/* Content for rendering persona items will be added in the next step */}\n        {personas.map((persona) => (\n          <Card\n            key={persona.id}\n            onClick={() => onSelectPersona(persona.id)}\n            className={cn(\n              \"cursor-pointer transition-all hover:shadow-lg dark:hover:bg-slate-800/60\",\n              selectedPersonaId === persona.id\n                ? \"border-sky-500 dark:border-sky-400 ring-2 ring-sky-500 dark:ring-sky-400 bg-sky-50 dark:bg-sky-900/30\"\n                : \"border-slate-200 dark:border-slate-700 hover:border-slate-300 dark:hover:border-slate-600\",\n              cardClassName\n            )}\n          >\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-lg\">{persona.name}</CardTitle>\n                  {persona.icon && <persona.icon className=\"w-8 h-8 mt-2 text-slate-600 dark:text-slate-400\" />}\n                </div>\n                {selectedPersonaId === persona.id && (\n                  <CheckCircle2 className=\"w-6 h-6 text-sky-500 dark:text-sky-400\" />\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <CardDescription className=\"text-sm mb-3\">{persona.description}</CardDescription>\n              {persona.tags && persona.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-1.5\">\n                  {persona.tags.map(tag => (\n                    <span key={tag} className=\"px-2 py-0.5 text-xs bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full\">\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n            {/* Optionally, a select button within the card if preferred over clicking the whole card\n            <CardFooter>\n              <Button\n                variant={selectedPersonaId === persona.id ? \"default\" : \"outline\"}\n                className=\"w-full\"\n                onClick={(e) => { e.stopPropagation(); onSelectPersona(persona.id); }}\n              >\n                {selectedPersonaId === persona.id ? \"Selected\" : \"Select\"}\n              </Button>\n            </CardFooter>\n            */}\n          </Card>\n        ))}\n        {personas.length === 0 && (\n          <p className=\"col-span-full text-center text-slate-500 dark:text-slate-400 py-10\">\n            No personas available for selection.\n          </p>\n        )}\n      </div>\n    </ScrollArea>\n  );\n}\n\nexport default PersonaList;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link }\n  from '@tanstack/react-router';\nimport { ExternalLink, Star, GitFork, CalendarDays } from 'lucide-react'; // Example icons\nimport React from 'react';\n\nimport { Badge } from '@/presentation/ui/components/ui/badge';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/presentation/ui/components/ui/card';\nimport { cn } from '@/presentation/ui/lib/utils';\n\n\n// Define the ProjectSummary type/interface\nexport interface ProjectSummary {\n  id: string;\n  name: string;\n  description: string;\n  lastUpdatedAt?: string | Date; // Could be string or Date object\n  tags?: string[];\n  imageUrl?: string; // Optional image for the card\n  // Example additional fields for a more \"discord-like\" project card feel\n  starCount?: number;\n  forkCount?: number;\n  owner?: {\n    name: string;\n    avatarUrl?: string;\n  };\n}\n\ninterface ProjectCardProps {\n  project: ProjectSummary;\n  className?: string;\n}\n\nexport function ProjectCard({ project, className }: ProjectCardProps) {\n  const lastUpdatedText = project.lastUpdatedAt\n    ? `Updated ${new Date(project.lastUpdatedAt).toLocaleDateString()}`\n    : 'Not updated recently';\n\n  return (\n    <Link\n      to=\"/projects/$projectId\" // TanStack Router v1 style path param\n      params={{ projectId: project.id }}\n      className={cn(\"block hover:shadow-lg transition-shadow duration-200 rounded-lg\", className)}\n    >\n      <Card className=\"h-full flex flex-col\"> {/* Ensure card itself takes full height of Link */}\n        {project.imageUrl && (\n          <img\n            src={project.imageUrl}\n            alt={`${project.name} preview`}\n            className=\"w-full h-32 object-cover rounded-t-lg\"\n          />\n        )}\n        <CardHeader>\n          <CardTitle className=\"text-lg\">{project.name}</CardTitle>\n          {project.owner && (\n            <div className=\"flex items-center text-xs text-slate-500 dark:text-slate-400 mt-1\">\n              {project.owner.avatarUrl && (\n                <img src={project.owner.avatarUrl} alt={project.owner.name} className=\"w-4 h-4 rounded-full mr-1.5\" />\n              )}\n              <span>{project.owner.name}</span>\n            </div>\n          )}\n        </CardHeader>\n        <CardContent className=\"flex-grow\">\n          <CardDescription className=\"text-sm line-clamp-3\">{project.description}</CardDescription>\n          {project.tags && project.tags.length > 0 && (\n            <div className=\"mt-3 flex flex-wrap gap-1.5\">\n              {project.tags.map((tag) => (\n                <Badge key={tag} variant=\"secondary\">{tag}</Badge>\n              ))}\n            </div>\n          )}\n        </CardContent>\n        <CardFooter className=\"text-xs text-slate-500 dark:text-slate-400 flex justify-between items-center pt-4\">\n          <div className=\"flex items-center\">\n            <CalendarDays className=\"w-3.5 h-3.5 mr-1.5\" />\n            <span>{lastUpdatedText}</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {project.starCount !== undefined && (\n              <span className=\"flex items-center\">\n                <Star className=\"w-3.5 h-3.5 mr-1\" /> {project.starCount}\n              </span>\n            )}\n            {project.forkCount !== undefined && (\n              <span className=\"flex items-center\">\n                <GitFork className=\"w-3.5 h-3.5 mr-1\" /> {project.forkCount}\n              </span>\n            )}\n            {/* <ExternalLink className=\"w-4 h-4 hover:text-slate-700 dark:hover:text-slate-300\" /> */}\n          </div>\n        </CardFooter>\n      </Card>\n    </Link>\n  );\n}\n\nexport default ProjectCard;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useParams' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Folder' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":90,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":96},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Parameter name `Icon` must match one of the following formats: camelCase","line":19,"column":57,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":19,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exact' is assigned a value but never used. Allowed unused args must match /^_/u.","line":19,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1060,1063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1060,1063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link, useParams } from '@tanstack/react-router';\nimport { ChevronRight, LayoutDashboard, CheckSquare, MessageSquare, FileText, Settings2, Folder, Hash, Plus } from 'lucide-react';\nimport React from 'react';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/presentation/ui/components/ui/collapsible';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\n\n// Helper for NavLink, similar to AppSidebar but might have different base paths or active states\ninterface ProjectNavLinkProps {\n  to: string;\n  basePath: string; // e.g., /projects/$projectId\n  children: React.ReactNode;\n  icon?: React.ElementType;\n  exact?: boolean; // For matching exact paths\n}\n\nfunction ProjectNavLink({ to, basePath, children, icon: Icon, exact = false }: ProjectNavLinkProps) {\n  const fullPath = `${basePath}${to.startsWith('/') ? to : `/${to}`}`;\n  return (\n    <Link\n      to={fullPath as any} // Cast to any if `to` for Link has stricter types not matching dynamic string\n      className=\"flex items-center space-x-2 px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-md\"\n      activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50' }}\n      // exact={exact} // `exact` prop might not be available or needed depending on router version / setup for activeProps\n    >\n      {Icon && <Icon className=\"h-4 w-4\" />}\n      <span>{children}</span>\n    </Link>\n  );\n}\n\n\ninterface ProjectSidebarProps {\n  className?: string;\n  // projectId would likely be a prop, or read from router params if this component is route-aware\n}\n\nexport function ProjectSidebar({ className }: ProjectSidebarProps) {\n  // In a real scenario, projectId would come from router params or props.\n  // const params = useParams(); // if used in a route component\n  // const projectId = params.projectId;\n  const projectId = \"{projectId}\"; // Placeholder\n\n  // Placeholder data\n  const project = {\n    name: 'Projeto Alpha',\n    // id: projectId,\n  };\n\n  const channels = [\n    { id: 'general', name: 'general', type: 'text' },\n    { id: 'random', name: 'random', type: 'text' },\n    { id: 'dev-logs', name: 'dev-logs', type: 'text' },\n  ];\n\n  return (\n    // This component itself is the content of a ResizablePanel.\n    // The ResizablePanel, ResizablePanelGroup, and ResizableHandle would be used in a parent layout.\n    <div className={`flex flex-col h-full bg-slate-100 dark:bg-slate-900 ${className || ''}`}>\n      {/* Project Header */}\n      <div className=\"p-4 border-b border-slate-200 dark:border-slate-700\">\n        <h2 className=\"text-lg font-semibold text-slate-800 dark:text-slate-100 truncate\">{project.name}</h2>\n        {/* Could add a dropdown here for project actions */}\n      </div>\n\n      <ScrollArea className=\"flex-grow\">\n        <nav className=\"py-3 px-2\">\n          {/* Project Navigation */}\n          <div className=\"space-y-1 mb-4\">\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/overview\" icon={LayoutDashboard}>Overview</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/tasks\" icon={CheckSquare}>Tasks</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/discussions\" icon={MessageSquare}>Discussions</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/files\" icon={FileText}>Files</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/settings\" icon={Settings2}>Settings</ProjectNavLink>\n          </div>\n\n          <Separator className=\"my-3\" />\n\n          {/* Channels/Sections List */}\n          <div>\n            <Collapsible defaultOpen>\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-start px-3 py-2 text-sm font-medium\">\n                  <ChevronRight className=\"h-4 w-4 mr-2 transform transition-transform duration-200 group-[data-state=open]:rotate-90\" />\n                  Channels\n                  <Plus className=\"ml-auto h-4 w-4 text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"pt-1 space-y-0.5 ml-3 border-l border-slate-200 dark:border-slate-700 pl-3\">\n                {channels.map(channel => (\n                  <Link\n                    key={channel.id}\n                    to={`/projects/${projectId}/channels/${channel.id}`}\n                    className=\"flex items-center space-x-2 px-2 py-1.5 text-sm text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-800 rounded-md\"\n                    activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium' }}\n                  >\n                    <Hash className=\"h-3.5 w-3.5\" />\n                    <span className=\"truncate\">{channel.name}</span>\n                  </Link>\n                ))}\n                {channels.length === 0 && (\n                  <p className=\"px-2 py-1.5 text-xs text-slate-500 dark:text-slate-400\">No channels.</p>\n                )}\n              </CollapsibleContent>\n            </Collapsible>\n          </div>\n          {/* Add more collapsible sections if needed, e.g., DMs, Apps */}\n        </nav>\n      </ScrollArea>\n\n      {/* Optional Footer for sidebar actions */}\n      {/* <div className=\"p-2 mt-auto border-t border-slate-200 dark:border-slate-700\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start\">Some Action</Button>\n      </div> */}\n    </div>\n  );\n}\n\nexport default ProjectSidebar;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Parameter name `Icon` must match one of the following formats: camelCase","line":19,"column":44,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":19,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[973,976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[973,976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"id-length","severity":1,"message":"Identifier name 'n' is too short (< 2).","line":46,"column":42,"nodeType":"Identifier","messageId":"tooShort","endLine":46,"endColumn":43},{"ruleId":"id-length","severity":1,"message":"Identifier name 'n' is too short (< 2).","line":125,"column":62,"nodeType":"Identifier","messageId":"tooShort","endLine":125,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router';\nimport { User, MessageSquare, Settings, Plus, Users, Search } from 'lucide-react'; // Added Users, Search, Plus\nimport React from 'react';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/presentation/ui/components/ui/avatar';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\n\n\n// Helper for NavLink\ninterface UserNavLinkProps {\n  to: string;\n  children: React.ReactNode;\n  icon?: React.ElementType;\n  // Add other props like exact if needed for active state matching\n}\n\nfunction UserNavLink({ to, children, icon: Icon }: UserNavLinkProps) {\n  // Assuming user-specific routes might be prefixed, e.g., /user/profile\n  // For now, direct paths as passed.\n  const fullPath = to.startsWith('/') ? to : `/user/${to}`;\n\n  return (\n    <Link\n      to={fullPath as any}\n      className=\"flex items-center space-x-3 px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-md\"\n      activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-semibold' }}\n    >\n      {Icon && <Icon className=\"h-4 w-4\" />}\n      <span>{children}</span>\n    </Link>\n  );\n}\n\ninterface DirectMessageItemProps {\n  id: string;\n  name: string;\n  avatarUrl?: string;\n  status?: 'online' | 'offline' | 'idle'; // Example status\n  isActive?: boolean; // Example if this DM is currently active\n}\n\nfunction DirectMessageItem({ id, name, avatarUrl, status = 'offline', isActive }: DirectMessageItemProps) {\n    const basePath = '/user/dms'; // Placeholder base path for DMs\n    const initials = name.split(' ').map(n => n[0]).join('').substring(0,2).toUpperCase();\n    return (\n        <Link\n            to={`${basePath}/${id}`}\n            className={`flex items-center space-x-3 px-3 py-1.5 text-sm group rounded-md\n                        ${isActive\n                            ? 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium'\n                            : 'text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-800'}`}\n            activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium' }}\n        >\n            <Avatar className=\"h-6 w-6 text-xs\">\n                <AvatarImage src={avatarUrl} alt={name} />\n                <AvatarFallback className={`${status === 'online' ? 'border-2 border-green-500' : ''}`}>\n                    {initials}\n                </AvatarFallback>\n            </Avatar>\n            <span className=\"truncate flex-1\">{name}</span>\n            {/* Optional: Unread count or close button on hover */}\n            {/* <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5 opacity-0 group-hover:opacity-100\">X</Button> */}\n        </Link>\n    );\n}\n\n\ninterface UserSidebarProps {\n  className?: string;\n}\n\nexport function UserSidebar({ className }: UserSidebarProps) {\n  // Placeholder data\n  const currentUser = {\n    name: 'Jules Agent',\n    avatarUrl: 'https://github.com/shadcn.png', // Example avatar\n    status: 'online',\n  };\n\n  const directMessages: DirectMessageItemProps[] = [\n    { id: '1', name: 'Alice Wonderland', avatarUrl: 'https://randomuser.me/api/portraits/women/44.jpg', status: 'online', isActive: true },\n    { id: '2', name: 'Bob The Builder', avatarUrl: 'https://randomuser.me/api/portraits/men/44.jpg', status: 'offline' },\n    { id: '3', name: 'Charlie Chaplin', avatarUrl: 'https://randomuser.me/api/portraits/men/46.jpg', status: 'idle' },\n  ];\n\n  return (\n    <div className={`flex flex-col h-full bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 w-60 ${className || ''}`}>\n      {/* Top section (e.g., Search DMs or \"Find or start a conversation\") */}\n      <div className=\"p-3 border-b border-slate-200 dark:border-slate-700\">\n        <Button variant=\"secondary\" className=\"w-full justify-start text-sm text-slate-500 dark:text-slate-400\">\n            <Search className=\"h-4 w-4 mr-2\"/> Find or start a conversation\n        </Button>\n      </div>\n\n      <ScrollArea className=\"flex-grow px-2 py-2\">\n        <nav className=\"space-y-0.5\">\n          <UserNavLink to=\"/friends\" icon={Users}>Friends</UserNavLink>\n          {/* <UserNavLink to=\"/nitro\" icon={Zap}>Nitro</UserNavLink> Placeholder */}\n          <UserNavLink to=\"/shop\" icon={MessageSquare}>Shop</UserNavLink> {/* Using MessageSquare as placeholder */}\n        </nav>\n\n        <div className=\"mt-3 px-1\">\n            <div className=\"flex justify-between items-center mb-1\">\n                <h3 className=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider px-2\">\n                    Direct Messages\n                </h3>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\">\n                    <Plus className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n                    <span className=\"sr-only\">Create DM</span>\n                </Button>\n            </div>\n            <div className=\"space-y-0.5\">\n                {directMessages.map(dm => <DirectMessageItem key={dm.id} {...dm} />)}\n            </div>\n        </div>\n      </ScrollArea>\n\n      {/* User Panel Footer */}\n      <div className=\"p-2 mt-auto border-t border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src={currentUser.avatarUrl} alt={currentUser.name} />\n            <AvatarFallback>{currentUser.name.split(' ').map(n => n[0]).join('').substring(0,2).toUpperCase()}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 truncate\">\n            <p className=\"text-sm font-medium truncate\">{currentUser.name}</p>\n            <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\">{currentUser.status}</p>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\">\n            <Settings className=\"h-4 w-4\" />\n            <span className=\"sr-only\">User Settings</span>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UserSidebar;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/useIPC.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IElectronIPC' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/ui/hooks/useIPC.ts\n\nimport { ipcService } from '@/presentation/ui/services/ipc.service'; // Using path alias\nimport { IElectronIPC } from '@/presentation/ui/services/ipc.types'; // Using path alias\n\n/**\n * Custom React hook to access the IPC service for communicating\n * with the Electron main process.\n *\n * @returns The instance of the IPCService, providing methods like `invoke`, `on`, `send`.\n *          Refer to `ipc.service.ts` and `ipc.types.ts` for more details on the API.\n *\n * @example\n * const ipc = useIPC();\n *\n * // Invoking a channel\n * useEffect(() => {\n *   const fetchVersion = async () => {\n *     const result = await ipc.invoke<{ version: string }>('app:get-version');\n *     if (result.success && result.data) {\n *       console.log('App Version:', result.data.version);\n *     } else {\n *       console.error('Failed to get app version:', result.error);\n *     }\n *   };\n *   fetchVersion();\n * }, [ipc]);\n *\n * // Subscribing to an event\n * useEffect(() => {\n *   const handleUpdate = (message: any) => {\n *     console.log('Received update:', message);\n *   };\n *   const unsubscribe = ipc.on('app:update-available', handleUpdate);\n *   return () => unsubscribe(); // Cleanup on unmount\n * }, [ipc]);\n */\nexport function useIPC(): typeof ipcService {\n  // The ipcService is a singleton, so we just return it.\n  // No React-specific state or context is needed here unless we wanted to\n  // provide different mock implementations via context, which is not the current design.\n  return ipcService;\n}\n\n// Optional: If we want to expose the raw IElectronIPC interface directly via a hook,\n// which might be useful if the service adds too much opinion or for direct use.\n// However, the service layer provides better abstraction and error handling.\n\n/*\nimport { useState, useEffect } from 'react';\nimport { IElectronIPC } from '@/presentation/ui/services/ipc.types';\n\nexport function useRawElectronIPC(): IElectronIPC | null {\n  const [api, setApi] = useState<IElectronIPC | null>(null);\n\n  useEffect(() => {\n    if (window.electronIPC) {\n      setApi(window.electronIPC);\n    } else {\n      console.warn('[useRawElectronIPC] Electron IPC API not found on window.');\n    }\n  }, []);\n\n  return api;\n}\n*/\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/main.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/styles/globals.css'.","line":3,"column":8,"nodeType":"Literal","endLine":3,"endColumn":32},{"ruleId":"import/order","severity":1,"message":"`@tanstack/react-router` import should occur before import of `react`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":71},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/routeTree.gen'.","line":7,"column":27,"nodeType":"Literal","endLine":7,"endColumn":46}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport '@ui/styles/globals.css'; // Usando alias @ui/styles/\n// import { detectLocale, dynamicActivate } from '@/config/i18n'; // Usando alias @/config/ se i18n for re-adicionado\nimport { createRouter, RouterProvider } from '@tanstack/react-router';\n\nimport { routeTree } from '@ui/routeTree.gen'; // Usando alias @ui/\n\n// Declaração de módulo para o TanStack Router (mantida)\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router;\n  }\n}\n\nconst router = createRouter({ routeTree });\n\nconst rootElement = document.getElementById('root');\nif (!rootElement) {\n  throw new Error(\"Failed to find the root element\");\n}\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(app)/_layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Outlet, createFileRoute } from '@tanstack/react-router';\nimport React, { useState } from 'react';\n\nimport { AppSidebar } from '@/presentation/ui/components/layout/AppSidebar';\n// import { Button } from '@/presentation/ui/components/ui/button'; // For potential mobile toggle\n// import { Menu } from 'lucide-react'; // For potential mobile toggle icon\n\nfunction AppLayoutComponent() {\n  // Placeholder for mobile sidebar toggle state if we were to implement it here\n  // const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);\n\n  // const toggleMobileSidebar = () => setIsMobileSidebarOpen(!isMobileSidebarOpen);\n\n  return (\n    <div className=\"flex h-screen bg-slate-100 dark:bg-slate-950\">\n      {/*\n        AppSidebar is styled with `fixed md:static ... -translate-x-full md:translate-x-0`\n        This means on md+ screens, it will take its w-64 space.\n        On smaller screens, it's fixed and initially off-screen.\n        A button (likely in a top header, not part of this specific layout task)\n        would toggle a class or prop to bring it into view (e.g. 'translate-x-0').\n      */}\n      <AppSidebar\n        className=\"md:flex hidden\" // Standard desktop: always flex (visible). Mobile: hidden by default.\n                                     // A parent component or a header bar would handle the mobile toggle.\n                                     // For example, a header could have a button that sets `isMobileSidebarOpen`\n                                     // which would then pass a different className to AppSidebar like:\n                                     // className={isMobileSidebarOpen ? 'fixed translate-x-0' : 'fixed -translate-x-full'}\n      />\n\n      {/* Mobile Sidebar (example of how it might be toggled, actual toggle button is external) */}\n      {/* {isMobileSidebarOpen && (\n        <div\n            className=\"fixed inset-0 z-40 bg-black/50 md:hidden\"\n            onClick={toggleMobileSidebar} // Backdrop click to close\n        />\n      )}\n      <AppSidebar\n        className={`md:hidden fixed transition-transform duration-300 ease-in-out ${isMobileSidebarOpen ? 'translate-x-0' : '-translate-x-full'}`}\n        // Pass a close function to NavLinks inside AppSidebar for mobile\n        // navLinkOnClick={toggleMobileSidebar}\n      /> */}\n\n\n      {/* Main content area */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Optional: A top header bar for the main content area could go here */}\n        {/* <header className=\"h-14 flex items-center px-4 border-b border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 md:hidden\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={toggleMobileSidebar} className=\"md:hidden\">\n            <Menu className=\"h-6 w-6\" />\n            <span className=\"sr-only\">Open sidebar</span>\n          </Button>\n          <h1 className=\"ml-4 text-lg font-semibold\">Page Title</h1>\n        </header> */}\n\n        <div className=\"flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n}\n\n// This defines the layout route for the '(app)' group.\nexport const Route = createFileRoute('/(app)/_layout')({\n  component: AppLayoutComponent,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(public)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(public)/home/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/__root.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1197,1200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1197,1200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1452,1455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1452,1455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1603,1606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1603,1606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2317,2320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2317,2320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2817,2820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2817,2820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2857,2860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2857,2860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3146,3149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3146,3149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3497,3500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3497,3500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4090,4093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4090,4093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'wrappedListener' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":156,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6293,6296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6293,6296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7268,7271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7268,7271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/ui/services/ipc.service.ts\n\nimport { IPCChannel } from '@/shared/ipc-channels';\nimport {\n  ChatSendMessagePayload,\n  ChatStreamEventPayload,\n  ChatStreamTokenPayload,\n  ChatStreamEndPayload,\n} from '@/shared/ipc-chat.types';\nimport { ProjectListItem } from '@/shared/ipc-project.types'; // Assuming this file and type exist\n\nimport { IElectronIPC, IPCResult } from './ipc.types';\n\nconst electronIPC = window.electronIPC;\n\nconst isElectronEnvironment = (): boolean => {\n  return !!electronIPC;\n};\n\n/**\n * A wrapper around Electron's IPC communication, providing typed methods\n * for interacting with the main process from the renderer.\n */\nclass IPCService {\n  private api: IElectronIPC | null = null;\n\n  constructor() {\n    if (isElectronEnvironment() && electronIPC) {\n      this.api = electronIPC;\n    } else {\n      console.warn(\n        '[IPCService] Electron IPC API not found. Using mock implementation. ' +\n        'Ensure preload script is correctly configured and loaded if running in Electron.',\n      );\n      this.api = this.createMockAPI();\n    }\n  }\n\n  private createMockAPI(): IElectronIPC {\n    const mockInvoke = async <T>(channel: string, ...args: any[]): Promise<T> => {\n      console.warn(`[MockIPC] Invoke: '${channel}' with args:`, args);\n      if (channel === IPCChannel.CHAT_SEND_MESSAGE) {\n        // Simulate sending message, no specific data needed for void promise\n        return undefined as any;\n      }\n      throw new Error(`MockIPC: Channel '${channel}' not implemented.`);\n    };\n\n    const mockOn = (channel: string, listener: (...args: any[]) => void): (() => void) => {\n      console.warn(`[MockIPC] Listener registered for channel: '${channel}'`, listener);\n      if (channel === IPCChannel.CHAT_STREAM_EVENT) {\n        // Simulate some stream events for chat for testing purposes\n        setTimeout(() => listener({ type: 'token', data: 'Hello' } as ChatStreamTokenPayload), 100);\n        setTimeout(() => listener({ type: 'token', data: ' world' } as ChatStreamTokenPayload), 200);\n        setTimeout(() => listener({ type: 'end' } as ChatStreamEndPayload), 300);\n      }\n      return () => {\n        console.warn(`[MockIPC] Listener removed for channel: '${channel}'`, listener);\n      };\n    };\n\n    const mockSend = (channel: string, ...args: any[]): void => {\n      console.warn(`[MockIPC] Send: '${channel}' with args:`, args);\n    };\n\n    return {\n      invoke: mockInvoke,\n      on: mockOn,\n      send: mockSend,\n      removeListener: (channel: string, listener) => {\n        console.warn(`[MockIPC] removeListener called for '${channel}'`, listener);\n      },\n      removeAllListeners: (channel: string) => {\n        console.warn(`[MockIPC] removeAllListeners called for '${channel}'`);\n      },\n    };\n  }\n\n  public async invoke<TData = any>(\n    channel: string,\n    ...args: any[]\n  ): Promise<IPCResult<TData>> {\n    if (!this.api) {\n      return { success: false, error: { message: 'IPC API not available' } };\n    }\n    try {\n      const result = await this.api.invoke<TData>(channel, ...args);\n      return { success: true, data: result };\n    } catch (error: any) {\n      console.error(`[IPCService] Error invoking channel '${channel}':`, error);\n      return {\n        success: false,\n        error: {\n          message: error.message || 'An unknown IPC error occurred',\n          name: error.name,\n          stack: error.stack,\n        },\n      };\n    }\n  }\n\n  public on(channel: string, listener: (...args: any[]) => void): () => void {\n    if (!this.api || !this.api.on) {\n      console.error('[IPCService] API not initialized for on.');\n      return () => { /* no-op */ };\n    }\n    // Assuming the listener passed to preload's `on` will handle the (event, ...data) signature\n    // and call our listener with just the data. If not, this wrapper is needed:\n    // const wrappedListener = (event: any, ...data: any[]) => listener(...data);\n    // For now, assume direct pass-through or that preload handles it.\n    return this.api.on(channel, listener);\n  }\n\n  public send(channel: string, ...args: any[]): void {\n    if (!this.api || !this.api.send) {\n      console.error('[IPCService] API not initialized for send.');\n      return;\n    }\n    this.api.send(channel, ...args);\n  }\n\n  // --- Chat Specific Methods ---\n\n  /**\n   * Sends a chat message to the main process.\n   * @param payload The chat message payload.\n   * @returns A promise that resolves with an IPCResult (void on success, or error).\n   *          The main process might return a job ID or some other acknowledgement.\n   *          For now, typed as Promise<IPCResult<void>> assuming no specific data on success.\n   */\n  public async sendChatMessage(payload: ChatSendMessagePayload): Promise<IPCResult<void>> {\n    return this.invoke<void>(IPCChannel.CHAT_SEND_MESSAGE, payload);\n  }\n\n  /**\n   * Subscribes to chat stream events from the main process.\n   * @param listener The callback function to execute when a chat stream event is received.\n   *                 The listener will be called with the ChatStreamEventPayload.\n   * @returns An unsubscribe function.\n   */\n  public onChatStreamEvent(listener: (payload: ChatStreamEventPayload) => void): () => void {\n    // The generic 'on' method's listener signature is (...args: any[]) => void.\n    // The actual data passed by Electron's ipcRenderer.on is (event, ...argsFromMain).\n    // The IElectronIPC interface's 'on' method is expected to be implemented in preload\n    // such that it calls the provided listener with only the relevant data payload(s),\n    // not the 'event' object, or that it expects a listener that can handle the event object.\n    //\n    // If preload does: contextBridge.exposeInMainWorld('electronIPC', { on: (ch, cb) => ipcRenderer.on(ch, (evt, data) => cb(data)) } )\n    // then our listener here will receive `data` as the first arg.\n    //\n    // If preload does: contextBridge.exposeInMainWorld('electronIPC', { on: (ch, cb) => ipcRenderer.on(ch, cb) } )\n    // then our listener here will receive `(event, data)`.\n    //\n    // The current IElectronIPC.on is typed as: (channel: string, listener: (...args: any[]) => void).\n    // To be safe and ensure our typed listener gets the correct payload, we wrap it.\n    const wrappedListener = (_event: any, payload: ChatStreamEventPayload) => {\n      // This assumes the main process sends the payload as the first argument after the event.\n      // If the main process sends multiple arguments, this would need to be adjusted.\n      // For chat stream, it's typical to send a single payload object.\n      listener(payload);\n    };\n\n    // If the `this.api.on` is already designed to pass only the payload, then `listener` can be passed directly.\n    // Given the generic nature of `this.api.on`, a wrapper is safer until preload is defined.\n    // However, if `window.electronIPC.on` is defined as `(channel, listener) => ipcRenderer.on(channel, (event, data) => listener(data))`,\n    // then our `listener` here would correctly receive just `data`.\n    // Let's assume the preload script will be written to simplify this for the renderer,\n    // meaning it calls the listener with only the data payload.\n    return this.on(IPCChannel.CHAT_STREAM_EVENT, listener as (...args: any[]) => void);\n  }\n  // --- Project Specific Methods ---\n\n  /**\n   * Fetches the list of projects from the main process.\n   * @returns A promise that resolves with an IPCResult containing ProjectListItem[] or an error.\n   */\n  public async listProjects(): Promise<IPCResult<ProjectListItem[]>> {\n    return this.invoke<ProjectListItem[]>(IPCChannel.PROJECT_LIST_QUERY);\n  }\n}\n\nexport const ipcService = new IPCService();\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[574,577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[574,577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[605,608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[605,608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1022,1025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1022,1025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1362,1365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1362,1365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1849,1852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1849,1852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2875,2878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2875,2878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/ui/services/ipc.types.ts\n\n/**\n * Defines the structure of the API exposed by Electron's preload script\n * to the renderer process for IPC communication.\n */\nexport interface IElectronIPC {\n  /**\n   * Sends a message to the main process via `ipcRenderer.invoke` and returns a Promise\n   * that resolves with the response from the main process.\n   * @param channel The IPC channel to invoke.\n   * @param args Arguments to send to the main process.\n   * @returns A Promise that resolves with the result from the IPC handler.\n   */\n  invoke: <T = any>(channel: string, ...args: any[]) => Promise<T>;\n\n  /**\n   * Subscribes to an IPC channel for messages sent from the main process.\n   * @param channel The IPC channel to listen on.\n   * @param listener The function to call with messages from the main process.\n   *                 The listener receives `(event, ...args)`.\n   * @returns A function to unsubscribe the listener from the channel.\n   */\n  on: (channel: string, listener: (...args: any[]) => void) => () => void;\n\n  /**\n   * Sends a message to the main process via `ipcRenderer.send`. This is typically\n   * for one-way communication where no response is expected.\n   * @param channel The IPC channel to send the message on.\n   * @param args Arguments to send to the main process.\n   */\n  send: (channel: string, ...args: any[]) => void;\n\n  /**\n   * Removes a specific listener for an IPC channel.\n   * Note: This is less commonly exposed directly if `on` returns an unsubscribe function.\n   * However, including it for completeness based on some preload patterns.\n   * If `on` returns an unsubscribe function, that's generally preferred.\n   * @param channel The IPC channel.\n   * @param listener The exact listener function that was subscribed.\n   */\n  removeListener?: (channel: string, listener: (...args: any[]) => void) => void;\n\n  /**\n   * Removes all listeners for a specific IPC channel.\n   * @param channel The IPC channel.\n   */\n  removeAllListeners?: (channel: string) => void;\n}\n\n/**\n * It's common to expose the IPC API under a specific key on the window object.\n * This declares that key for TypeScript.\n */\ndeclare global {\n  interface Window {\n    electronIPC?: IElectronIPC; // Or 'api', 'coreAPI', etc. Matching the preload script.\n                                // Using 'electronIPC' as a placeholder name for the refactored version.\n  }\n}\n\n// It's also useful to define known IPC channel names.\n// These would ideally be shared between main, preload, and renderer.\n// For now, this is a placeholder. These should be based on actual use cases and main process handlers.\n// Example:\n// export enum IPCChannel {\n//   GET_APP_VERSION = 'app:get-version',\n//   CREATE_PROJECT = 'project:create',\n//   // ... other channels\n// }\n\n// Placeholder for IPC result structure, can be expanded.\nexport interface IPCResult<T = any> {\n  success: boolean;\n  data?: T;\n  error?: {\n    message: string;\n    name?: string;\n    stack?: string;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-channels.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CHAT_SEND_MESSAGE` must match one of the following formats: camelCase","line":9,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `CHAT_STREAM_EVENT` must match one of the following formats: camelCase","line":10,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `PROJECT_LIST_QUERY` must match one of the following formats: camelCase","line":22,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":22,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/shared/ipc-channels.ts\n\n/**\n * Defines standardized channel names for Electron IPC communication\n * throughout the refactored application.\n */\nexport const IPCChannel = {\n  // Chat Feature\n  CHAT_SEND_MESSAGE: 'chat:sendMessage', // Renderer -> Main\n  CHAT_STREAM_EVENT: 'chat:streamEvent', // Main -> Renderer (for streaming responses)\n\n  // Onboarding Feature (example, to be defined in TSK-FE-IPC-ONBOARD if/when unblocked)\n  // ONBOARDING_GET_USER: 'onboarding:getUser',\n  // ONBOARDING_CREATE_USER: 'onboarding:createUser',\n  // ONBOARDING_GET_LLM_PROVIDERS: 'onboarding:getLlmProviders',\n  // ONBOARDING_CREATE_LLM_CONFIG: 'onboarding:createLlmConfig',\n\n  // Generic/App level (example)\n  // APP_GET_VERSION: 'app:getVersion',\n\n  // Project Feature\n  PROJECT_LIST_QUERY: 'project:list', // Renderer -> Main (Query)\n  // PROJECT_CREATE_COMMAND: 'project:create', // Example for another task\n} as const;\n\n// Helper type to extract channel values\nexport type IPCChannelValue = typeof IPCChannel[keyof typeof IPCChannel];\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-chat.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-project.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/result.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
