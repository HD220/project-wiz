[{"filePath":"/app/src_refactored/presentation/ui/components/common/MarkdownRenderer.tsx","messages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'a' is too short (< 2).","line":55,"column":5,"nodeType":"Identifier","messageId":"tooShort","endLine":55,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport ReactMarkdown, { Options } from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n// import rehypeRaw from 'rehype-raw'; // Optional: if you need to render raw HTML from markdown\n// For syntax highlighting:\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'; // Choose a theme\n\nimport { cn } from '@/presentation/ui/lib/utils';\n\ninterface MarkdownRendererProps {\n  content: string | null | undefined;\n  // Custom classes for the wrapper div\n  className?: string;\n  // Custom classes specifically for Tailwind Prose\n  proseClassName?: string;\n  // Allow overriding default HTML element rendering\n  components?: Options['components'];\n}\n\nexport function MarkdownRenderer({\n  content,\n  className,\n  proseClassName,\n  components: customComponents,\n}: MarkdownRendererProps) {\n  if (content === null || content === undefined) {\n    return null;\n  }\n\n  // Base prose classes for Tailwind Typography. Can be extended or overridden by `proseClassName`.\n  const defaultProseSetup = cn(\n    // General styling\n    \"prose prose-sm dark:prose-invert max-w-none\",\n    // Spacing for common elements\n    \"prose-p:my-1.5 prose-headings:my-3 prose-ul:my-1.5 prose-ol:my-1.5 prose-li:my-0.5\",\n    // Blockquotes\n    \"prose-blockquote:my-2 prose-blockquote:not-italic prose-blockquote:border-l-4 prose-blockquote:pl-3 prose-blockquote:text-slate-600 dark:prose-blockquote:text-slate-400\",\n    // Reset <pre> for custom code block styling or syntax highlighter\n    \"prose-pre:my-2 prose-pre:p-0 prose-pre:bg-transparent prose-pre:rounded-md\",\n    // Inline code\n    \"prose-code:px-1 prose-code:py-0.5 prose-code:text-xs prose-code:font-mono prose-code:rounded prose-code:bg-slate-100 dark:prose-code:bg-slate-800\",\n    // Links\n    \"prose-a:text-sky-600 hover:prose-a:text-sky-700 dark:prose-a:text-sky-400 dark:hover:prose-a:text-sky-300 hover:prose-a:underline\",\n    // Tables\n    \"prose-table:my-2 prose-table:text-sm prose-thead:border-b prose-th:px-2 prose-th:py-1 prose-th:font-semibold prose-td:px-2 prose-td:py-1 prose-tr:border-b\",\n    // Allow parent to provide additional/override prose classes\n    proseClassName,\n  );\n\n  // Default component overrides, can be merged with or overridden by `customComponents` prop\n  const defaultComponents: Options['components'] = {\n    // Ensure links open in a new tab and have accessible content.\n    // The key 'a' correctly overrides the default anchor tag rendering.\n    a: ({ node: _node, children, href, ...props }) => {\n      // Use children if available, otherwise use href as content for accessibility.\n      // This ensures the anchor is not empty.\n      const anchorContent = children || href;\n      return (\n        <a href={href} {...props} target=\"_blank\" rel=\"noopener noreferrer\">\n          {anchorContent}\n        </a>\n      );\n    },\n\n    // Custom styling for code blocks (pre > code)\n    // This is a basic version. For syntax highlighting, you'd integrate react-syntax-highlighter here.\n    // `node` is used here, so no underscore\n    code({ node, className: langClassName, children, ...props }) {\n      const match = /language-(\\w+)/.exec(langClassName || '');\n      const language = match ? match[1] : null;\n\n      // Fenced code block\n      if (node?.parentElement?.tagName === 'pre') {\n        return (\n          <div className=\"my-2 bg-slate-100 dark:bg-slate-800 rounded-md overflow-hidden text-xs\">\n            {language && (\n              <div className=\"px-3 py-1 text-xs text-slate-500 dark:text-slate-400 border-b border-slate-200 dark:border-slate-700\">\n                {language}\n              </div>\n            )}\n            <pre className=\"p-3 overflow-x-auto\"><code className={cn(\"font-mono\", langClassName)} {...props}>{children}</code></pre>\n          </div>\n        );\n      }\n\n      // Inline code (already styled by prose-code:)\n      return (\n        <code className={langClassName} {...props}>\n          {children}\n        </code>\n      );\n    },\n  };\n\n  const mergedComponents = { ...defaultComponents, ...customComponents };\n\n  return (\n    <div className={cn(defaultProseSetup, className)}>\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        // rehypePlugins={[rehypeRaw]} // Uncomment if rendering raw HTML from markdown is needed and trusted\n        components={mergedComponents}\n      >\n        {content}\n      </ReactMarkdown>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]}]