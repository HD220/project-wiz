[{"filePath":"/app/src_refactored/core/application/common/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/executable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/common/ports/use-case.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/events/i-job-event-emitter.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/job-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-agent-executor.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-chat.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-embedding.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/ports/services/i-tool-registry.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/abstract-queue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/queue/events/job-event.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-interaction.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-state.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/agent-tool.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/chat.service.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":16,"column":69,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":16,"endColumn":94}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/services/chat.service.ts\nimport { injectable, inject } from 'inversify';\n\n// Assuming a logger is useful\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { ILLMAdapter, ILLMAdapterToken } from '@/core/ports/adapters/llm-adapter.interface';\n// import { LanguageModelMessage } from '@/core/ports/adapters/llm-adapter.types'; // Not used\n\nimport {\n  ChatSendMessagePayload,\n  ChatStreamEventPayload,\n  ChatStreamTokenPayload,\n  ChatStreamEndPayload,\n  ChatStreamErrorPayload\n} from '@/shared/ipc-chat.types';\nimport { Result, ok, error as resultError } from '@/shared/result'; // Corrected import names\n\nimport { IChatService, IChatServiceSendMessageResponse } from '../ports/services/i-chat.service';\n\n@injectable()\nexport class ChatService implements IChatService {\n  constructor(\n    @inject(ILLMAdapterToken) private readonly llmAdapter: ILLMAdapter,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n  ) {}\n\n  async handleSendMessageStream(\n    payload: ChatSendMessagePayload,\n    sendStreamEventCallback: (event: ChatStreamEventPayload) => void,\n  ): Promise<Result<IChatServiceSendMessageResponse, Error>> {\n    this.logger.info(`[ChatService] Handling send message stream for session: ${payload.sessionId}`);\n\n    if (!this.llmAdapter) {\n      return this._handleMissingAdapter(sendStreamEventCallback);\n    }\n    if (!payload.messages || payload.messages.length === 0) {\n      return this._handleEmptyMessages(sendStreamEventCallback);\n    }\n    if (typeof this.llmAdapter.streamText !== 'function') {\n      return this._handleUnsupportedStream(sendStreamEventCallback);\n    }\n\n    return this._processLLMStream(payload, sendStreamEventCallback);\n  }\n\n  private _handleMissingAdapter(sendStreamEventCallback: (event: ChatStreamEventPayload) => void): Result<IChatServiceSendMessageResponse, Error> {\n    this.logger.error('[ChatService] LLMAdapter not available.');\n    this.sendMockStream(sendStreamEventCallback, \"LLMAdapter not configured. Mock response enabled.\");\n    return ok({ message: \"Message received, mock streaming started due to no LLM adapter.\" });\n  }\n\n  private _handleEmptyMessages(sendStreamEventCallback: (event: ChatStreamEventPayload) => void): Result<IChatServiceSendMessageResponse, Error> {\n    this.logger.warn('[ChatService] No messages in payload. Sending generic mock response.');\n    this.sendMockStream(sendStreamEventCallback, \"No messages provided. Here's a mock reply.\");\n    return ok({ message: \"No messages in payload, mock streaming started.\" });\n  }\n\n  private _handleUnsupportedStream(sendStreamEventCallback: (event: ChatStreamEventPayload) => void): Result<IChatServiceSendMessageResponse, Error> {\n    this.logger.error('[ChatService] LLMAdapter does not support streamText method.');\n    this.sendMockStream(sendStreamEventCallback, \"LLMAdapter does not support streaming. Mock response.\");\n    return ok({ message: \"LLMAdapter does not support streaming, mock streaming started.\" });\n  }\n\n  private async _processLLMStream(\n    payload: ChatSendMessagePayload,\n    sendStreamEventCallback: (event: ChatStreamEventPayload) => void\n  ): Promise<Result<IChatServiceSendMessageResponse, Error>> {\n    try {\n      let effectiveMessages = payload.messages;\n      if (effectiveMessages.length === 0 || (effectiveMessages.length === 1 && effectiveMessages[0].role === 'system')) {\n        effectiveMessages.push({ role: 'user', content: 'Hello!' });\n      }\n\n      const simplePrompt = effectiveMessages.map(message => `${message.role}: ${message.content}`).join('\\n');\n      const stream = this.llmAdapter.streamText(simplePrompt, payload.options);\n\n      for await (const result of stream) {\n        if (result.isSuccess()) {\n          const tokenPayload: ChatStreamTokenPayload = { type: 'token', data: result.value };\n          sendStreamEventCallback(tokenPayload);\n        } else {\n          this.logger.error('[ChatService] Error from LLM stream:', result.error);\n          const errorPayload: ChatStreamErrorPayload = { type: 'error', error: { message: result.error.message, name: result.error.name }};\n          sendStreamEventCallback(errorPayload);\n        }\n      }\n      const endPayload: ChatStreamEndPayload = { type: 'end' };\n      sendStreamEventCallback(endPayload);\n\n      return ok({ message: \"Message received, streaming started.\" });\n    } catch (error: unknown) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.logger.error('[ChatService] Error processing stream with LLMAdapter:', err);\n      const errorPayload: ChatStreamErrorPayload = { type: 'error', error: { message: err.message, name: err.name }};\n      sendStreamEventCallback(errorPayload);\n      const endPayload: ChatStreamEndPayload = { type: 'end' };\n      sendStreamEventCallback(endPayload);\n      return resultError(new Error(`Failed to process stream with LLMAdapter: ${err.message}`));\n    }\n  }\n\n  private sendMockStream(sendStreamEventCallback: (event: ChatStreamEventPayload) => void, messageText: string): void {\n    this.logger.warn(`[ChatService] Sending mock stream: ${messageText}`);\n    const tokens = messageText.split(' ');\n    let delay = 0;\n    for (const token of tokens) {\n        delay += 100;\n        setTimeout(() => {\n            const tokenPayload: ChatStreamTokenPayload = { type: 'token', data: token + \" \" };\n            sendStreamEventCallback(tokenPayload);\n        }, delay);\n    }\n    setTimeout(() => {\n        const endPayload: ChatStreamEndPayload = { type: 'end' };\n        sendStreamEventCallback(endPayload);\n    }, delay + 100);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/generic-agent-executor.service.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":8,"column":90,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":8,"endColumn":123},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":75,"fix":{"range":[636,636],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":52,"fix":{"range":[714,714],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur after import of `@/core/ports/adapters/llm-adapter.types`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":52,"fix":{"range":[637,1096],"text":"import {\n  JobProcessingOutput,\n  AgentExecutionPayload,\n  ExecutionHistoryEntry,\n  AgentExecutorStatus,\n} from '@/core/domain/job/job-processing.types';\nimport { JobEntity } from '@/core/domain/job/job.entity';\nimport { ActivityHistoryVO } from '@/core/domain/job/value-objects/activity-history.vo';\nimport { LanguageModelMessage } from '@/core/ports/adapters/llm-adapter.types';\nimport { TYPES } from '@/infrastructure/ioc/types'; // Added import for TYPES\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":23,"nodeType":"Literal","endLine":10,"endColumn":51},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":10,"column":53,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":10,"endColumn":78},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":41,"column":89,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":41,"endColumn":107}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"// src_refactored/core/application/services/generic-agent-executor.service.ts\nimport { injectable, inject } from 'inversify';\n\nimport { ApplicationError } from '@/core/application/common/errors';\nimport { IAgentExecutor } from '@/core/application/ports/services/i-agent-executor.interface';\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { Agent } from '@/core/domain/agent/agent.entity';\nimport { IAgentRepository } from '@/core/domain/agent/ports/agent-repository.interface'; // Removed AGENT_REPOSITORY_TOKEN\nimport { AgentIdVO } from '@/core/domain/agent/value-objects/agent-id.vo';\nimport { TYPES } from '@/infrastructure/ioc/types'; // Added import for TYPES\nimport {\n  JobProcessingOutput,\n  AgentExecutionPayload,\n  ExecutionHistoryEntry,\n  AgentExecutorStatus,\n} from '@/core/domain/job/job-processing.types';\nimport { JobEntity } from '@/core/domain/job/job.entity';\nimport { ActivityHistoryVO } from '@/core/domain/job/value-objects/activity-history.vo';\nimport { LanguageModelMessage } from '@/core/ports/adapters/llm-adapter.types';\n\nimport { AgentInteractionService } from './agent-interaction.service';\nimport { AgentStateService } from './agent-state.service';\nimport { AgentToolService } from './agent-tool.service';\n\n// Keep ExecutionState here as it's central to this orchestrator\ninterface ExecutionState {\n  goalAchieved: boolean;\n  iterations: number;\n  maxIterations: number;\n  llmResponseText: string;\n  assistantMessage: LanguageModelMessage | null;\n  replanAttemptsForEmptyResponse: number;\n  criticalErrorEncounteredThisTurn: boolean;\n  activityHistory: ActivityHistoryVO;\n  executionHistory: ExecutionHistoryEntry[];\n}\n\n@injectable()\nexport class GenericAgentExecutor implements IAgentExecutor {\n  constructor(\n    @inject(TYPES.IAgentRepository) private readonly agentRepository: IAgentRepository, // Corrected token\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n    @inject(AgentInteractionService) private readonly agentInteractionService: AgentInteractionService,\n    @inject(AgentToolService) private readonly agentToolService: AgentToolService,\n    @inject(AgentStateService) private readonly agentStateService: AgentStateService,\n  ) {}\n\n  public async process(\n    job: JobEntity<AgentExecutionPayload, JobProcessingOutput>\n  ): Promise<JobProcessingOutput> {\n    const jobPayload = job.payload;\n    const agentId = jobPayload.agentId;\n    const jobId = job.id;\n\n    this.logger.info(`Processing Job ID: ${jobId.value} with Agent ID: ${agentId}`, { jobId: jobId.value, agentId });\n\n    const agent = await this._fetchAgent(agentId, job);\n    // Use AgentStateService to initialize\n    const executionState = this.agentStateService.initializeExecutionState(job, agent);\n\n    this.logger.info(`Job ID: ${jobId.value} processing attempt: ${job.attemptsMade}`);\n    job.updateProgress(10);\n    this.logger.info(`Max iterations for Job ID: ${jobId.value} set to ${executionState.maxIterations}`);\n\n    await this._executionLoop(job, agent, executionState);\n\n    return this._constructFinalResult(job, executionState);\n  }\n\n  private async _executionLoop(\n    job: JobEntity<AgentExecutionPayload, JobProcessingOutput>,\n    agent: Agent,\n    executionState: ExecutionState\n  ): Promise<void> {\n    while (this._shouldContinueExecution(executionState)) {\n      executionState.iterations++;\n      this.logger.info(`Starting LLM interaction cycle ${executionState.iterations} for Job ID: ${job.id.value}`);\n      job.updateProgress(10 + (80 * executionState.iterations) / executionState.maxIterations);\n\n      // Delegate to AgentInteractionService\n      await this.agentInteractionService.performLlmInteraction(job, agent, executionState);\n\n      if (executionState.criticalErrorEncounteredThisTurn) break;\n\n      // Delegate to AgentToolService if there are tool calls\n      if (executionState.assistantMessage?.tool_calls && executionState.assistantMessage.tool_calls.length > 0) {\n        await this.agentToolService.handleToolCallsIfPresent(job, agent, executionState);\n      }\n\n      if (executionState.criticalErrorEncounteredThisTurn) break;\n\n      // Delegate to AgentStateService\n      this.agentStateService.checkGoalAchieved(executionState);\n\n      if (this._handleEndOfLoopConditions(job, executionState)) break;\n    }\n  }\n\n  private _shouldContinueExecution(state: ExecutionState): boolean {\n    return state.iterations < state.maxIterations && !state.goalAchieved && !state.criticalErrorEncounteredThisTurn;\n  }\n\n  private _handleEndOfLoopConditions(job: JobEntity<AgentExecutionPayload, JobProcessingOutput>, executionState: ExecutionState): boolean {\n    if (executionState.goalAchieved) {\n      this.logger.info(`Goal achieved for Job ID: ${job.id.value} in iteration ${executionState.iterations}.`);\n      return true;\n    }\n    if (executionState.iterations >= executionState.maxIterations) {\n      this.logger.info(`Max iterations reached for Job ID: ${job.id.value}.`);\n      return true;\n    }\n    return false;\n  }\n\n  private async _fetchAgent(agentId: string, job: JobEntity<AgentExecutionPayload, JobProcessingOutput>) {\n    const agentResult = await this.agentRepository.findById(AgentIdVO.create(agentId));\n    if (agentResult.isError() || !agentResult.value) {\n      const message = `Agent with ID ${agentId} not found or error fetching.`;\n      this.logger.error(message, agentResult.isError() ? agentResult.error : undefined);\n      job.addLog(message, 'ERROR');\n      throw new ApplicationError(message);\n    }\n    return agentResult.value;\n  }\n\n  private _constructFinalResult(\n    job: JobEntity<AgentExecutionPayload, JobProcessingOutput>,\n    state: ExecutionState,\n  ): JobProcessingOutput {\n    if (state.goalAchieved) {\n      return this._createJobProcessingOutput(job, state, AgentExecutorStatus.SUCCESS, `Goal achieved. Last LLM response: ${state.llmResponseText}`);\n    }\n    if (state.criticalErrorEncounteredThisTurn) {\n      const lastErrorEntry = state.executionHistory.slice().reverse().find((entry) => entry.type.endsWith('_error'));\n      const errorMessage = lastErrorEntry?.error ? String(lastErrorEntry.error) : 'Unknown critical error';\n      const finalMessage = `Processing stopped due to a critical error after ${state.iterations} iterations. Error: ${errorMessage}`;\n      job.addLog(finalMessage, 'ERROR');\n      throw new ApplicationError(finalMessage);\n    }\n    if (state.iterations >= state.maxIterations) {\n      const finalMessage = `Max iterations (${state.maxIterations}) reached. Goal not achieved. Last LLM response: ${state.llmResponseText}`;\n      job.addLog(finalMessage, 'WARN');\n      throw new ApplicationError(finalMessage);\n    }\n\n    const finalMessage = `Processing stopped unexpectedly after ${state.iterations} iterations. Last LLM response: ${state.llmResponseText}`;\n    this.logger.warn(finalMessage, { jobId: job.id.value });\n    job.addLog(finalMessage, 'ERROR');\n    throw new ApplicationError(finalMessage);\n  }\n\n  private _createJobProcessingOutput(\n    job: JobEntity<AgentExecutionPayload, JobProcessingOutput>,\n    state: ExecutionState,\n    status: AgentExecutorStatus,\n    message: string,\n  ): JobProcessingOutput {\n    const output = status === AgentExecutorStatus.SUCCESS ? { message: state.llmResponseText, history: this._getSerializableHistory(job) } : undefined;\n    if (status === AgentExecutorStatus.SUCCESS) {\n      job.updateProgress(100);\n    }\n\n    return {\n      jobId: job.id.value,\n      status,\n      message,\n      output,\n      history: this._getSerializableHistory(job),\n      errors: state.executionHistory.filter((entry) => entry.type.endsWith('_error')),\n    };\n  }\n\n  private _getSerializableHistory(job: JobEntity<AgentExecutionPayload, JobProcessingOutput>) {\n    return job.getConversationHistory().entries.map((entry) => (entry.toPersistence ? entry.toPersistence() : entry.props));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/services/tool-validation.service.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":4,"column":99,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":4,"endColumn":137},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":57,"fix":{"range":[357,357],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":52,"fix":{"range":[435,435],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur after import of `@/core/tools/tool.interface`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":52,"fix":{"range":[358,685],"text":"import { ExecutionHistoryEntry } from '@/core/domain/job/job-processing.types';\nimport { LanguageModelMessageToolCall } from '@/core/ports/adapters/llm-adapter.types';\nimport { IToolExecutionContext, IAgentTool } from '@/core/tools/tool.interface';\nimport { TYPES } from '@/infrastructure/ioc/types'; // Added import for TYPES\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":7,"column":23,"nodeType":"Literal","endLine":7,"endColumn":51},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":7,"column":53,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":7,"endColumn":78},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":15,"column":101,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":15,"endColumn":119}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { injectable, inject } from 'inversify';\nimport { z } from 'zod';\n\nimport { IToolRegistryService } from '@/core/application/ports/services/i-tool-registry.service'; // Removed TOOL_REGISTRY_SERVICE_TOKEN\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { ToolError } from '@/core/domain/common/errors';\nimport { TYPES } from '@/infrastructure/ioc/types'; // Added import for TYPES\nimport { ExecutionHistoryEntry } from '@/core/domain/job/job-processing.types';\nimport { LanguageModelMessageToolCall } from '@/core/ports/adapters/llm-adapter.types';\nimport { IToolExecutionContext, IAgentTool } from '@/core/tools/tool.interface';\n\n@injectable()\nexport class ToolValidationService {\n  constructor(\n    @inject(TYPES.IToolRegistryService) private readonly toolRegistryService: IToolRegistryService, // Corrected token\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n  ) {}\n\n  public async processAndValidateSingleToolCall(\n    toolCall: LanguageModelMessageToolCall,\n    executionContext: IToolExecutionContext,\n  ): Promise<ExecutionHistoryEntry> {\n    const toolName = toolCall.function.name;\n    const timestamp = new Date();\n\n    const toolInstance = this.toolRegistryService.getTool(toolName);\n    if (!toolInstance) {\n      return this._createToolNotFoundError(toolName, timestamp, executionContext.jobId);\n    }\n\n    const parsedArgs = this._parseToolArguments(toolCall, toolName, timestamp, executionContext.jobId);\n    if (parsedArgs.error) {\n      return parsedArgs.error;\n    }\n\n    const validationResult = toolInstance.parameters.safeParse(parsedArgs.value);\n    if (!validationResult.success) {\n      return this._createToolValidationError(toolName, timestamp, validationResult.error, parsedArgs.value, executionContext.jobId);\n    }\n\n    this.logger.info(`Tool call validated: ${toolName} with args: ${JSON.stringify(validationResult.data)}`, {\n      toolName,\n      jobId: executionContext.jobId,\n    });\n    return this._executeTool(toolInstance, validationResult.data, timestamp, executionContext);\n  }\n\n  private _createToolNotFoundError(toolName: string, timestamp: Date, jobId: string): ExecutionHistoryEntry {\n    const toolNotFoundError = new ToolError(`Tool '${toolName}' not found.`, toolName, undefined, false);\n    this.logger.error(toolNotFoundError.message, { toolName, jobId });\n    return { timestamp, type: 'tool_error', name: toolName, error: toolNotFoundError, isCritical: true };\n  }\n\n  private _parseToolArguments(\n    toolCall: LanguageModelMessageToolCall,\n    toolName: string,\n    timestamp: Date,\n    jobId: string,\n  ): { value?: unknown; error?: ExecutionHistoryEntry } {\n    try {\n      return { value: JSON.parse(toolCall.function.arguments) };\n    } catch (error: unknown) {\n      const parseError = error instanceof Error ? error : new Error(String(error));\n      const parsingToolError = new ToolError(\n        `Failed to parse arguments for tool '${toolName}'. Error: ${parseError.message}`,\n        toolName,\n        parseError,\n        true,\n      );\n      this.logger.error(parsingToolError.message, { toolName, args: toolCall.function.arguments, jobId });\n      return {\n        error: {\n          timestamp,\n          type: 'tool_error',\n          name: toolName,\n          error: parsingToolError,\n          params: { originalArgs: toolCall.function.arguments },\n          isCritical: false,\n        },\n      };\n    }\n  }\n\n  private _createToolValidationError(\n    toolName: string,\n    timestamp: Date,\n    validationError: z.ZodError,\n    parsedArgs: unknown,\n    jobId: string,\n  ): ExecutionHistoryEntry {\n    const validationToolError = new ToolError(\n      `Argument validation failed for tool '${toolName}'.`,\n      toolName,\n      validationError,\n      true,\n    );\n    this.logger.error(validationToolError.message, { toolName, issues: validationError.flatten(), jobId });\n    return { timestamp, type: 'tool_error', name: toolName, error: validationToolError, params: parsedArgs, isCritical: false };\n  }\n\n  private async _executeTool(\n    toolInstance: IAgentTool,\n    validatedArgs: unknown,\n    timestamp: Date,\n    executionContext: IToolExecutionContext,\n  ): Promise<ExecutionHistoryEntry> {\n    const toolName = toolInstance.name;\n    try {\n      const toolExecResult = await toolInstance.execute(validatedArgs, executionContext);\n      if (toolExecResult.isError()) {\n        const toolErrorFromTool = toolExecResult.error;\n        this.logger.error(`Tool '${toolName}' execution failed: ${toolErrorFromTool.message}`, {\n          toolError: toolErrorFromTool,\n          jobId: executionContext.jobId,\n        });\n        return {\n          timestamp,\n          type: 'tool_error',\n          name: toolName,\n          params: validatedArgs,\n          error: toolErrorFromTool,\n          isCritical: !toolErrorFromTool.isRecoverable,\n        };\n      }\n      this.logger.info(`Tool '${toolName}' executed successfully.`, { result: toolExecResult.value, jobId: executionContext.jobId });\n      return { timestamp, type: 'tool_result', name: toolName, params: validatedArgs, result: toolExecResult.value };\n    } catch (error: unknown) {\n      const execError = error instanceof Error ? error : new Error(String(error));\n      const unexpectedToolError = new ToolError(\n        `Unexpected error during tool '${toolName}' execution: ${execError.message}`,\n        toolName,\n        execError,\n        false,\n      );\n      this.logger.error(unexpectedToolError.message, { error: unexpectedToolError, jobId: executionContext.jobId });\n      return {\n        timestamp,\n        type: 'tool_error',\n        name: toolName,\n        error: unexpectedToolError,\n        params: validatedArgs,\n        isCritical: true,\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.use-case.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'isError' is not defined.","line":53,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":18},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":53,"column":35,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":53,"endColumn":63},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":73,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":73,"endColumn":24},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":73,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":73,"endColumn":72},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":80,"column":146,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":80,"endColumn":171}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/agent-internal-state/load-agent-internal-state.use-case.ts\nimport { ZodError } from 'zod';\n\n// Added import for ILogger\nimport { ILogger } from '@/core/common/services/i-logger.service';\n\nimport { IAgentInternalStateRepository } from '@/domain/agent/ports/agent-internal-state-repository.interface';\nimport { AgentId } from '@/domain/agent/value-objects/agent-id.vo';\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error } from '@/shared/result';\n\n// Removed unused import for Inject: import { Inject } from '@/application/common/ioc/dependency-injection.decorators'; // Assuming IoC\n\nimport {\n  LoadAgentInternalStateUseCaseInput,\n  LoadAgentInternalStateUseCaseInputSchema,\n  LoadAgentInternalStateUseCaseOutput,\n} from './load-agent-internal-state.schema';\n\nexport class LoadAgentInternalStateUseCase\n  implements\n    Executable<\n      LoadAgentInternalStateUseCaseInput,\n      // Output can be null if state not found\n      LoadAgentInternalStateUseCaseOutput | null,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    // @Inject(IAgentInternalStateRepositorySymbol) // Example for IoC\n    private readonly stateRepository: IAgentInternalStateRepository,\n    // @Inject(ILoggerSymbol) // Example for IoC\n    private readonly logger: ILogger,\n  ) {}\n\n  async execute(\n    input: LoadAgentInternalStateUseCaseInput,\n  ): Promise<Result<LoadAgentInternalStateUseCaseOutput | null, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = LoadAgentInternalStateUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return error(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const agentIdVo = AgentId.fromString(validInput.agentId);\n\n      const stateResult = await this.stateRepository.findByAgentId(agentIdVo);\n\n      if (isError(stateResult)) { // Corrected: Use type guard\n        // Access .error property when it's an error\n        return error(new DomainError(`Failed to load internal state for agent ${validInput.agentId}: ${stateResult.error.message}`, stateResult.error));\n      }\n\n      // If it's not an error, it's a success, so stateResult.value is safe to access\n      const stateEntity = stateResult.value; \n\n      if (!stateEntity) {\n        return ok(null);\n      }\n\n      const output: LoadAgentInternalStateUseCaseOutput = {\n        agentId: stateEntity.agentId().value(),\n        currentProjectId: stateEntity.currentProjectId()?.value() || null,\n        currentGoal: stateEntity.currentGoal()?.value() || null,\n        generalNotes: stateEntity.generalNotes().list(),\n      };\n\n      return ok(output);\n    } catch (e: unknown) { // Changed errorValue to e to avoid conflict\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n        return error(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      // For logger, ensure the second argument is an Error instance if the logger expects it, or pass as metadata\n      const logError = e instanceof Error ? e : new Error(message);\n      this.logger.error(`[LoadAgentInternalStateUseCase] Unexpected error for agent ${input.agentId}: ${message}`, { originalError: logError }); // Pass error in metadata\n      return error(new DomainError(`Unexpected error loading agent state: ${message}`, logError));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LOGGER_INTERFACE_TYPE' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":40},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":4,"column":91,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":4,"endColumn":110},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":62},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":17,"column":89,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":17,"endColumn":106},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":37,"column":39,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":37,"endColumn":56},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":45,"column":51,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":45,"endColumn":63},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":50,"column":65,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":50,"endColumn":96},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":53,"column":43,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":53,"endColumn":55},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":60,"column":76,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":60,"endColumn":107},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":61,"column":56,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":61,"endColumn":87},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":66,"column":34,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":66,"endColumn":46},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":72,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":72,"endColumn":24},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":72,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":72,"endColumn":52},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":98,"column":66,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":98,"endColumn":87},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":107,"column":67,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":107,"endColumn":79},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":112,"column":39,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":112,"endColumn":51},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":117,"column":103,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":117,"endColumn":115}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/agent-internal-state/save-agent-internal-state.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service'; // Corrected import\n\nimport { AgentInternalState } from '@/domain/agent/agent-internal-state.entity';\nimport { IAgentInternalStateRepository } from '@/domain/agent/ports/agent-internal-state-repository.interface';\nimport { AgentId } from '@/domain/agent/value-objects/agent-id.vo';\nimport { CurrentGoal } from '@/domain/agent/value-objects/internal-state/current-goal.vo';\nimport { CurrentProjectId } from '@/domain/agent/value-objects/internal-state/current-project-id.vo';\nimport { GeneralNotesCollection } from '@/domain/agent/value-objects/internal-state/general-notes.collection';\nimport { DomainError, ValueError, NotFoundError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n// Removed duplicate import of DomainError, ValueError, NotFoundError\n\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result'; // Import helpers\n\n\nimport {\n  SaveAgentInternalStateUseCaseInput,\n  SaveAgentInternalStateUseCaseInputSchema,\n  SaveAgentInternalStateUseCaseOutput,\n} from './save-agent-internal-state.schema';\n\nexport class SaveAgentInternalStateUseCase\n  implements\n    Executable<\n      SaveAgentInternalStateUseCaseInput,\n      SaveAgentInternalStateUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    private readonly stateRepository: IAgentInternalStateRepository,\n    // Added logger dependency\n    private readonly logger: ILogger, // Corrected type\n  ) {}\n\n  async execute(\n    input: SaveAgentInternalStateUseCaseInput,\n  ): Promise<Result<SaveAgentInternalStateUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = SaveAgentInternalStateUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return resultError(validationResult.error); // Corrected\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const agentIdVo = AgentId.fromString(validInput.agentId); // Assumes this throws on error\n      const existingStateResult = await this.stateRepository.findByAgentId(agentIdVo);\n\n      if (isError(existingStateResult)) { // Corrected\n        // Pass existingStateResult.error which is already an Error instance\n        return this._handleRepositoryError(validInput.agentId, 'check existing state', existingStateResult.error);\n      }\n\n      // If not an error, existingStateResult.value is AgentInternalState | null\n      const stateEntity = existingStateResult.value\n        ? this._updateExistingState(existingStateResult.value, validInput) // Assumes these throw on error\n        : this._createNewState(agentIdVo, validInput); // Assumes these throw on error\n\n      const isNewState = !existingStateResult.value;\n      const saveResult = await this.stateRepository.save(stateEntity);\n\n      if (isError(saveResult)) { // Corrected\n         // Pass saveResult.error which is already an Error instance\n        return this._handleRepositoryError(validInput.agentId, `save agent internal state (new: ${isNewState})`, saveResult.error);\n      }\n\n      return ok({ success: true });\n    } catch (e: unknown) { // Changed errValue to e\n      return this._handleUnexpectedError(input.agentId, e);\n    }\n  }\n\n  private _createNewState(agentIdVo: AgentId, validInput: SaveAgentInternalStateUseCaseInput): AgentInternalState {\n    // These VOs/Entity static methods are expected to throw on failure.\n    const currentProjectIdVo = validInput.currentProjectId ? CurrentProjectId.fromString(validInput.currentProjectId) : undefined;\n    const currentGoalVo = validInput.currentGoal !== null && validInput.currentGoal !== undefined ? CurrentGoal.create(validInput.currentGoal) : undefined;\n    const generalNotesVo = GeneralNotesCollection.create(validInput.generalNotes || []);\n    return AgentInternalState.create({ agentId: agentIdVo, currentProjectId: currentProjectIdVo, currentGoal: currentGoalVo, generalNotes: generalNotesVo });\n  }\n\n  private _updateExistingState(stateEntity: AgentInternalState, validInput: SaveAgentInternalStateUseCaseInput): AgentInternalState {\n    // These VOs/Entity methods are expected to throw on failure or return updated entity.\n    let updatedEntity = stateEntity;\n    if (Object.prototype.hasOwnProperty.call(validInput, 'currentProjectId')) {\n      const newProjectIdVo = validInput.currentProjectId ? CurrentProjectId.fromString(validInput.currentProjectId) : undefined;\n      updatedEntity = updatedEntity.changeCurrentProject(newProjectIdVo);\n    }\n    if (Object.prototype.hasOwnProperty.call(validInput, 'currentGoal')) {\n      const newGoalVo = validInput.currentGoal !== null && validInput.currentGoal !== undefined ? CurrentGoal.create(validInput.currentGoal) : undefined;\n      updatedEntity = updatedEntity.changeCurrentGoal(newGoalVo);\n    }\n    if (Object.prototype.hasOwnProperty.call(validInput, 'generalNotes')) {\n      const newNotesVo = GeneralNotesCollection.create(validInput.generalNotes || []);\n      updatedEntity = updatedEntity.setGeneralNotes(newNotesVo); // Use the new method\n    }\n    return updatedEntity;\n  }\n\n  private _handleRepositoryError(agentId: string, action: string, repoError: Error): Result<never, DomainError> {\n    const errorMessage = `Failed to ${action} for agent ${agentId}: ${repoError.message}`;\n    // Ensure repoError is passed correctly to the logger if it expects an Error object\n    this.logger.error(`[SaveAgentInternalStateUseCase] ${errorMessage}`, { originalError: repoError });\n    return resultError(new DomainError(errorMessage, repoError)); // Corrected\n  }\n\n  private _handleUnexpectedError(agentId: string, errorValue: unknown): Result<never, DomainError | ZodError | ValueError | NotFoundError> {\n    if (errorValue instanceof ZodError || errorValue instanceof NotFoundError || errorValue instanceof DomainError || errorValue instanceof ValueError) {\n      return resultError(errorValue); // Corrected\n    }\n    const message = errorValue instanceof Error ? errorValue.message : String(errorValue);\n    const logError = errorValue instanceof Error ? errorValue : new Error(message);\n    this.logger.error(`[SaveAgentInternalStateUseCase] Unexpected error for agent ${agentId}: ${message}`, { originalError: logError });\n    return resultError(new DomainError(`Unexpected error saving agent state: ${message}`, logError)); // Corrected\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.use-case.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":62},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":79,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":79,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/application/use-cases/agent-persona-template/create-persona-template.use-case.ts\nimport { ZodError } from 'zod';\n\nimport { ILogger } from '@/core/common/services/i-logger.service'; \n\nimport { AgentPersonaTemplate } from '@/domain/agent/agent-persona-template.vo';\nimport { IAgentPersonaTemplateRepository } from '@/domain/agent/ports/agent-persona-template-repository.interface';\nimport { PersonaBackstory } from '@/domain/agent/value-objects/persona/persona-backstory.vo';\nimport { PersonaGoal } from '@/domain/agent/value-objects/persona/persona-goal.vo';\nimport { PersonaId } from '@/domain/agent/value-objects/persona/persona-id.vo';\nimport { PersonaName } from '@/domain/agent/value-objects/persona/persona-name.vo';\nimport { PersonaRole } from '@/domain/agent/value-objects/persona/persona-role.vo';\nimport { ToolNames } from '@/domain/agent/value-objects/persona/tool-names.vo';\nimport { DomainError, ValueError } from '@/domain/common/errors';\n\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result'; \n\n\nimport {\n  CreatePersonaTemplateUseCaseInput,\n  CreatePersonaTemplateUseCaseInputSchema,\n  CreatePersonaTemplateUseCaseOutput,\n} from './create-persona-template.schema';\n\nexport class CreatePersonaTemplateUseCase\n  implements\n    Executable<\n      CreatePersonaTemplateUseCaseInput,\n      CreatePersonaTemplateUseCaseOutput,\n      DomainError | ZodError | ValueError\n    >\n{\n  constructor(\n    private readonly templateRepository: IAgentPersonaTemplateRepository,\n    private readonly logger: ILogger, \n  ) {}\n\n  async execute(\n    input: CreatePersonaTemplateUseCaseInput,\n  ): Promise<Result<CreatePersonaTemplateUseCaseOutput, DomainError | ZodError | ValueError>> {\n    // 1. Validate Input Schema\n    const validationResult = CreatePersonaTemplateUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return resultError(validationResult.error); \n    }\n    const validInput = validationResult.data;\n\n    try {\n      // 2. Create Value Objects (these throw on error)\n      const nameVo = PersonaName.create(validInput.name);\n      const roleVo = PersonaRole.create(validInput.role);\n      const goalVo = PersonaGoal.create(validInput.goal);\n      const backstoryVo = PersonaBackstory.create(validInput.backstory);\n      const toolNamesVo = ToolNames.create(validInput.toolNames);\n      const personaIdVo = PersonaId.generate();\n\n      // 3. Create AgentPersonaTemplate VO (this throws on error)\n      const personaTemplate = AgentPersonaTemplate.create({\n        id: personaIdVo,\n        name: nameVo,\n        role: roleVo,\n        goal: goalVo,\n        backstory: backstoryVo,\n        toolNames: toolNamesVo,\n      });\n\n      // 4. Save Entity/VO\n      const saveResult = await this.templateRepository.save(personaTemplate);\n      if (isError(saveResult)) { \n        return resultError(new DomainError(`Failed to save persona template: ${saveResult.error.message}`, saveResult.error)); \n      }\n\n      // 5. Return Output\n      return ok({\n        personaTemplateId: personaTemplate.id().value(),\n      });\n    } catch (e: unknown) { \n      if (e instanceof ZodError) { \n        return resultError(e);\n      }\n      if (e instanceof DomainError || e instanceof ValueError) { \n        return resultError(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      const logError = e instanceof Error ? e : new Error(message);\n      this.logger.error(`[CreatePersonaTemplateUseCase] Unexpected error: ${message}`, { originalError: logError });\n      return resultError( \n        new DomainError(\n          `An unexpected error occurred while creating the persona template: ${message}`,\n          logError\n        ),\n      );\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent/create-agent.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/agent/create-agent.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`inversify` import should occur before import of `zod`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":48,"fix":{"range":[76,156],"text":"import { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":90,"fix":{"range":[246,246],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/domain/agent/agent-persona-template.vo` import should occur before import of `@/domain/agent/agent.entity`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":81,"fix":{"range":[248,382],"text":"import { AgentPersonaTemplate } from '@/domain/agent/agent-persona-template.vo';\nimport { Agent } from '@/domain/agent/agent.entity';\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":17,"column":1,"nodeType":"ImportDeclaration","endLine":17,"endColumn":108,"fix":{"range":[1312,1312],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":18,"column":1,"nodeType":"ImportDeclaration","endLine":18,"endColumn":52,"fix":{"range":[1364,1364],"text":"\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":18,"column":23,"nodeType":"Literal","endLine":18,"endColumn":51},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":19,"column":1,"nodeType":"ImportDeclaration","endLine":19,"endColumn":88,"fix":{"range":[1452,1452],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/application/common/ports/use-case.interface` import should occur before import of `@/infrastructure/ioc/types`","line":19,"column":1,"nodeType":"ImportDeclaration","endLine":19,"endColumn":88,"fix":{"range":[1313,1453],"text":"import { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\nimport { TYPES } from '@/infrastructure/ioc/types';\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":62},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":82,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":82,"endColumn":24},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":114,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":114,"endColumn":24},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":117,"column":102,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":117,"endColumn":137},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":137,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":137,"endColumn":24},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":146,"column":31,"nodeType":"Identifier","messageId":"tooShort","endLine":146,"endColumn":41},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":154,"column":67,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":154,"endColumn":95}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":7,"source":"// src_refactored/core/application/use-cases/agent/create-agent.use-case.ts\nimport { ZodError } from 'zod';\nimport { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service'; \nimport { Agent } from '@/domain/agent/agent.entity';\nimport { AgentPersonaTemplate } from '@/domain/agent/agent-persona-template.vo';\nimport { IAgentPersonaTemplateRepository } from '@/domain/agent/ports/agent-persona-template-repository.interface';\nimport { IAgentRepository } from '@/domain/agent/ports/agent-repository.interface';\nimport { AgentId } from '@/domain/agent/value-objects/agent-id.vo';\nimport { AgentMaxIterations } from '@/domain/agent/value-objects/agent-max-iterations.vo';\nimport { AgentTemperature } from '@/domain/agent/value-objects/agent-temperature.vo';\nimport { PersonaId } from '@/domain/agent/value-objects/persona/persona-id.vo';\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\nimport { LLMProviderConfig } from '@/domain/llm-provider-config/llm-provider-config.entity';\nimport { ILLMProviderConfigRepository } from '@/domain/llm-provider-config/ports/llm-provider-config-repository.interface';\nimport { LLMProviderConfigId } from '@/domain/llm-provider-config/value-objects/llm-provider-config-id.vo';\nimport { TYPES } from '@/infrastructure/ioc/types';\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result';\n\nimport {\n  CreateAgentUseCaseInput,\n  CreateAgentUseCaseInputSchema,\n  CreateAgentUseCaseOutput,\n} from './create-agent.schema';\n\n@injectable()\nexport class CreateAgentUseCase\n  implements\n    Executable<\n      CreateAgentUseCaseInput,\n      CreateAgentUseCaseOutput,\n      DomainError | NotFoundError | ZodError | ValueError\n    >\n{\n  constructor(\n    @inject(TYPES.IAgentRepository) private readonly agentRepository: IAgentRepository,\n    @inject(TYPES.IAgentPersonaTemplateRepository) private readonly personaTemplateRepository: IAgentPersonaTemplateRepository,\n    @inject(TYPES.ILLMProviderConfigRepository) private readonly llmConfigRepository: ILLMProviderConfigRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger, \n  ) {}\n\n  async execute(\n    input: CreateAgentUseCaseInput,\n  ): Promise<Result<CreateAgentUseCaseOutput, DomainError | NotFoundError | ZodError | ValueError>> {\n    const validationResult = CreateAgentUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return resultError(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const prerequisitesResult = await this._fetchPrerequisites(validInput);\n      if (isError(prerequisitesResult)) {\n        return resultError(prerequisitesResult.error);\n      }\n      const { personaTemplate, llmProviderConfig } = prerequisitesResult.value;\n      \n      const agentValueObjectsResult = this._createAgentValueObjects(validInput);\n      if (isError(agentValueObjectsResult)) {\n        return resultError(agentValueObjectsResult.error);\n      }\n      const { temperatureVo, maxIterationsVo, agentIdVo } = agentValueObjectsResult.value;\n\n      // Agent.create is expected to throw on error\n      const agentEntity = Agent.create({\n        id: agentIdVo,\n        personaTemplate,\n        llmProviderConfig,\n        temperature: temperatureVo,\n        maxIterations: maxIterationsVo,\n      });\n\n      const saveResult = await this.agentRepository.save(agentEntity);\n      if (isError(saveResult)) {\n        const err = saveResult.error instanceof DomainError ? saveResult.error : new DomainError(`Failed to save agent: ${saveResult.error.message}`, saveResult.error);\n        return resultError(err);\n      }\n\n      return ok({ agentId: agentEntity.id().value() });\n    } catch (e: unknown) {\n      return this._handleUseCaseError(e);\n    }\n  }\n\n  private async _fetchPrerequisites(validInput: CreateAgentUseCaseInput): Promise<Result<{\n    personaTemplate: AgentPersonaTemplate;\n    llmProviderConfig: LLMProviderConfig;\n  }, DomainError | NotFoundError | ValueError >> {\n    try {\n      // These VO creations can throw ValueError\n      const personaTemplateIdVo = PersonaId.fromString(validInput.personaTemplateId);\n      const llmConfigIdVo = LLMProviderConfigId.fromString(validInput.llmProviderConfigId);\n\n      const templateResult = await this.personaTemplateRepository.findById(personaTemplateIdVo);\n      if (isError(templateResult)) {\n        return resultError(new DomainError(`Failed to fetch persona template: ${templateResult.error.message}`, templateResult.error));\n      }\n      const personaTemplate = templateResult.value;\n      if (!personaTemplate) {\n        return resultError(new NotFoundError(`AgentPersonaTemplate with ID ${validInput.personaTemplateId} not found.`));\n      }\n\n      const llmConfigResult = await this.llmConfigRepository.findById(llmConfigIdVo);\n      if (isError(llmConfigResult)) {\n        return resultError(new DomainError(`Failed to fetch LLM provider config: ${llmConfigResult.error.message}`, llmConfigResult.error));\n      }\n      const llmProviderConfig = llmConfigResult.value;\n      if (!llmProviderConfig) {\n        return resultError(new NotFoundError(`LLMProviderConfig with ID ${validInput.llmProviderConfigId} not found.`));\n      }\n      return ok({ personaTemplate, llmProviderConfig });\n    } catch (e: unknown) {\n      if (e instanceof ValueError) return resultError(e);\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[CreateAgentUseCase/_fetchPrerequisites] Error: ${message}`, { error: e }); // Using original error for context\n      return resultError(new DomainError(`Error fetching prerequisites: ${message}`, e instanceof Error ? e : undefined));\n    }\n  }\n\n  private _createAgentValueObjects(validInput: CreateAgentUseCaseInput): Result<{\n    temperatureVo: AgentTemperature;\n    maxIterationsVo: AgentMaxIterations;\n    agentIdVo: AgentId;\n  }, ValueError> {\n    try {\n      // These VOs .create/.default methods are expected to throw ValueError on failure\n      const temperatureVo = validInput.temperature !== undefined\n        ? AgentTemperature.create(validInput.temperature)\n        : AgentTemperature.default();\n      const maxIterationsVo = validInput.maxIterations !== undefined\n        ? AgentMaxIterations.create(validInput.maxIterations)\n        : AgentMaxIterations.default();\n      const agentIdVo = AgentId.generate();\n      return ok({ temperatureVo, maxIterationsVo, agentIdVo });\n    } catch (e: unknown) {\n      if (e instanceof ValueError) return resultError(e);\n      // Should not happen if VOs only throw ValueError, but as a safeguard:\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.warn(`[CreateAgentUseCase/_createAgentValueObjects] Unexpected error: ${message}`, { error: e });\n      return resultError(new ValueError(`Error creating agent value objects: ${message}`));\n    }\n  }\n\n  private _handleUseCaseError(e: unknown): Result<never, DomainError | NotFoundError | ZodError | ValueError> {\n    if (e instanceof ZodError) { \n      return resultError(e);\n    }\n    if (e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n      return resultError(e);\n    }\n    const message = e instanceof Error ? e.message : String(e);\n    const logError = e instanceof Error ? e : new Error(message); // Ensure it's an Error type\n    this.logger.error(`[CreateAgentUseCase] Unexpected error: ${message}`, { originalError: logError });\n    return resultError(new DomainError(`An unexpected error occurred while creating the agent: ${message}`, logError));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/list-annotations.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/list-annotations.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`inversify` import should occur before import of `zod`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":48,"fix":{"range":[85,165],"text":"import { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":68,"fix":{"range":[323,323],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaginatedAnnotationsResult' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":59},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":66,"fix":{"range":[609,609],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":88,"fix":{"range":[697,697],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":88,"fix":{"range":[785,785],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":62},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":52,"fix":{"range":[837,837],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur before import of `@/shared/result`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":52,"fix":{"range":[698,838],"text":"import { TYPES } from '@/infrastructure/ioc/types';\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result';\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":23,"nodeType":"Literal","endLine":12,"endColumn":51},{"ruleId":"import/order","severity":1,"message":"`@/core/common/ports/repository.types` import should occur before import of `@/core/common/services/i-logger.service`","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":74,"fix":{"range":[166,912],"text":"import { PaginationOptions } from '@/core/common/ports/repository.types';\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\nimport { Annotation } from '@/domain/annotation/annotation.entity';\nimport { IAnnotationRepository, PaginatedAnnotationsResult, AnnotationSearchFilters } from '@/domain/annotation/ports/annotation-repository.interface';\nimport { DomainError, ValueError } from '@/domain/common/errors';\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result';\nimport { TYPES } from '@/infrastructure/ioc/types';\n"}},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":47,"column":61,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":47,"endColumn":89},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":69,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":69,"endColumn":24},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":70,"column":38,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":70,"endColumn":82},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":76,"column":69,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":76,"endColumn":97},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":79,"column":64,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":79,"endColumn":110}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":8,"source":"// src_refactored/core/application/use-cases/annotation/list-annotations.use-case.ts\nimport { ZodError } from 'zod';\nimport { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\nimport { Annotation } from '@/domain/annotation/annotation.entity';\nimport { IAnnotationRepository, PaginatedAnnotationsResult, AnnotationSearchFilters } from '@/domain/annotation/ports/annotation-repository.interface';\nimport { DomainError, ValueError } from '@/domain/common/errors';\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result';\nimport { TYPES } from '@/infrastructure/ioc/types';\nimport { PaginationOptions } from '@/core/common/ports/repository.types';\n\n\nimport {\n  ListAnnotationsUseCaseInput,\n  ListAnnotationsUseCaseInputSchema,\n  ListAnnotationsUseCaseOutput,\n  AnnotationListItem,\n} from './list-annotations.schema';\n\n@injectable()\nexport class ListAnnotationsUseCase\n  implements\n    Executable<\n      ListAnnotationsUseCaseInput,\n      ListAnnotationsUseCaseOutput,\n      DomainError | ZodError | ValueError\n    >\n{\n  constructor(\n    @inject(TYPES.IAnnotationRepository) private readonly annotationRepository: IAnnotationRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n  ) {}\n\n  async execute(\n    input: ListAnnotationsUseCaseInput,\n  ): Promise<Result<ListAnnotationsUseCaseOutput, DomainError | ZodError | ValueError>> {\n    const validationResult = ListAnnotationsUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return resultError(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const filters = this._buildSearchFilters(validInput); // This can throw ValueError\n      const pagination = this._buildPaginationOptions(validInput);\n\n      const repoResult = await this.annotationRepository.search(filters, pagination);\n      \n      if (isError(repoResult)) {\n        const err = repoResult.error instanceof DomainError ? repoResult.error : new DomainError('Failed to list annotations', repoResult.error);\n        this.logger.error(`[ListAnnotationsUseCase] Repository error: ${err.message}`, { originalError: repoResult.error });\n        return resultError(err);\n      }\n\n      const paginatedData = repoResult.value; \n      \n      const output: ListAnnotationsUseCaseOutput = {\n        items: paginatedData.items.map(this._mapToListItem),\n        totalCount: paginatedData.totalCount,\n        page: paginatedData.page,\n        pageSize: paginatedData.pageSize,\n        totalPages: paginatedData.totalPages,\n      };\n      return ok(output);\n\n    } catch (e: unknown) {\n      if (e instanceof ValueError) { // Catch ValueError from _buildSearchFilters\n         this.logger.warn(`[ListAnnotationsUseCase] Value error during filter build: ${e.message}`, { error: e });\n        return resultError(e);\n      }\n      // Catch any other unexpected errors (ZodError should have been caught earlier)\n      const message = e instanceof Error ? e.message : String(e);\n      const logError = e instanceof Error ? e : new Error(message); // Ensure it's an Error type\n      this.logger.error(`[ListAnnotationsUseCase] Unexpected error: ${message}`, { originalError: logError });\n      // Wrap in DomainError if it's not already one of the declared error types\n      if (e instanceof DomainError || e instanceof ZodError) { // ZodError unlikely here but for completeness\n          return resultError(e);\n      }\n      return resultError(new DomainError(`Unexpected error listing annotations: ${message}`, logError));\n    }\n  }\n\n  private _buildSearchFilters(validInput: ListAnnotationsUseCaseInput): Partial<AnnotationSearchFilters> {\n    // This method can throw ValueError if Identity.fromString fails\n    const filters: Partial<AnnotationSearchFilters> = {};\n    if (validInput.agentId) {\n      filters.agentId = Identity.fromString(validInput.agentId);\n    }\n    if (validInput.jobId) {\n      filters.jobId = Identity.fromString(validInput.jobId);\n    }\n    return filters;\n  }\n\n  private _buildPaginationOptions(validInput: ListAnnotationsUseCaseInput): PaginationOptions {\n    return {\n      page: validInput.page,\n      pageSize: validInput.pageSize,\n    };\n  }\n\n  private _mapToListItem(annotation: Annotation): AnnotationListItem {\n    return {\n      id: annotation.id().value(),\n      text: annotation.text().value(),\n      agentId: annotation.agentId()?.value() || null,\n      jobId: annotation.jobId()?.value() || null,\n      createdAt: annotation.createdAt().toISOString(),\n      updatedAt: annotation.updatedAt().toISOString(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/remove-annotation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/remove-annotation.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`inversify` import should occur before import of `zod`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":48,"fix":{"range":[86,166],"text":"import { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":90,"fix":{"range":[256,256],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":81,"fix":{"range":[519,519],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":88,"fix":{"range":[607,607],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":77,"fix":{"range":[716,716],"text":"\n"}},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":10,"column":78,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":10,"endColumn":109},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur before import of `@/shared/result`","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":52,"fix":{"range":[608,769],"text":"import { TYPES } from '@/infrastructure/ioc/types';\nimport { Result, ok, error as resultError, isError } from '@/shared/result'; // Added isError, aliased error\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":11,"column":23,"nodeType":"Literal","endLine":11,"endColumn":51},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":43,"column":80,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":43,"endColumn":103},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":59,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":59,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":6,"source":"// src_refactored/core/application/use-cases/annotation/remove-annotation.use-case.ts\nimport { ZodError } from 'zod';\nimport { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { IAnnotationRepository } from '@/domain/annotation/ports/annotation-repository.interface';\nimport { AnnotationId } from '@/domain/annotation/value-objects/annotation-id.vo';\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isError } from '@/shared/result'; // Added isError, aliased error\nimport { TYPES } from '@/infrastructure/ioc/types';\n\nimport {\n  RemoveAnnotationUseCaseInput,\n  RemoveAnnotationUseCaseInputSchema,\n  RemoveAnnotationUseCaseOutput,\n} from './remove-annotation.schema';\n\n@injectable()\nexport class RemoveAnnotationUseCase\n  implements\n    Executable<\n      RemoveAnnotationUseCaseInput,\n      RemoveAnnotationUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    @inject(TYPES.IAnnotationRepository) private readonly annotationRepository: IAnnotationRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n  ) {}\n\n  async execute(\n    input: RemoveAnnotationUseCaseInput,\n  ): Promise<Result<RemoveAnnotationUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = RemoveAnnotationUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return resultError(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      const annotationIdVo = AnnotationId.fromString(validInput.annotationId); // Can throw ValueError\n\n      const deleteResult = await this.annotationRepository.delete(annotationIdVo);\n\n      if (isError(deleteResult)) {\n        const err = deleteResult.error instanceof DomainError || deleteResult.error instanceof NotFoundError\n            ? deleteResult.error\n            : new DomainError(`Failed to delete annotation: ${deleteResult.error.message}`, deleteResult.error);\n        this.logger.error(`[RemoveAnnotationUseCase] Repository error: ${err.message}`, { originalError: deleteResult.error });\n        return resultError(err);\n      }\n      \n      // If deleteResult is success, its value is void, so no need to check it.\n      // The problem description implies success if no error.\n      return ok({ success: true, annotationId: validInput.annotationId });\n\n    } catch (e: unknown) {\n      // Catch errors from AnnotationId.fromString\n      if (e instanceof ValueError) {\n        this.logger.warn(`[RemoveAnnotationUseCase] Invalid annotation ID: ${e.message}`, { error: e });\n        return resultError(e)\n      }\n      // Catch other specific errors if necessary, or fall through to generic handling\n      if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError) {\n        return resultError(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      const logError = e instanceof Error ? e : new Error(message);\n      this.logger.error(`[RemoveAnnotationUseCase] Unexpected error for annotation ID ${input.annotationId}: ${message}`, { originalError: logError });\n      return resultError(new DomainError(`Unexpected error removing annotation: ${message}`, logError));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/save-annotation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/annotation/save-annotation.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`inversify` import should occur before import of `zod`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":48,"fix":{"range":[84,164],"text":"import { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":68,"fix":{"range":[322,322],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":81,"fix":{"range":[740,740],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":88,"fix":{"range":[828,828],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":88,"fix":{"range":[916,916],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur before import of `@/shared/result`","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":52,"fix":{"range":[829,969],"text":"import { TYPES } from '@/infrastructure/ioc/types';\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result';\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":23,"nodeType":"Literal","endLine":14,"endColumn":51},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":78,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":78,"endColumn":24},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":99,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":99,"endColumn":15},{"ruleId":"max-statements","severity":1,"message":"Async method '_updateAnnotation' has too many statements (28). Maximum allowed is 25.","line":107,"column":34,"nodeType":"FunctionExpression","messageId":"exceed","endLine":152,"endColumn":4},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":124,"column":62,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":124,"endColumn":85},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":130,"column":101,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":130,"endColumn":124},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":138,"column":95,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":138,"endColumn":118},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":145,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":145,"endColumn":15},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":149,"column":102,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":149,"endColumn":132},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":154,"column":31,"nodeType":"Identifier","messageId":"tooShort","endLine":154,"endColumn":41}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":6,"source":"// src_refactored/core/application/use-cases/annotation/save-annotation.use-case.ts\nimport { ZodError } from 'zod';\nimport { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\nimport { Annotation } from '@/domain/annotation/annotation.entity';\nimport { IAnnotationRepository } from '@/domain/annotation/ports/annotation-repository.interface';\nimport { AnnotationId } from '@/domain/annotation/value-objects/annotation-id.vo';\nimport { AnnotationText } from '@/domain/annotation/value-objects/annotation-text.vo';\nimport { DomainError, NotFoundError, ValueError } from '@/domain/common/errors';\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result';\nimport { TYPES } from '@/infrastructure/ioc/types';\n\nimport {\n  SaveAnnotationUseCaseInput,\n  SaveAnnotationUseCaseInputSchema,\n  SaveAnnotationUseCaseOutput,\n} from './save-annotation.schema';\n\n@injectable()\nexport class SaveAnnotationUseCase\n  implements\n    Executable<\n      SaveAnnotationUseCaseInput,\n      SaveAnnotationUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    @inject(TYPES.IAnnotationRepository) private readonly annotationRepository: IAnnotationRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger, \n  ) {}\n\n  async execute(\n    input: SaveAnnotationUseCaseInput,\n  ): Promise<Result<SaveAnnotationUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = SaveAnnotationUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return resultError(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      // _createAnnotation and _updateAnnotation now return Result types\n      let annotationEntityResult: Result<Annotation, DomainError | NotFoundError | ValueError>;\n      if (validInput.id) {\n        annotationEntityResult = await this._updateAnnotation(validInput);\n      } else {\n        annotationEntityResult = this._createAnnotation(validInput);\n      }\n\n      if (isError(annotationEntityResult)) {\n        // Log the specific error before returning it\n        this.logger.warn(`[SaveAnnotationUseCase] Error creating/updating annotation entity: ${annotationEntityResult.error.message}`, { error: annotationEntityResult.error });\n        return resultError(annotationEntityResult.error);\n      }\n      const annotationEntity = annotationEntityResult.value;\n\n      const saveRepoResult = await this.annotationRepository.save(annotationEntity);\n      \n      if (isError(saveRepoResult)) {\n        const err = saveRepoResult.error instanceof DomainError ? saveRepoResult.error : new DomainError(`Failed to save annotation: ${saveRepoResult.error.message}`, saveRepoResult.error);\n        this.logger.error(`[SaveAnnotationUseCase] Repository error: ${err.message}`, { originalError: saveRepoResult.error });\n        return resultError(err);\n      }\n      \n      const finalEntity = (isSuccess(saveRepoResult) && saveRepoResult.value instanceof Annotation) \n                          ? saveRepoResult.value \n                          : annotationEntity;\n\n      return ok({\n        annotationId: finalEntity.id().value(),\n        createdAt: finalEntity.createdAt().toISOString(),\n        updatedAt: finalEntity.updatedAt().toISOString(),\n      });\n    } catch (e: unknown) { \n      // This catch block is now primarily for truly unexpected errors,\n      // as VO/Entity creation errors should be wrapped in Results by helper methods.\n      return this._handleUseCaseError(e, validInput.id);\n    }\n  }\n\n  private _createAnnotation(validInput: SaveAnnotationUseCaseInput): Result<Annotation, ValueError> {\n    try {\n      const textVo = AnnotationText.create(validInput.text);\n      const agentIdVo = validInput.agentId ? Identity.fromString(validInput.agentId) : undefined;\n      const jobIdVo = validInput.jobId ? Identity.fromString(validInput.jobId) : undefined;\n      const newAnnotationId = AnnotationId.generate();\n\n      const annotation = Annotation.create({\n        id: newAnnotationId,\n        text: textVo,\n        agentId: agentIdVo,\n        jobId: jobIdVo,\n      });\n      return ok(annotation);\n    } catch (e) {\n      if (e instanceof ValueError) return resultError(e);\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.warn(`[SaveAnnotationUseCase/_createAnnotation] Error: ${message}`, { error: e });\n      return resultError(new ValueError(`Error creating annotation value objects: ${message}`));\n    }\n  }\n\n  private async _updateAnnotation(validInput: SaveAnnotationUseCaseInput): Promise<Result<Annotation, DomainError | NotFoundError | ValueError>> {\n    try {\n      const annotationIdVo = AnnotationId.fromString(validInput.id!); \n      const existingResult = await this.annotationRepository.findById(annotationIdVo);\n\n      if (isError(existingResult)) {\n        // Ensure the error passed to DomainError is an Error instance\n        const cause = existingResult.error instanceof Error ? existingResult.error : new Error(String(existingResult.error));\n        return resultError(new DomainError(`Failed to fetch annotation for update: ${cause.message}`, cause));\n      }\n      const existingAnnotation = existingResult.value;\n      if (!existingAnnotation) {\n        return resultError(new NotFoundError(`Annotation with ID ${validInput.id} not found for update.`));\n      }\n\n      let annotationEntity = existingAnnotation;\n      \n      const textVo = AnnotationText.create(validInput.text); // Can throw ValueError\n      if (!annotationEntity.text().equals(textVo)) {\n        annotationEntity = annotationEntity.updateText(textVo);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(validInput, 'agentId')) {\n        const agentIdVo = validInput.agentId ? Identity.fromString(validInput.agentId) : undefined; // Can throw ValueError\n        const currentAgentId = annotationEntity.agentId();\n        if ((currentAgentId && !currentAgentId.equals(agentIdVo)) || (!currentAgentId && agentIdVo) || (currentAgentId && agentIdVo && !currentAgentId.equals(agentIdVo))) {\n          annotationEntity = annotationEntity.assignAgent(agentIdVo);\n        }\n      }\n\n      if (Object.prototype.hasOwnProperty.call(validInput, 'jobId')) {\n        const jobIdVo = validInput.jobId ? Identity.fromString(validInput.jobId) : undefined; // Can throw ValueError\n        const currentJobId = annotationEntity.jobId();\n         if ((currentJobId && !currentJobId.equals(jobIdVo)) || (!currentJobId && jobIdVo) || (currentJobId && jobIdVo && !currentJobId.equals(jobIdVo))) {\n          annotationEntity = annotationEntity.assignJob(jobIdVo);\n        }\n      }\n      return ok(annotationEntity);\n    } catch (e) {\n      if (e instanceof ValueError) return resultError(e);\n      // DomainError from findById is already a Result, so this catch is for VOs mainly\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.warn(`[SaveAnnotationUseCase/_updateAnnotation] Error: ${message}`, { error: e }); // Consider e as originalError\n      return resultError(new DomainError(`Error updating annotation: ${message}`, e instanceof Error ? e : undefined));\n    }\n  }\n\n  private _handleUseCaseError(e: unknown, idBeingProcessed?: string): Result<never, DomainError | ZodError | ValueError | NotFoundError> {\n    if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n      return resultError(e);\n    }\n    const message = e instanceof Error ? e.message : String(e);\n    const logError = e instanceof Error ? e : new Error(message);\n    this.logger.error(`[SaveAnnotationUseCase] Unexpected error for annotation ID ${idBeingProcessed || 'new'}: ${message}`, { originalError: logError });\n    return resultError(new DomainError(`Unexpected error saving annotation: ${message}`, logError));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`inversify` import should occur before import of `zod`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":48,"fix":{"range":[104,184],"text":"import { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":90,"fix":{"range":[274,274],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":66,"fix":{"range":[979,979],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/domain/common/errors` import should occur before import of `@/domain/llm-provider-config/llm-provider-config.entity`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":66,"fix":{"range":[275,980],"text":"import { DomainError, ValueError } from '@/domain/common/errors'; // Added ValueError\nimport { LLMProviderConfig } from '@/domain/llm-provider-config/llm-provider-config.entity';\nimport { ILLMProviderConfigRepository } from '@/domain/llm-provider-config/ports/llm-provider-config-repository.interface';\nimport { LLMApiKey } from '@/domain/llm-provider-config/value-objects/llm-api-key.vo';\nimport { LLMProviderConfigId } from '@/domain/llm-provider-config/value-objects/llm-provider-config-id.vo';\nimport { LLMProviderConfigName } from '@/domain/llm-provider-config/value-objects/llm-provider-config-name.vo';\nimport { LLMProviderId } from '@/domain/llm-provider-config/value-objects/llm-provider-id.vo';\n"}},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":12,"column":67,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":12,"endColumn":86},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":88,"fix":{"range":[1067,1067],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":77,"fix":{"range":[1161,1161],"text":"\n"}},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":14,"column":78,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":14,"endColumn":94},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur before import of `@/shared/result`","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":52,"fix":{"range":[1068,1214],"text":"import { TYPES } from '@/infrastructure/ioc/types';\nimport { Result, ok, error as resultError, isError } from '@/shared/result'; // Added isError\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":15,"column":23,"nodeType":"Literal","endLine":15,"endColumn":51},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":29,"column":43,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":29,"endColumn":62},{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (27). Maximum allowed is 25.","line":39,"column":16,"nodeType":"FunctionExpression","messageId":"exceed","endLine":100,"endColumn":4},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":69,"column":27,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":69,"endColumn":59},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":70,"column":38,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":70,"endColumn":74},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":86,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":86,"endColumn":24}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":7,"source":"// src_refactored/core/application/use-cases/llm-provider-config/create-llm-provider-config.use-case.ts\nimport { ZodError } from 'zod';\nimport { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { LLMProviderConfig } from '@/domain/llm-provider-config/llm-provider-config.entity';\nimport { ILLMProviderConfigRepository } from '@/domain/llm-provider-config/ports/llm-provider-config-repository.interface';\nimport { LLMApiKey } from '@/domain/llm-provider-config/value-objects/llm-api-key.vo';\nimport { LLMProviderConfigId } from '@/domain/llm-provider-config/value-objects/llm-provider-config-id.vo';\nimport { LLMProviderConfigName } from '@/domain/llm-provider-config/value-objects/llm-provider-config-name.vo';\nimport { LLMProviderId } from '@/domain/llm-provider-config/value-objects/llm-provider-id.vo';\nimport { DomainError, ValueError } from '@/domain/common/errors'; // Added ValueError\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isError } from '@/shared/result'; // Added isError\nimport { TYPES } from '@/infrastructure/ioc/types';\n\nimport {\n  CreateLLMProviderConfigUseCaseInput,\n  CreateLLMProviderConfigUseCaseInputSchema,\n  CreateLLMProviderConfigUseCaseOutput,\n} from './create-llm-provider-config.schema';\n\n@injectable()\nexport class CreateLLMProviderConfigUseCase\n  implements\n    Executable<\n      CreateLLMProviderConfigUseCaseInput,\n      CreateLLMProviderConfigUseCaseOutput,\n      DomainError | ZodError | ValueError // Added ValueError\n    >\n{\n  constructor(\n    @inject(TYPES.ILLMProviderConfigRepository)\n    private readonly configRepository: ILLMProviderConfigRepository,\n    @inject(LOGGER_INTERFACE_TYPE)\n    private readonly logger: ILogger,\n  ) {}\n\n  async execute(\n    input: CreateLLMProviderConfigUseCaseInput,\n  ): Promise<Result<CreateLLMProviderConfigUseCaseOutput, DomainError | ZodError | ValueError>> {\n    const validationResult = CreateLLMProviderConfigUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return resultError(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      // These VO creations can throw ValueError\n      const nameVo = LLMProviderConfigName.create(validInput.name);\n      const providerIdVo = LLMProviderId.create(validInput.providerId);\n      // apiKey and baseUrl are optional in input, but required by VOs if provided.\n      // LLMApiKey and BaseUrl VOs should handle null/undefined if that's a valid state,\n      // or the entity should handle optional VOs.\n      // For now, let's assume they are created only if present in input.\n      let apiKeyVo: LLMApiKey | undefined;\n      if (validInput.apiKey) {\n        apiKeyVo = LLMApiKey.create(validInput.apiKey);\n      }\n      // BaseUrlVO would be similar if it existed and was used.\n      // const baseUrlVo = validInput.baseUrl ? BaseUrlVO.create(validInput.baseUrl) : undefined;\n\n      const configIdVo = LLMProviderConfigId.generate();\n\n      const configEntity = LLMProviderConfig.create({\n        id: configIdVo,\n        name: nameVo,\n        providerId: providerIdVo,\n        apiKey: apiKeyVo, // Pass potentially undefined VO\n        baseUrl: validInput.baseUrl, // Pass string directly or create VO\n        // other optional props from schema like models, parameters, etc.\n      });\n\n      const saveResult = await this.configRepository.save(configEntity);\n      if (isError(saveResult)) {\n        const err = saveResult.error instanceof DomainError ? saveResult.error : new DomainError(`Failed to save LLM config: ${saveResult.error.message}`, saveResult.error);\n        this.logger.error(`[CreateLLMProviderConfigUseCase] Repository error: ${err.message}`, { originalError: saveResult.error });\n        return resultError(err);\n      }\n\n      return ok({\n        id: configEntity.id().value(),\n        name: configEntity.name().value(),\n        providerId: configEntity.providerId().value(),\n      });\n    } catch (e: unknown) {\n      if (e instanceof ValueError || (e instanceof DomainError && !(e instanceof ZodError))) {\n        this.logger.warn(`[CreateLLMProviderConfigUseCase] Value/Domain error: ${e.message}`, { error: e });\n        return resultError(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      const logError = e instanceof Error ? e : new Error(message);\n      this.logger.error(`[CreateLLMProviderConfigUseCase] Unexpected error: ${message}`, { originalError: logError });\n      // Wrap in DomainError if not already a ZodError (which is a DomainError)\n      if (e instanceof ZodError) {\n          return resultError(e);\n      }\n      return resultError(new DomainError(`Unexpected error creating LLM config: ${message}`, logError));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/remove-memory-item.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/remove-memory-item.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":90,"fix":{"range":[253,253],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":80,"fix":{"range":[421,421],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":64,"fix":{"range":[485,485],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":66,"fix":{"range":[552,552],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/domain/common/errors` import should occur before import of `@/domain/memory/ports/memory-repository.interface`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":66,"fix":{"range":[254,554],"text":"import { ValueError, DomainError } from '@/domain/common/errors'; \nimport { IMemoryRepository } from '@/domain/memory/ports/memory-repository.interface'; \nimport { MemoryItemId } from '@/domain/memory/value-objects/memory-item-id.vo';\nimport { ApplicationError } from '@/application/common/errors'; \n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":74,"fix":{"range":[627,627],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":88,"fix":{"range":[715,715],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":53},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur before import of `@/shared/result`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":52,"fix":{"range":[628,770],"text":"import { TYPES } from '@/infrastructure/ioc/types'; \nimport { Result, ok, error as resultError, isSuccess, isError } from '@/shared/result'; \n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":23,"nodeType":"Literal","endLine":12,"endColumn":51},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":69,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":69,"endColumn":24},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":79,"column":57,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":79,"endColumn":97}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":8,"source":"// src_refactored/core/application/use-cases/memory/remove-memory-item.use-case.ts\nimport { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { IMemoryRepository } from '@/domain/memory/ports/memory-repository.interface'; \nimport { MemoryItemId } from '@/domain/memory/value-objects/memory-item-id.vo';\nimport { ApplicationError } from '@/application/common/errors'; \nimport { ValueError, DomainError } from '@/domain/common/errors'; \nimport { IUseCase } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isSuccess, isError } from '@/shared/result'; \nimport { TYPES } from '@/infrastructure/ioc/types'; \n\nimport {\n  RemoveMemoryItemUseCaseInput,\n  RemoveMemoryItemUseCaseInputSchema,\n  RemoveMemoryItemUseCaseOutput,\n} from './remove-memory-item.schema';\n\n@injectable()\nexport class RemoveMemoryItemUseCase\n  implements\n    IUseCase<\n      RemoveMemoryItemUseCaseInput,\n      RemoveMemoryItemUseCaseOutput,\n      ApplicationError | ZodError | ValueError\n    >\n{\n  constructor(\n    @inject(TYPES.IMemoryRepository) private readonly memoryRepository: IMemoryRepository, \n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n  ) {}\n\n  public async execute(\n    input: RemoveMemoryItemUseCaseInput,\n  ): Promise<Result<RemoveMemoryItemUseCaseOutput, ApplicationError | ZodError | ValueError>> {\n    this.logger.debug('RemoveMemoryItemUseCase: Starting execution with input:', { input });\n\n    const validationResult = RemoveMemoryItemUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      this.logger.warn('RemoveMemoryItemUseCase: Input validation failed.', { error: validationResult.error.flatten() });\n      return resultError(validationResult.error); \n    }\n    const validatedInput = validationResult.data;\n\n    try {\n      const itemIdVo = MemoryItemId.fromString(validatedInput.memoryItemId); \n\n      const deleteResult = await this.memoryRepository.delete(itemIdVo);\n\n      if (isError(deleteResult)) { \n        const cause = deleteResult.error;\n        this.logger.error(\n          `RemoveMemoryItemUseCase: Repository failed to delete memory item ${validatedInput.memoryItemId}.`,\n          { originalError: cause },\n        );\n        const appError = cause instanceof ApplicationError \n          ? cause \n          : new ApplicationError(`Failed to delete memory item: ${cause.message}`, cause instanceof Error ? cause : undefined);\n        return resultError(appError);\n      }\n\n      this.logger.info(`RemoveMemoryItemUseCase: Memory item ${validatedInput.memoryItemId} processed for deletion.`);\n      return ok({\n        memoryItemId: validatedInput.memoryItemId,\n        success: true, \n      });\n\n    } catch (e: unknown) {\n      if (e instanceof ValueError) { \n        this.logger.warn(`RemoveMemoryItemUseCase: Invalid MemoryItemId format - ${e.message}`, { error: e });\n        return resultError(new ApplicationError(`Invalid memory item ID format: ${e.message}`, e));\n      }\n      \n      const message = e instanceof Error ? e.message : String(e);\n      const logError = e instanceof Error ? e : new Error(message);\n      this.logger.error(`RemoveMemoryItemUseCase: Unexpected error for memory item ID ${input.memoryItemId}: ${message}`, { originalError: logError });\n      \n      if (e instanceof ZodError) return resultError(e); // Should be caught by safeParse earlier\n      // For other errors, wrap in ApplicationError\n      return resultError(new ApplicationError(`Unexpected error removing memory item: ${message}`, logError));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/save-memory-item.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/save-memory-item.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`inversify` import should occur before import of `zod`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":48,"fix":{"range":[81,161],"text":"import { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":68,"fix":{"range":[319,319],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":81,"fix":{"range":[988,988],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/domain/common/errors` import should occur before import of `@/domain/memory/memory-item.entity`","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":81,"fix":{"range":[320,989],"text":"import { DomainError, ValueError, NotFoundError } from '@/domain/common/errors';\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository } from '@/domain/memory/ports/memory-repository.interface';\nimport { MemoryItemContent } from '@/domain/memory/value-objects/memory-item-content.vo';\nimport { MemoryItemEmbedding } from '@/domain/memory/value-objects/memory-item-embedding.vo';\nimport { MemoryItemId } from '@/domain/memory/value-objects/memory-item-id.vo';\nimport { MemoryItemSource } from '@/domain/memory/value-objects/memory-item-source.vo';\nimport { MemoryItemTags } from '@/domain/memory/value-objects/memory-item-tags.vo';\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":88,"fix":{"range":[1076,1076],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":88,"fix":{"range":[1164,1164],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur before import of `@/shared/result`","line":17,"column":1,"nodeType":"ImportDeclaration","endLine":17,"endColumn":52,"fix":{"range":[1077,1217],"text":"import { TYPES } from '@/infrastructure/ioc/types';\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result';\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":17,"column":23,"nodeType":"Literal","endLine":17,"endColumn":51},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":88,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":88,"endColumn":24},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":111,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":111,"endColumn":15},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":114,"column":102,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":114,"endColumn":132},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":135,"column":33,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":135,"endColumn":70},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":152,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":152,"endColumn":15},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":160,"column":31,"nodeType":"Identifier","messageId":"tooShort","endLine":160,"endColumn":41}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":7,"source":"// src_refactored/core/application/use-cases/memory/save-memory-item.use-case.ts\nimport { ZodError } from 'zod';\nimport { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository } from '@/domain/memory/ports/memory-repository.interface';\nimport { MemoryItemContent } from '@/domain/memory/value-objects/memory-item-content.vo';\nimport { MemoryItemEmbedding } from '@/domain/memory/value-objects/memory-item-embedding.vo';\nimport { MemoryItemId } from '@/domain/memory/value-objects/memory-item-id.vo';\nimport { MemoryItemSource } from '@/domain/memory/value-objects/memory-item-source.vo';\nimport { MemoryItemTags } from '@/domain/memory/value-objects/memory-item-tags.vo';\nimport { DomainError, ValueError, NotFoundError } from '@/domain/common/errors';\nimport { IUseCase as Executable } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result';\nimport { TYPES } from '@/infrastructure/ioc/types';\n\nimport {\n  SaveMemoryItemUseCaseInput,\n  SaveMemoryItemUseCaseInputSchema,\n  SaveMemoryItemUseCaseOutput,\n} from './save-memory-item.schema';\n\n@injectable()\nexport class SaveMemoryItemUseCase\n  implements\n    Executable<\n      SaveMemoryItemUseCaseInput,\n      SaveMemoryItemUseCaseOutput,\n      DomainError | ZodError | ValueError | NotFoundError\n    >\n{\n  constructor(\n    @inject(TYPES.IMemoryRepository) private readonly memoryRepository: IMemoryRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n  ) {}\n\n  async execute(\n    input: SaveMemoryItemUseCaseInput,\n  ): Promise<Result<SaveMemoryItemUseCaseOutput, DomainError | ZodError | ValueError | NotFoundError>> {\n    const validationResult = SaveMemoryItemUseCaseInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      return resultError(validationResult.error);\n    }\n    const validInput = validationResult.data;\n\n    try {\n      let memoryItemEntityResult: Result<MemoryItem, DomainError | NotFoundError | ValueError>;\n      if (validInput.id) {\n        memoryItemEntityResult = await this._updateMemoryItem(validInput);\n      } else {\n        memoryItemEntityResult = this._createMemoryItem(validInput);\n      }\n\n      if (isError(memoryItemEntityResult)) {\n        // Log the specific error before returning it\n        this.logger.warn(`[SaveMemoryItemUseCase] Error creating/updating memory item entity: ${memoryItemEntityResult.error.message}`, { error: memoryItemEntityResult.error });\n        return resultError(memoryItemEntityResult.error);\n      }\n      const memoryItemEntity = memoryItemEntityResult.value;\n      \n      const saveRepoResult = await this.memoryRepository.save(memoryItemEntity);\n      \n      if (isError(saveRepoResult)) {\n        const cause = saveRepoResult.error;\n        // Ensure cause is an Error instance for DomainError constructor\n        const errorCause = cause instanceof Error ? cause : new Error(String(cause));\n        const err = cause instanceof DomainError ? cause : new DomainError(`Failed to save memory item: ${errorCause.message}`, errorCause);\n        this.logger.error(`[SaveMemoryItemUseCase] Repository error: ${err.message}`, { originalError: cause });\n        return resultError(err);\n      }\n      \n      const finalMemoryItem = (isSuccess(saveRepoResult) && saveRepoResult.value instanceof MemoryItem) \n                              ? saveRepoResult.value \n                              : memoryItemEntity;\n\n      return ok({\n        id: finalMemoryItem.id().value(),\n        content: finalMemoryItem.content().value(),\n        agentId: finalMemoryItem.agentId()?.value() || null,\n        tags: finalMemoryItem.tags().value() || [],\n        source: finalMemoryItem.source().value(),\n        embedding: finalMemoryItem.embedding()?.value() || null,\n        createdAt: finalMemoryItem.createdAt().toISOString(),\n        updatedAt: finalMemoryItem.updatedAt().toISOString(),\n      });\n    } catch (e: unknown) { \n      return this._handleUseCaseError(e, validInput.id);\n    }\n  }\n\n  private _createMemoryItem(validInput: SaveMemoryItemUseCaseInput): Result<MemoryItem, ValueError> {\n    try {\n      const contentVo = MemoryItemContent.create(validInput.content);\n      const agentIdVo = validInput.agentId ? Identity.fromString(validInput.agentId) : undefined;\n      const tagsVo = MemoryItemTags.create(validInput.tags || []);\n      const sourceVo = MemoryItemSource.create(validInput.source || ''); \n      const embeddingVo = validInput.embedding ? MemoryItemEmbedding.create(validInput.embedding) : undefined;\n      const newId = MemoryItemId.generate();\n\n      const memoryItem = MemoryItem.create({\n        id: newId,\n        content: contentVo,\n        agentId: agentIdVo,\n        tags: tagsVo,\n        source: sourceVo,\n        embedding: embeddingVo,\n      });\n      return ok(memoryItem);\n    } catch (e) {\n      if (e instanceof ValueError) return resultError(e);\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.warn(`[SaveMemoryItemUseCase/_createMemoryItem] Error: ${message}`, { error: e }); // Consider e as originalError\n      return resultError(new ValueError(`Error creating memory item value objects: ${message}`));\n    }\n  }\n\n  private async _updateMemoryItem(validInput: SaveMemoryItemUseCaseInput): Promise<Result<MemoryItem, DomainError | NotFoundError | ValueError>> {\n    try {\n      const itemIdVo = MemoryItemId.fromString(validInput.id!); \n      const existingResult = await this.memoryRepository.findById(itemIdVo);\n\n      if (isError(existingResult)) {\n        return resultError(new DomainError(`Failed to fetch memory item for update: ${existingResult.error.message}`, existingResult.error));\n      }\n      const existingItem = existingResult.value;\n      if (!existingItem) {\n        return resultError(new NotFoundError(`MemoryItem with ID ${validInput.id} not found for update.`));\n      }\n\n      let updatedItem = existingItem;\n      \n      // These VO creations and entity updates are expected to throw on error\n      if (validInput.content) { // Only update if content is provided\n        updatedItem = updatedItem.updateContent(MemoryItemContent.create(validInput.content));\n      }\n      if (Object.prototype.hasOwnProperty.call(validInput, 'agentId')) {\n        updatedItem = updatedItem.assignAgent(validInput.agentId ? Identity.fromString(validInput.agentId) : undefined);\n      }\n      if (validInput.tags) { \n        updatedItem = updatedItem.updateTags(MemoryItemTags.create(validInput.tags));\n      }\n      if (Object.prototype.hasOwnProperty.call(validInput, 'source')) { \n        updatedItem = updatedItem.updateSource(MemoryItemSource.create(validInput.source || ''));\n      }\n      if (validInput.embedding) { \n        updatedItem = updatedItem.updateEmbedding(MemoryItemEmbedding.create(validInput.embedding));\n      }\n      \n      return ok(updatedItem);\n    } catch (e) {\n      if (e instanceof ValueError) return resultError(e);\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.warn(`[SaveMemoryItemUseCase/_updateMemoryItem] Error: ${message}`, { error: e }); \n      return resultError(new DomainError(`Error updating memory item: ${message}`, e instanceof Error ? e : undefined));\n    }\n  }\n  \n  private _handleUseCaseError(e: unknown, idBeingProcessed?: string): Result<never, DomainError | ZodError | ValueError | NotFoundError> {\n    if (e instanceof ZodError || e instanceof NotFoundError || e instanceof DomainError || e instanceof ValueError) {\n      return resultError(e);\n    }\n    const message = e instanceof Error ? e.message : String(e);\n    const logError = e instanceof Error ? e : new Error(message);\n    this.logger.error(`[SaveMemoryItemUseCase] Unexpected error for memory item ID ${idBeingProcessed || 'new'}: ${message}`, { originalError: logError });\n    return resultError(new DomainError(`Unexpected error saving memory item: ${message}`, logError));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-memory-items.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-memory-items.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":68,"fix":{"range":[322,322],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":33},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":7,"column":67,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":7,"endColumn":101},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":136,"fix":{"range":[658,658],"text":"\n"}},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":9,"column":137,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":9,"endColumn":170},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":74,"fix":{"range":[772,772],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/core/common/ports/repository.types` import should occur before import of `@/core/common/services/i-logger.service`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":74,"fix":{"range":[165,773],"text":"import { PaginationOptions } from '@/core/common/ports/repository.types'; // Corrected path for PaginationOptions\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\nimport { ValueError, DomainError } from '@/domain/common/errors'; // Corrected import for ValueError\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository, MemorySearchFilters, PaginatedMemoryItemsResult } from '@/domain/memory/ports/memory-repository.interface'; // Removed IMemoryRepositoryToken\n"}},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":10,"column":75,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":10,"endColumn":114},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":74,"fix":{"range":[910,910],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":88,"fix":{"range":[998,998],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":53},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur before import of `@/shared/result`","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":52,"fix":{"range":[911,1051],"text":"import { TYPES } from '@/infrastructure/ioc/types';\nimport { Result, ok, error as resultError, isSuccess, isError } from '@/shared/result';\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":23,"nodeType":"Literal","endLine":14,"endColumn":51},{"ruleId":"max-statements","severity":1,"message":"Async method 'execute' has too many statements (30). Maximum allowed is 25.","line":34,"column":23,"nodeType":"FunctionExpression","messageId":"exceed","endLine":91,"endColumn":4},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":82,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":82,"endColumn":24},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":82,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":82,"endColumn":112},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessages' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":96,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":26},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":105,"column":56,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":105,"endColumn":89},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":106,"column":86,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":106,"endColumn":131},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":116,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":116,"endColumn":24},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":149,"column":56,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":149,"endColumn":102},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":152,"column":30,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":152,"endColumn":83},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":157,"column":50,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":157,"endColumn":87},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":158,"column":50,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":158,"endColumn":87}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":7,"source":"// src_refactored/core/application/use-cases/memory/search-memory-items.use-case.ts\nimport { inject, injectable } from 'inversify';\nimport { ZodError } from 'zod';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\nimport { ValueError, DomainError } from '@/domain/common/errors'; // Corrected import for ValueError\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository, MemorySearchFilters, PaginatedMemoryItemsResult } from '@/domain/memory/ports/memory-repository.interface'; // Removed IMemoryRepositoryToken\nimport { PaginationOptions } from '@/core/common/ports/repository.types'; // Corrected path for PaginationOptions\nimport { ApplicationError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isSuccess, isError } from '@/shared/result';\nimport { TYPES } from '@/infrastructure/ioc/types';\n\nimport {\n  SearchMemoryItemsUseCaseInput,\n  SearchMemoryItemsUseCaseInputSchema,\n  SearchMemoryItemsUseCaseOutput,\n  MemoryListItem,\n} from './search-memory-items.schema';\n\nconst CONTENT_EXCERPT_LENGTH = 200;\n\n@injectable()\nexport class SearchMemoryItemsUseCase\n  implements IUseCase<SearchMemoryItemsUseCaseInput, SearchMemoryItemsUseCaseOutput, ApplicationError | ZodError | ValueError>\n{\n  constructor(\n    @inject(TYPES.IMemoryRepository) private readonly memoryRepository: IMemoryRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n  ) {}\n\n  public async execute(\n    input: SearchMemoryItemsUseCaseInput,\n  ): Promise<Result<SearchMemoryItemsUseCaseOutput, ApplicationError | ZodError | ValueError>> {\n    this.logger.debug('SearchMemoryItemsUseCase: Starting execution with input:', { input });\n\n    const validationResult = this._validateInput(input);\n    if (isError(validationResult)) {\n      this.logger.warn('SearchMemoryItemsUseCase: Input validation failed.', { error: validationResult.error });\n      // Assuming validationResult.error is ZodError or compatible with ApplicationError's cause\n      const appError = validationResult.error instanceof ApplicationError \n        ? validationResult.error \n        : new ApplicationError(\"Input validation failed\", validationResult.error instanceof Error ? validationResult.error : undefined);\n      return resultError(appError);\n    }\n    const validatedInput = validationResult.value;\n\n    try {\n      const filtersResult = this._buildSearchFilters(validatedInput);\n      if (isError(filtersResult)) {\n          this.logger.warn('SearchMemoryItemsUseCase: Failed to build search filters.', { error: filtersResult.error });\n          const appError = filtersResult.error instanceof ApplicationError ? filtersResult.error : new ApplicationError(\"Filter building failed\", filtersResult.error);\n          return resultError(appError);\n      }\n      const searchFilters = filtersResult.value;\n\n      const paginationOptions: PaginationOptions = {\n        page: validatedInput.page,\n        pageSize: validatedInput.pageSize,\n      };\n\n      const repoResult = await this.memoryRepository.search(searchFilters, paginationOptions);\n\n      if (isError(repoResult)) {\n        this.logger.error('SearchMemoryItemsUseCase: Repository search failed.', { originalError: repoResult.error });\n        const cause = repoResult.error;\n        const appError = cause instanceof ApplicationError\n          ? cause\n          : new ApplicationError(`Search operation failed: ${cause.message}`, cause instanceof Error ? cause : undefined);\n        return resultError(appError);\n      }\n\n      // repoResult.value is PaginatedMemoryItemsResult\n      const paginatedMemoryItems = repoResult.value; \n      const output = this._mapToOutput(paginatedMemoryItems);\n\n      this.logger.debug('SearchMemoryItemsUseCase: Execution successful.');\n      return ok(output);\n\n    } catch (e: unknown) { // Catch errors from _buildSearchFilters if Identity.fromString throws (now wrapped)\n      // Or other truly unexpected errors\n      const message = e instanceof Error ? e.message : String(e);\n      const logError = e instanceof Error ? e : new Error(message);\n      this.logger.error('SearchMemoryItemsUseCase: Unhandled error during execution.', { originalError: logError });\n      // Ensure the error type matches the use case's declared error types\n      if (e instanceof ZodError || e instanceof ValueError) return resultError(e);\n      return resultError(new ApplicationError(`An unexpected error occurred: ${message}`, logError));\n    }\n  }\n\n  private _validateInput(input: SearchMemoryItemsUseCaseInput): Result<SearchMemoryItemsUseCaseInput, ZodError | ApplicationError> {\n    const parseResult = SearchMemoryItemsUseCaseInputSchema.safeParse(input);\n    if (!parseResult.success) {\n      const errorMessages = parseResult.error.errors.map((err) => `${err.path.join('.')}: ${err.message}`).join(', ');\n      // Return ZodError directly, or wrap if ApplicationError is preferred for all validation issues\n      return resultError(parseResult.error); \n    }\n    return ok(parseResult.data);\n  }\n\n  private _buildSearchFilters(validatedInput: SearchMemoryItemsUseCaseInput): Result<MemorySearchFilters, ValueError> {\n    try {\n      let agentIdVO: Identity | undefined = undefined; // Use undefined for optional VOs\n      if (validatedInput.agentId !== undefined && validatedInput.agentId !== null) { // Check for null explicitly if schema allows\n          agentIdVO = Identity.fromString(validatedInput.agentId);\n      }\n\n      const filters: MemorySearchFilters = {\n        agentId: agentIdVO,\n        queryText: validatedInput.queryText,\n        tags: validatedInput.tags,\n      };\n      return ok(filters);\n    } catch (e: unknown) {\n      if (e instanceof ValueError) {\n        this.logger.warn(`SearchMemoryItemsUseCase: Error building search filters - ${e.message}`, {error: e});\n        return resultError(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error('SearchMemoryItemsUseCase: Unexpected error building search filters.', { error: e });\n      return resultError(new ValueError(`Unexpected error building filters: ${message}`));\n    }\n  }\n\n  private _mapToOutput(\n    paginatedResult: PaginatedMemoryItemsResult\n  ): SearchMemoryItemsUseCaseOutput {\n    const memoryListItems = paginatedResult.items.map(item => this._mapMemoryItemToListItem(item));\n\n    return {\n      items: memoryListItems,\n      totalCount: paginatedResult.totalCount,\n      page: paginatedResult.page,\n      pageSize: paginatedResult.pageSize,\n      totalPages: paginatedResult.totalPages,\n    };\n  }\n\n  private _mapMemoryItemToListItem(item: MemoryItem): MemoryListItem {\n    const contentValue = item.content().value();\n    const excerpt = contentValue.length > CONTENT_EXCERPT_LENGTH\n      ? `${contentValue.substring(0, CONTENT_EXCERPT_LENGTH)}...`\n      : contentValue;\n\n    const agentIdValue = item.agentId() ? item.agentId()!.value() : null;\n    const tagsValue = item.tags().value() || [];\n    const sourceValue = item.source().value() || null; // Assuming source() returns a VO with value()\n\n    return {\n      id: item.id().value(), // Assuming id is Identity or similar VO with value()\n      contentExcerpt: excerpt,\n      agentId: agentIdValue,\n      tags: tagsValue,\n      source: sourceValue,\n      createdAt: item.createdAt().toISOString(), // Assuming createdAt is a VO or Date\n      updatedAt: item.updatedAt().toISOString(), // Assuming updatedAt is a VO or Date\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-similar-memory-items.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/memory/search-similar-memory-items.use-case.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":68,"fix":{"range":[330,330],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":94,"fix":{"range":[576,576],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":64,"fix":{"range":[640,640],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":66,"fix":{"range":[706,706],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@/domain/common/errors` import should occur before import of `@/domain/memory/memory-item.entity`","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":66,"fix":{"range":[331,707],"text":"import { ValueError, DomainError } from '@/domain/common/errors';\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository } from '@/domain/memory/ports/memory-repository.interface';\nimport { MemoryItemEmbedding } from '@/domain/memory/value-objects/memory-item-embedding.vo';\nimport { ApplicationError } from '@/application/common/errors';\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DomainError' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":33},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":74,"fix":{"range":[780,780],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":88,"fix":{"range":[868,868],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":53},{"ruleId":"import/order","severity":1,"message":"`@/infrastructure/ioc/types` import should occur before import of `@/shared/result`","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":52,"fix":{"range":[781,921],"text":"import { TYPES } from '@/infrastructure/ioc/types';\nimport { Result, ok, error as resultError, isSuccess, isError } from '@/shared/result';\n"}},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":23,"nodeType":"Literal","endLine":14,"endColumn":51},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":29,"column":48,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":29,"endColumn":67},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":97,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":97,"endColumn":24},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":97,"column":28,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":97,"endColumn":124},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":117,"column":82,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":117,"endColumn":105},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":120,"column":62,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":120,"endColumn":85},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":123,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":123,"endColumn":15}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":8,"source":"// src_refactored/core/application/use-cases/memory/search-similar-memory-items.use-case.ts\nimport { injectable, inject } from 'inversify';\nimport { ZodError } from 'zod';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service';\nimport { Identity } from '@/core/common/value-objects/identity.vo';\nimport { MemoryItem } from '@/domain/memory/memory-item.entity';\nimport { IMemoryRepository } from '@/domain/memory/ports/memory-repository.interface';\nimport { MemoryItemEmbedding } from '@/domain/memory/value-objects/memory-item-embedding.vo';\nimport { ApplicationError } from '@/application/common/errors';\nimport { ValueError, DomainError } from '@/domain/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\nimport { Result, ok, error as resultError, isSuccess, isError } from '@/shared/result';\nimport { TYPES } from '@/infrastructure/ioc/types';\n\nimport {\n  SearchSimilarMemoryItemsUseCaseInput,\n  SearchSimilarMemoryItemsUseCaseInputSchema,\n  SearchSimilarMemoryItemsUseCaseOutput,\n  SimilarMemoryListItem,\n} from './search-similar-memory-items.schema';\n\n@injectable()\nexport class SearchSimilarMemoryItemsUseCase\n  implements\n    IUseCase<\n      SearchSimilarMemoryItemsUseCaseInput,\n      SearchSimilarMemoryItemsUseCaseOutput,\n      ApplicationError | ZodError | ValueError // Added ValueError\n    >\n{\n  constructor(\n    @inject(TYPES.IMemoryRepository) private readonly memoryRepository: IMemoryRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger,\n  ) {}\n\n  private mapEntityToSimilarListItem(entity: MemoryItem, score?: number): SimilarMemoryListItem {\n    const fullContent = entity.content().value();\n    const excerptLength = 200;\n    const excerpt = fullContent.length > excerptLength ? fullContent.substring(0, excerptLength - 3) + '...' : fullContent;\n\n    return {\n      id: entity.id().value(),\n      contentExcerpt: excerpt,\n      agentId: entity.agentId()?.value() || null,\n      tags: entity.tags().value() || [],\n      source: entity.source().value(),\n      createdAt: entity.createdAt().toISOString(),\n      updatedAt: entity.updatedAt().toISOString(),\n      relevanceScore: score,\n    };\n  }\n\n  public async execute(\n    input: SearchSimilarMemoryItemsUseCaseInput,\n  ): Promise<Result<SearchSimilarMemoryItemsUseCaseOutput, ApplicationError | ZodError | ValueError>> {\n    this.logger.debug('SearchSimilarMemoryItemsUseCase: Starting execution with input:', { input });\n\n    const validationResult = this._validateInput(input);\n    if (isError(validationResult)) {\n      return resultError(validationResult.error); \n    }\n    const validInput = validationResult.value;\n    \n    try {\n      const voCreationResult = this._createValueObjects(validInput);\n      if (isError(voCreationResult)) {\n        // Error from _createValueObjects is ApplicationError (wrapping ValueError) or ValueError directly\n        return resultError(voCreationResult.error);\n      }\n      const { embeddingVo, agentIdVo } = voCreationResult.value;\n\n      const repoResult = await this.memoryRepository.searchSimilar(\n        embeddingVo,\n        agentIdVo, \n        validInput.limit, \n      );\n\n      if (isError(repoResult)) {\n        const cause = repoResult.error;\n        this.logger.error(\n          `SearchSimilarMemoryItemsUseCase: Repository failed to search similar memory items.`,\n          { originalError: cause },\n        );\n        const appError = cause instanceof ApplicationError\n          ? cause\n          : new ApplicationError(`Failed to search similar memory items: ${cause.message}`, cause instanceof Error ? cause : undefined);\n        return resultError(appError);\n      }\n\n      const similarItems = repoResult.value.map(item => this.mapEntityToSimilarListItem(item.item, item.score));\n\n      this.logger.debug('SearchSimilarMemoryItemsUseCase: Execution successful.');\n      return ok({\n        items: similarItems,\n      });\n    } catch (e: unknown) { // Should ideally not be reached if VOs and repo return Results or throw specific handled errors\n        const message = e instanceof Error ? e.message : String(e);\n        const logError = e instanceof Error ? e : new Error(message);\n        this.logger.error(`[SearchSimilarMemoryItemsUseCase] Unexpected error: ${message}`, { originalError: logError });\n        if (e instanceof ZodError || e instanceof ValueError) return resultError(e);\n        return resultError(new ApplicationError(`Unexpected error searching similar memory items: ${message}`, logError));\n    }\n  }\n\n  private _validateInput(input: SearchSimilarMemoryItemsUseCaseInput): Result<SearchSimilarMemoryItemsUseCaseInput, ZodError> {\n    const parseResult = SearchSimilarMemoryItemsUseCaseInputSchema.safeParse(input);\n    if (!parseResult.success) {\n      this.logger.warn('SearchSimilarMemoryItemsUseCase: Input validation failed.', { error: parseResult.error.flatten()});\n      return resultError(parseResult.error);\n    }\n    return ok(parseResult.data);\n  }\n\n  private _createValueObjects(validInput: SearchSimilarMemoryItemsUseCaseInput): Result<{ embeddingVo: MemoryItemEmbedding; agentIdVo?: Identity }, ApplicationError | ValueError> {\n    try {\n      const embeddingVo = MemoryItemEmbedding.create(validInput.queryEmbedding); // Can throw ValueError\n      let agentIdVo: Identity | undefined;\n      if (validInput.agentId) {\n        agentIdVo = Identity.fromString(validInput.agentId); // Can throw ValueError\n      }\n      return ok({ embeddingVo, agentIdVo });\n    } catch (e) {\n      if (e instanceof ValueError) {\n         this.logger.warn(`SearchSimilarMemoryItemsUseCase: Invalid VO creation - ${e.message}`, {error: e});\n        return resultError(e); \n      }\n      const message = e instanceof Error ? e.message : String(e);\n      const logError = e instanceof Error ? e : new Error(message);\n      this.logger.error('SearchSimilarMemoryItemsUseCase: Unexpected error creating VOs.', { originalError: logError });\n      return resultError(new ApplicationError(`Unexpected error processing input: ${message}`, logError));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/create-project.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/create-project.use-case.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":3,"column":91,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":3,"endColumn":110},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":53},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":14,"column":89,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":14,"endColumn":106},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":22,"column":70,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":22,"endColumn":97},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":29,"column":38,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":29,"endColumn":56},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":30,"column":51,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":30,"endColumn":69},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":36,"column":43,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":36,"endColumn":61},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":37,"column":56,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":37,"endColumn":74},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":42,"column":34,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":42,"endColumn":52},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":44,"column":47,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":44,"endColumn":65},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":48,"column":52,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":48,"endColumn":70},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":50,"column":30,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":50,"endColumn":97},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":53,"column":93,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":53,"endColumn":111},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":62,"column":108,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":62,"endColumn":126},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":64,"column":39,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":64,"endColumn":57},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":90,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":90,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'ValueError' is not defined.","line":92,"column":52,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'EntityError' is not defined.","line":92,"column":79,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":90}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service'; // Corrected import\n\nimport { IProjectRepository, ProjectRepositoryToken } from '@/domain/project/ports/project-repository.interface';\nimport { ProjectEntity, ProjectProps } from '@/domain/project/project.entity';\nimport { ProjectDescription } from '@/domain/project/value-objects/project-description.vo';\nimport { ProjectId } from '@/domain/project/value-objects/project-id.vo';\nimport { ProjectName } from '@/domain/project/value-objects/project-name.vo';\n\nimport { ApplicationError, DomainError, ValidationError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error as resultError, isSuccess, isError } from '@/shared/result'; // Import helpers\n\nimport { CreateProjectInput, CreateProjectOutput, CreateProjectInputSchema } from './create-project.schema';\n\n@injectable()\nexport class CreateProjectUseCase implements IUseCase<CreateProjectInput, Promise<Result<CreateProjectOutput, DomainError>>> {\n  constructor(\n    @inject(ProjectRepositoryToken) private readonly projectRepository: IProjectRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger, // Corrected token and type\n  ) {}\n\n  async execute(input: CreateProjectInput): Promise<Result<CreateProjectOutput, DomainError>> {\n    this.logger.info(`[CreateProjectUseCase] Attempting to create project with name: ${input.name}`);\n\n    const validationResult = this._validateInput(input);\n    if (isError(validationResult)) { // Corrected usage\n      return resultError(validationResult.error); // Corrected usage\n    }\n    const validatedInput = validationResult.value;\n\n    try {\n      const projectEntityResult = this._createProjectEntity(validatedInput);\n      if (isError(projectEntityResult)) { // Corrected usage\n        return resultError(projectEntityResult.error); // Corrected usage\n      }\n      const projectEntity = projectEntityResult.value;\n\n      const saveResult = await this.projectRepository.save(projectEntity);\n      if (isError(saveResult)) { // Corrected usage\n        this.logger.error('[CreateProjectUseCase] Failed to save project to repository', saveResult.error);\n        return resultError(saveResult.error); // Corrected usage\n      }\n\n      this.logger.info(`[CreateProjectUseCase] Project created successfully: ${projectEntity.id.value}`);\n      return ok(this._mapToOutput(projectEntity)); // Corrected usage\n\n    } catch (err: unknown) { // Changed 'error' to 'err' to avoid conflict with imported 'error'\n      this.logger.error('[CreateProjectUseCase] Unexpected error while creating project', err);\n      const message = err instanceof Error ? err.message : String(err);\n      return resultError(new ApplicationError(`An unexpected error occurred: ${message}`)); // Corrected usage\n    }\n  }\n\n  private _validateInput(input: CreateProjectInput): Result<CreateProjectInput, ValidationError> {\n    const validationResult = CreateProjectInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      const errorMessage = 'Invalid input for CreateProjectUseCase';\n      this.logger.error(`[CreateProjectUseCase] ${errorMessage}`, validationResult.error.flatten());\n      return resultError(new ValidationError(errorMessage, validationResult.error.flatten().fieldErrors)); // Corrected usage\n    }\n    return ok(validationResult.data); // Corrected usage\n  }\n\n  private _createProjectEntity(validatedInput: CreateProjectInput): Result<ProjectEntity, DomainError> {\n    try {\n      const projectName = ProjectName.create(validatedInput.name);\n\n      let projectDescription: ProjectDescription | undefined;\n      if (validatedInput.description !== undefined && validatedInput.description !== null) {\n        // Ensure description is not just empty string before creating, or let VO handle empty string if that's valid\n        if (validatedInput.description.trim() !== \"\") {\n          projectDescription = ProjectDescription.create(validatedInput.description);\n        }\n      }\n\n      const projectProps: ProjectProps = {\n        id: ProjectId.create(), \n        name: projectName,\n        description: projectDescription, \n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const projectEntity = ProjectEntity.create(projectProps);\n      return ok(projectEntity);\n\n    } catch (e: unknown) {\n      // Catch errors from ProjectName.create, ProjectDescription.create, ProjectEntity.create\n      if (e instanceof DomainError || e instanceof ValueError || e instanceof EntityError) { \n        this.logger.warn(`[CreateProjectUseCase] Domain error creating project entity parts: ${e.message}`, { error: e });\n        return resultError(e);\n      }\n      const message = e instanceof Error ? e.message : String(e);\n      this.logger.error(`[CreateProjectUseCase] Unexpected error creating project entity parts: ${message}`, { error: e });\n      return resultError(new DomainError(`Unexpected error creating project entity parts: ${message}`));\n    }\n  }\n\n  private _mapToOutput(projectEntity: ProjectEntity): CreateProjectOutput {\n    return {\n      id: projectEntity.id.value,\n      name: projectEntity.name.value,\n      description: projectEntity.description?.value,\n      createdAt: projectEntity.createdAt.toISOString(),\n      updatedAt: projectEntity.updatedAt.toISOString(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/get-project-details.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/get-project-details.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/project/list-projects.use-case.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/create-user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/create-user.use-case.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":3,"column":91,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":3,"endColumn":110},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ok' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resultError' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isError' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":62},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":17,"column":89,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":17,"endColumn":106},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":27,"column":70,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":27,"endColumn":97}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service'; // Corrected import\nimport { Identity } from '@/core/common/value-objects/identity.vo';\n\nimport { IUserRepository, UserRepositoryToken } from '@/domain/user/ports/user-repository.interface';\nimport { UserEntity, UserProps } from '@/domain/user/user.entity';\nimport { UserAvatar } from '@/domain/user/value-objects/user-avatar.vo';\nimport { UserEmail } from '@/domain/user/value-objects/user-email.vo';\nimport { UserId } from '@/domain/user/value-objects/user-id.vo';\nimport { UserNickname } from '@/domain/user/value-objects/user-nickname.vo';\nimport { UserUsername } from '@/domain/user/value-objects/user-username.vo';\n\nimport { ApplicationError, DomainError, ValidationError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result'; // Import helpers\n\nimport { CreateUserInput, CreateUserOutput, CreateUserInputSchema } from './create-user.schema';\n// TODO: Import or define a HashingService if password hashing is to be done in the use case.\n// For now, password is not explicitly handled by UserEntity for hashing.\n\n@injectable()\nexport class CreateUserUseCase implements IUseCase<CreateUserInput, Promise<Result<CreateUserOutput, DomainError>>> {\n  constructor(\n    @inject(UserRepositoryToken) private readonly userRepository: IUserRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger, // Corrected token and type\n  ) {}\n\n  async execute(input: CreateUserInput): Promise<Result<CreateUserOutput, DomainError>> {\n    this.logger.info(`[CreateUserUseCase] Attempting to create user with username: ${input.username}`);\n\n    const validationResult = this._validateInput(input);\n    if (validationResult.isFailure()) return Result.fail(validationResult.error);\n    const validatedInput = validationResult.value;\n\n    try {\n      const existingUserCheck = await this._checkExistingUser(validatedInput);\n      if (existingUserCheck.isFailure()) return Result.fail(existingUserCheck.error);\n\n      const voCreation = this._createValueObjects(validatedInput);\n      if (voCreation.isFailure()) return Result.fail(voCreation.error);\n      const { username, email, nickname, avatar, defaultLLMProviderConfigId, assistantId } = voCreation.value;\n\n      const entityCreation = this._createUserEntity(username, email, nickname, avatar, defaultLLMProviderConfigId, assistantId);\n      if (entityCreation.isFailure()) return Result.fail(entityCreation.error);\n      const userEntity = entityCreation.value;\n\n      const saveResult = await this.userRepository.add(userEntity);\n      if (saveResult.isFailure()) {\n        this.logger.error('[CreateUserUseCase] Failed to save user to repository', saveResult.error);\n        return Result.fail(saveResult.error);\n      }\n\n      this.logger.info(`[CreateUserUseCase] User created successfully: ${userEntity.id.value}`);\n      return Result.ok(this._mapToOutput(userEntity));\n\n    } catch (error: unknown) {\n      this.logger.error('[CreateUserUseCase] Unexpected error while creating user', error);\n      if (error instanceof DomainError) return Result.fail(error);\n      const message = error instanceof Error ? error.message : String(error);\n      return Result.fail(new ApplicationError(`An unexpected error occurred: ${message}`));\n    }\n  }\n\n  private _validateInput(input: CreateUserInput): Result<CreateUserInput, ValidationError> {\n    const validationResult = CreateUserInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      const errorMessage = 'Invalid input for CreateUserUseCase';\n      this.logger.error(`[CreateUserUseCase] Validation Error: ${errorMessage}`, validationResult.error.flatten());\n      return Result.fail(new ValidationError(errorMessage, validationResult.error.flatten().fieldErrors));\n    }\n    return Result.ok(validationResult.data);\n  }\n\n  private async _checkExistingUser(validatedInput: CreateUserInput): Promise<Result<void, ApplicationError>> {\n    const existingByUsername = await this.userRepository.findByUsername(UserUsername.create(validatedInput.username).getOrThrow());\n    if (existingByUsername.isSuccess() && existingByUsername.value) {\n      return Result.fail(new ApplicationError('Username already exists.'));\n    }\n    const existingByEmail = await this.userRepository.findByEmail(UserEmail.create(validatedInput.email).getOrThrow());\n    if (existingByEmail.isSuccess() && existingByEmail.value) {\n      return Result.fail(new ApplicationError('Email already exists.'));\n    }\n    return Result.ok(undefined);\n  }\n\n  private _createValueObjects(validatedInput: CreateUserInput): Result<{\n    username: UserUsername;\n    email: UserEmail;\n    nickname: UserNickname;\n    avatar: UserAvatar;\n    defaultLLMProviderConfigId: Identity;\n    assistantId: Identity | null;\n  }, DomainError> {\n    const usernameResult = UserUsername.create(validatedInput.username);\n    const emailResult = UserEmail.create(validatedInput.email);\n    const nicknameResult = UserNickname.create(validatedInput.nickname);\n    const avatarResult = UserAvatar.create(validatedInput.avatarUrl || null);\n    const llmConfigIdResult = Identity.create(validatedInput.defaultLLMProviderConfigId);\n    let assistantIdResult: Result<Identity | null, DomainError> = Result.ok(null);\n    if (validatedInput.assistantId) {\n      assistantIdResult = Identity.create(validatedInput.assistantId);\n    }\n\n    const combinedResult = Result.combine([\n      usernameResult, emailResult, nicknameResult, avatarResult, llmConfigIdResult, assistantIdResult\n    ]);\n\n    if (combinedResult.isFailure()) {\n      this.logger.warn('[CreateUserUseCase] Error creating user value objects', combinedResult.error);\n      return Result.fail(combinedResult.error);\n    }\n    return Result.ok({\n      username: usernameResult.value,\n      email: emailResult.value,\n      nickname: nicknameResult.value,\n      avatar: avatarResult.value,\n      defaultLLMProviderConfigId: llmConfigIdResult.value,\n      assistantId: assistantIdResult.value,\n    });\n  }\n\n  private _createUserEntity(\n    username: UserUsername,\n    email: UserEmail,\n    nickname: UserNickname,\n    avatar: UserAvatar,\n    defaultLLMProviderConfigId: Identity,\n    assistantId: Identity | null\n  ): Result<UserEntity, DomainError> {\n    const userProps: UserProps = {\n      id: UserId.create(),\n      username,\n      email,\n      nickname,\n      avatar,\n      defaultLLMProviderConfigId,\n      assistantId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const userEntityResult = UserEntity.create(userProps);\n    if (userEntityResult.isFailure()) {\n      this.logger.error('[CreateUserUseCase] Failed to create user entity', userEntityResult.error);\n      return Result.fail(userEntityResult.error);\n    }\n    return Result.ok(userEntityResult.value);\n  }\n\n  private _mapToOutput(userEntity: UserEntity): CreateUserOutput {\n    return {\n      id: userEntity.id.value,\n      username: userEntity.username().value,\n      email: userEntity.email().value,\n      nickname: userEntity.nickname().value,\n      avatarUrl: userEntity.avatar().value,\n      defaultLLMProviderConfigId: userEntity.defaultLLMProviderConfigId().value,\n      assistantId: userEntity.assistantId()?.value ?? null,\n      createdAt: userEntity.createdAt.toISOString(),\n      updatedAt: userEntity.updatedAt.toISOString(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/get-user.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/use-cases/user/get-user.use-case.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":3,"column":91,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":3,"endColumn":110},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSuccess' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":62},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":13,"column":89,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":13,"endColumn":106},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":21,"column":70,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":21,"endColumn":97},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":28,"column":38,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":28,"endColumn":50},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":29,"column":51,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":29,"endColumn":63},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":35,"column":34,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":35,"endColumn":46},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":42,"column":47,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":42,"endColumn":59},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":46,"column":26,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":46,"endColumn":100},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":48,"column":67,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":48,"endColumn":79},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":52,"column":49,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":52,"endColumn":61},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":54,"column":30,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":54,"endColumn":57},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":57,"column":34,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":57,"endColumn":46},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":60,"column":93,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":60,"endColumn":105},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":69,"column":108,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":69,"endColumn":120},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":71,"column":39,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":71,"endColumn":51},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":87,"column":92,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":87,"endColumn":104},{"ruleId":"id-length","severity":1,"message":"Identifier name 'e' is too short (< 2).","line":88,"column":14,"nodeType":"Identifier","messageId":"tooShort","endLine":88,"endColumn":15}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from 'inversify';\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from '@/core/common/services/i-logger.service'; // Corrected import\n\nimport { IUserRepository, UserRepositoryToken } from '@/domain/user/ports/user-repository.interface';\nimport { UserEntity } from '@/domain/user/user.entity';\nimport { UserEmail } from '@/domain/user/value-objects/user-email.vo';\nimport { UserId } from '@/domain/user/value-objects/user-id.vo';\n\nimport { ApplicationError, DomainError, NotFoundError, ValidationError } from '@/application/common/errors';\nimport { IUseCase } from '@/application/common/ports/use-case.interface';\n\nimport { Result, ok, error as resultError, isError, isSuccess } from '@/shared/result'; // Import helpers\n\nimport { GetUserInput, GetUserOutput, GetUserInputSchema } from './get-user.schema';\n\n@injectable()\nexport class GetUserUseCase implements IUseCase<GetUserInput, Promise<Result<GetUserOutput | null, DomainError>>> {\n  constructor(\n    @inject(UserRepositoryToken) private readonly userRepository: IUserRepository,\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger, // Corrected token and type\n  ) {}\n\n  async execute(input: GetUserInput): Promise<Result<GetUserOutput | null, DomainError>> {\n    this.logger.info(`[GetUserUseCase] Attempting to get user with input: ${JSON.stringify(input)}`);\n\n    const validationResult = this._validateInput(input);\n    if (isError(validationResult)) { // Corrected\n      return resultError(validationResult.error); // Corrected\n    }\n    const validatedInput = validationResult.value;\n\n    try {\n      const userResult = await this._fetchUser(validatedInput);\n      if (isError(userResult)) { // Corrected\n        // Log specific not found cases or propagate other domain errors\n        if (userResult.error instanceof NotFoundError) {\n          this.logger.info(`[GetUserUseCase] User not found with input: ${JSON.stringify(validatedInput)}`);\n        } else {\n          this.logger.warn('[GetUserUseCase] Error while fetching user', userResult.error);\n        }\n        return resultError(userResult.error); // Corrected\n      }\n\n      const userEntity = userResult.value;\n      if (!userEntity) { // This check remains, as Result<UserEntity | null> allows null in success\n        this.logger.info(`[GetUserUseCase] User not found after successful fetch: ${JSON.stringify(validatedInput)}`);\n        return resultError(new NotFoundError('User not found.')); // Corrected\n      }\n\n      this.logger.info(`[GetUserUseCase] User found: ${userEntity.id.value}`);\n      return ok(this._mapToOutput(userEntity)); // Corrected\n\n    } catch (err: unknown) { // Changed 'error' to 'err'\n      this.logger.error('[GetUserUseCase] Unexpected error while getting user', err);\n      if (err instanceof DomainError) {\n        return resultError(err); // Corrected\n      }\n      const message = err instanceof Error ? err.message : String(err);\n      return resultError(new ApplicationError(`An unexpected error occurred: ${message}`)); // Corrected\n    }\n  }\n\n  private _validateInput(input: GetUserInput): Result<GetUserInput, ValidationError> {\n    const validationResult = GetUserInputSchema.safeParse(input);\n    if (!validationResult.success) {\n      const errorMessage = 'Invalid input for GetUserUseCase';\n      this.logger.error(`[GetUserUseCase] Validation Error: ${errorMessage}`, validationResult.error.flatten());\n      return resultError(new ValidationError(errorMessage, validationResult.error.flatten().fieldErrors)); // Corrected\n    }\n    return ok(validationResult.data); // Corrected\n  }\n\n  private async _fetchUser(validatedInput: GetUserInput): Promise<Result<UserEntity | null, DomainError>> {\n    const { userId, email } = validatedInput;\n    // Assuming UserId.create and UserEmail.create throw on error, caught by the main try/catch\n    // And repository methods return Result\n    try {\n      if (userId) {\n        const userIdVo = UserId.create(userId);\n        return this.userRepository.findById(userIdVo);\n      } else if (email) {\n        const emailVo = UserEmail.create(email);\n        return this.userRepository.findByEmail(emailVo);\n      }\n      // This path should ideally not be reached due to Zod validation, but included for robustness\n      return resultError(new ValidationError('Either userId or email must be provided.')); // Corrected\n    } catch (e) {\n        const err = e instanceof DomainError ? e : new DomainError(e instanceof Error ? e.message : String(e));\n        this.logger.warn(`[GetUserUseCase] Error creating VO in _fetchUser: ${err.message}`, err);\n        return resultError(err);\n    }\n  }\n\n  private _mapToOutput(userEntity: UserEntity): GetUserOutput {\n    return {\n      id: userEntity.id.value,\n      username: userEntity.username().value,\n      email: userEntity.email().value,\n      nickname: userEntity.nickname().value,\n      avatarUrl: userEntity.avatar().value,\n      defaultLLMProviderConfigId: userEntity.defaultLLMProviderConfigId().value,\n      assistantId: userEntity.assistantId()?.value ?? null,\n      createdAt: userEntity.createdAt.toISOString(),\n      updatedAt: userEntity.updatedAt.toISOString(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.close.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":38,"nodeType":"Literal","endLine":12,"endColumn":103,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":41,"nodeType":"Literal","endLine":14,"endColumn":109,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":16,"column":34,"nodeType":"Literal","endLine":16,"endColumn":95,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.error-handling.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":38,"nodeType":"Literal","endLine":12,"endColumn":103,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":41,"nodeType":"Literal","endLine":14,"endColumn":109,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":16,"column":34,"nodeType":"Literal","endLine":16,"endColumn":95,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.initialization.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":4,"column":38,"nodeType":"Literal","endLine":4,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":59,"nodeType":"Literal","endLine":6,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":52,"nodeType":"Literal","endLine":8,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":38,"nodeType":"Literal","endLine":10,"endColumn":103,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":12,"column":41,"nodeType":"Literal","endLine":12,"endColumn":109,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":14,"column":34,"nodeType":"Literal","endLine":14,"endColumn":95,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.job-processing.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.lock-renewal.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":6,"column":38,"nodeType":"Literal","endLine":6,"endColumn":113,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":8,"column":59,"nodeType":"Literal","endLine":8,"endColumn":126,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]},{"ruleId":"boundaries/element-types","severity":2,"message":"APPLICATION: Proibido importar de infrastructure (permitido: domain, shared).","line":10,"column":52,"nodeType":"Literal","endLine":10,"endColumn":115,"suppressions":[{"kind":"directive","justification":"Integration test needs access to infrastructure"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/__tests__/worker.service.spec.helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/worker.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/application/worker/worker.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/base.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/ports/repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/services/i-logger.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/value-objects/base.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/common/value-objects/identity.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent-internal-state.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent-persona-template.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/agent.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-internal-state-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-persona-template-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/ports/agent-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-max-iterations.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/agent-temperature.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/current-goal.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/current-project-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/internal-state/general-notes.collection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-backstory.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-goal.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/persona-role.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/persona/tool-names.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/agent/value-objects/target-agent-role.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/annotation.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/ports/annotation-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/ports/annotation-repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/value-objects/annotation-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/annotation/value-objects/annotation-text.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/common/errors.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[464,467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[464,467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job-options.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.serialization.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/__tests__/job.entity.state-transitions.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-persistence.mapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-processing.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job-state.mutator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/job.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/utils/calculate-backoff.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/__tests__/job-id.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/__tests__/job-options.vo.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/activity-history-entry.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/activity-history.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/job/value-objects/job-options.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/llm-provider-config.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/ports/llm-provider-config-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-api-key.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-config-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/llm-provider-config/value-objects/llm-provider-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/memory-item.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/ports/memory-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/ports/memory-repository.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-content.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-embedding.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-source.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/memory/value-objects/memory-item-tags.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/ports/project-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/project.entity.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":13,"column":37,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":13,"endColumn":53},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":20,"column":37,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":20,"endColumn":53}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/core/domain/project/project.entity.ts\nimport { AbstractEntity, EntityProps } from \"@/core/common/base.entity\";\n\nimport { EntityError } from \"@/domain/common/errors\";\n\nimport { ProjectDescription } from \"./value-objects/project-description.vo\";\nimport { ProjectId } from \"./value-objects/project-id.vo\";\nimport { ProjectName } from \"./value-objects/project-name.vo\";\n\ninterface ProjectConstructorProps {\n  id?: ProjectId;\n  name: ProjectName;\n  description?: ProjectDescription; // Made optional\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\ninterface InternalProjectProps extends EntityProps<ProjectId> {\n  name: ProjectName;\n  description?: ProjectDescription; // Made optional\n}\n\nexport class Project extends AbstractEntity<ProjectId, InternalProjectProps> {\n  private constructor(props: InternalProjectProps) {\n    super(props);\n  }\n\n  public static create(props: ProjectConstructorProps): Project {\n    if (!props.name) throw new EntityError(\"Project name is required.\");\n    // Description is now optional, so no check needed here if it's undefined.\n    // If it's provided, it should be a valid ProjectDescription instance.\n\n    const now = new Date();\n    const projectId = props.id || ProjectId.generate();\n\n    const internalProps: InternalProjectProps = {\n      id: projectId,\n      name: props.name,\n      description: props.description,\n      createdAt: props.createdAt || now,\n      updatedAt: props.updatedAt || now,\n    };\n\n    return new Project(internalProps);\n  }\n\n  public name(): ProjectName {\n    return this.props.name;\n  }\n\n  public description(): ProjectDescription {\n    return this.props.description;\n  }\n\n  public changeName(newName: ProjectName): Project {\n    if (!newName)\n      throw new EntityError(\n        \"New name cannot be null or undefined for Project.\"\n      );\n    return new Project({\n      ...this.props,\n      name: newName,\n      updatedAt: new Date(),\n    });\n  }\n\n  public changeDescription(newDescription: ProjectDescription): Project {\n    if (!newDescription)\n      throw new EntityError(\n        \"New description cannot be null or undefined for Project.\"\n      );\n    return new Project({\n      ...this.props,\n      description: newDescription,\n      updatedAt: new Date(),\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-description.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/project/value-objects/project-name.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/ports/source-code-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/source-code.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-docs-path.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/source-code/value-objects/repository-path.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/ports/user-repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/user.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-avatar.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-email.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-id.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-nickname.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/domain/user/value-objects/user-username.vo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/file-system.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/job-queue.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/llm-adapter.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/llm-adapter.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/ports/adapters/version-control-system.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/core/tools/tool.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/examples/queue-usage-example.final.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/adapters/llm/mock-llm.adapter.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":5,"column":12,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":5,"endColumn":31},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":6,"column":26,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":6,"endColumn":45},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":15,"column":69,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":15,"endColumn":94},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":20,"column":69,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":20,"endColumn":96},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":40,"column":19,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":40,"endColumn":37},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":58,"column":17,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":58,"endColumn":35},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":92,"column":61,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":92,"endColumn":79},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":93,"column":29,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":93,"endColumn":47},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":96,"column":49,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":96,"endColumn":86},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":102,"column":27,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":102,"endColumn":45},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":105,"column":88,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":105,"endColumn":122},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":109,"column":25,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":109,"endColumn":43},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":111,"column":72,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":111,"endColumn":101},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":125,"column":29,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":125,"endColumn":47}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from \"inversify\";\nimport { z } from \"zod\";\n\nimport {\n  ILogger, // Corrected import\n  LOGGER_INTERFACE_TYPE, // Corrected import\n} from \"@/core/common/services/i-logger.service\";\nimport { LLMError } from \"@/core/domain/common/errors\";\nimport { ILLMAdapter } from \"@/core/ports/adapters/llm-adapter.interface\";\nimport {\n  LLMGenerationOptions,\n  LanguageModelMessage,\n} from \"@/core/ports/adapters/llm-adapter.types\";\n\nimport { Result, ok, error as resultError } from \"@/shared/result\"; // Corrected import names\n\n@injectable()\nexport class MockLLMAdapter implements ILLMAdapter {\n  constructor(\n    @inject(LOGGER_INTERFACE_TYPE) private readonly logger: ILogger // Corrected token and type\n  ) {\n    this.logger.info(\"[MockLLMAdapter] Initialized\");\n  }\n\n  async generateText(\n    messages: LanguageModelMessage[],\n    options?: LLMGenerationOptions\n  ): Promise<Result<LanguageModelMessage, LLMError>> {\n    this.logger.info(\"[MockLLMAdapter] generateText called\", {\n      messages,\n      options,\n    });\n    const lastUserMessage = messages\n      .filter((message) => message.role === \"user\")\n      .pop();\n    const responseContent = `Mock response to: ${lastUserMessage?.content || \"your request\"}. Options: ${JSON.stringify(options || {})}`;\n\n    // Simulate tool call if prompt asks for it\n    if (lastUserMessage?.content?.toLowerCase().includes(\"use tool\")) {\n      return ok({ // Corrected usage\n        role: \"assistant\",\n        content: null,\n        tool_calls: [\n          {\n            id: \"tool_call_mock_123\",\n            type: \"function\",\n            function: {\n              name: \"example.tool\",\n              arguments: JSON.stringify({\n                message: \"hello from mock tool call\",\n              }),\n            },\n          },\n        ],\n      });\n    }\n\n    return ok({ // Corrected usage\n      role: \"assistant\",\n      content: responseContent,\n    });\n  }\n\n  async generateStructuredOutput<S extends z.ZodTypeAny>(\n    prompt: string,\n    schema: S,\n    options?: LLMGenerationOptions\n  ): Promise<Result<z.infer<S>, LLMError>> {\n    this.logger.info(\"[MockLLMAdapter] generateStructuredOutput called\", {\n      prompt,\n      schemaDef: schema.description,\n      options,\n    });\n    // Try to return a mock object that somewhat fits common schemas, or a default based on schema type\n    try {\n      if (schema instanceof z.ZodObject) {\n        // Replaced any with Record<string, unknown>\n        const mockData: Record<string, unknown> = {};\n        for (const key in schema.shape) {\n          const fieldSchema = schema.shape[key];\n          if (fieldSchema instanceof z.ZodString) {\n            mockData[key] = `mock string for ${key}`;\n          } else if (fieldSchema instanceof z.ZodNumber) {\n            mockData[key] = 123;\n          } else if (fieldSchema instanceof z.ZodBoolean) {\n            mockData[key] = true;\n          } else {\n            mockData[key] = null;\n          }\n        }\n        const validation = schema.safeParse(mockData);\n        if (validation.success) return ok(validation.data); // Corrected usage\n        return resultError( // Corrected usage\n          new LLMError(\n            \"Failed to generate mock structured output matching schema.\",\n            { originalError: validation.error } // Wrapped ZodError in details object\n          )\n        );\n      }\n      // Renamed e to error\n    } catch (error) {\n      return resultError( // Corrected usage\n        new LLMError(\n          \"Error generating mock structured output for schema.\",\n          { originalError: error instanceof Error ? error : new Error(String(error)) } // Wrapped error in details object\n        )\n      );\n    }\n    return resultError( // Corrected usage\n      new LLMError(\n        \"Mock structured output for this schema type not implemented.\" // No second arg here is fine\n      )\n    );\n  }\n\n  async *streamText(\n    prompt: string,\n    options?: LLMGenerationOptions\n  ): AsyncGenerator<Result<string, LLMError>> {\n    this.logger.info(\"[MockLLMAdapter] streamText called\", { prompt, options });\n    const response = `Mock streamed response to: ${prompt}. Options: ${JSON.stringify(options || {})}`;\n    const words = response.split(\" \");\n    for (const word of words) {\n      await new Promise((resolve) => setTimeout(resolve, 50));\n      yield ok(word + \" \"); // Corrected usage\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/ioc/inversify.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/ioc/types.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":23,"column":35,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":23,"endColumn":100}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const TYPES = {\n  // === Repositories ===\n  IAgentInternalStateRepository: Symbol.for(\"IAgentInternalStateRepository\"),\n  IAgentPersonaTemplateRepository: Symbol.for(\n    \"IAgentPersonaTemplateRepository\"\n  ),\n  IAgentRepository: Symbol.for(\"IAgentRepository\"),\n  IAnnotationRepository: Symbol.for(\"IAnnotationRepository\"),\n  IJobRepository: Symbol.for(\"IJobRepository\"),\n  ILLMProviderConfigRepository: Symbol.for(\"ILLMProviderConfigRepository\"),\n  IMemoryRepository: Symbol.for(\"IMemoryRepository\"),\n  IProjectRepository: Symbol.for(\"IProjectRepository\"),\n  IQueueMetadataRepository: Symbol.for(\"IQueueMetadataRepository\"),\n  ISourceCodeRepository: Symbol.for(\"ISourceCodeRepository\"),\n  IUserRepository: Symbol.for(\"IUserRepository\"),\n\n  // === Services ===\n  // Domain or Application Layer Services (Interfaces)\n  IAgentExecutor: Symbol.for(\"IAgentExecutor\"),\n  IWorkerService: Symbol.for(\"IWorkerService\"),\n\n  // Infrastructure Layer Services (Interfaces)\n  ILogger: Symbol.for(\"ILogger\"), // Corrected to match interface and symbol in i-logger.service.ts\n  IToolRegistryService: Symbol.for(\"IToolRegistryService\"),\n  IQueueService: Symbol.for(\"IQueueService\"),\n  IEmbeddingService: Symbol.for(\"IEmbeddingService\"),\n\n  // Adapters (Interfaces for external systems or complex drivers)\n  IJobQueueAdapter: Symbol.for(\"IJobQueueAdapter\"),\n  ILLMAdapter: Symbol.for(\"ILLMAdapter\"),\n  IFileSystemAdapter: Symbol.for(\"IFileSystemAdapter\"),\n  IVersionControlAdapter: Symbol.for(\"IVersionControlAdapter\"),\n\n  // === Use Cases ===\n  // Application Layer Use Cases (Specific command/query handlers)\n  CreateAgentUseCase: Symbol.for(\"CreateAgentUseCase\"),\n  LoadAgentInternalStateUseCase: Symbol.for(\"LoadAgentInternalStateUseCase\"),\n  SaveAgentInternalStateUseCase: Symbol.for(\"SaveAgentInternalStateUseCase\"),\n  CreatePersonaTemplateUseCase: Symbol.for(\"CreatePersonaTemplateUseCase\"),\n  ListAnnotationsUseCase: Symbol.for(\"ListAnnotationsUseCase\"),\n  RemoveAnnotationUseCase: Symbol.for(\"RemoveAnnotationUseCase\"),\n  SaveAnnotationUseCase: Symbol.for(\"SaveAnnotationUseCase\"),\n  CancelJobUseCase: Symbol.for(\"CancelJobUseCase\"),\n  CreateJobUseCase: Symbol.for(\"CreateJobUseCase\"),\n  ListJobsUseCase: Symbol.for(\"ListJobsUseCase\"),\n  GetJobDetailsUseCase: Symbol.for(\"GetJobDetailsUseCase\"),\n  RetryJobUseCase: Symbol.for(\"RetryJobUseCase\"),\n  UpdateJobUseCase: Symbol.for(\"UpdateJobUseCase\"),\n  CreateLLMProviderConfigUseCase: Symbol.for(\"CreateLLMProviderConfigUseCase\"),\n  RemoveMemoryItemUseCase: Symbol.for(\"RemoveMemoryItemUseCase\"),\n  SaveMemoryItemUseCase: Symbol.for(\"SaveMemoryItemUseCase\"),\n  SearchMemoryItemsUseCase: Symbol.for(\"SearchMemoryItemsUseCase\"),\n  SearchSimilarMemoryItemsUseCase: Symbol.for(\n    \"SearchSimilarMemoryItemsUseCase\"\n  ),\n  CreateProjectUseCase: Symbol.for(\"CreateProjectUseCase\"),\n  GetProjectDetailsAppUseCase: Symbol.for(\"GetProjectDetailsAppUseCase\"),\n  ListProjectsAppUseCase: Symbol.for(\"ListProjectsAppUseCase\"),\n  CreateUserUseCase: Symbol.for(\"CreateUserUseCase\"),\n  GetUserUseCase: Symbol.for(\"GetUserUseCase\"),\n\n  // === Tools ===\n  FileSystemTool: Symbol.for(\"FileSystemTool\"),\n  ExecuteCommandTool: Symbol.for(\"ExecuteCommandTool\"),\n  DrizzleClient: Symbol.for(\"DrizzleClient\"),\n\n  // Worker Pool (if managed via DI)\n  IWorkerPool: Symbol.for(\"IWorkerPool\"),\n\n  // Chat Service\n  IChatService: Symbol.for(\"IChatService\"),\n\n  // Queue Scheduler Service\n  QueueSchedulerService: Symbol.for(\"QueueSchedulerService\"),\n\n  // Specific Queue Services & Workers\n  AgentJobQueueService: Symbol.for(\"AgentJobQueueService\"),\n  AgentJobWorkerService: Symbol.for(\"AgentJobWorkerService\"),\n  TaskTool: Symbol.for(\"TaskTool\"),\n};\n\nexport { TYPES };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/drizzle.client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.clean.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.countByStatus.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.findNextJobs.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.getByStatus.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.locking.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.remove.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.save-findById.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.stalled.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/__tests__/drizzle-job.repository.update.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/drizzle-job.mapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/job/drizzle-job.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/repositories/project.repository.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LOGGER_INTERFACE_TYPE' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":40},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":3,"column":91,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":3,"endColumn":110},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":20,"column":61,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":20,"endColumn":88}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from \"inversify\";\n\nimport { ILogger, LOGGER_INTERFACE_TYPE } from \"@/core/common/services/i-logger.service\"; // Corrected import\nimport { DomainError, NotFoundError } from \"@/core/domain/common/errors\";\nimport { IProjectRepository } from \"@/core/domain/project/ports/project-repository.interface\";\nimport { Project } from \"@/core/domain/project/project.entity\";\nimport { ProjectId } from \"@/core/domain/project/value-objects/project-id.vo\";\n\nimport { TYPES } from \"@/infrastructure/ioc/types\";\n\nimport { Result, ok, error as _errResult } from \"@/shared/result\";\n\nexport type DrizzleSchema = unknown;\nexport type DrizzleDB = unknown;\n\n@injectable()\nexport class DrizzleProjectRepository implements IProjectRepository {\n  constructor(\n    @inject(TYPES.DrizzleClient) private readonly db: DrizzleDB,\n    @inject(TYPES.ILogger) private readonly logger: ILogger // Corrected token and type\n  ) {\n    this.logger.info(\"[DrizzleProjectRepository] initialized\");\n  }\n\n  async save(project: Project): Promise<Result<Project, DomainError>> {\n    this.logger.info(\n      `[DrizzleProjectRepository] save called for project ID: ${project.id.value}`\n    );\n    return ok(project);\n  }\n\n  async findById(id: ProjectId): Promise<Result<Project | null, DomainError>> {\n    this.logger.info(\n      `[DrizzleProjectRepository] findById called for project ID: ${id.value}`\n    );\n    return ok(null);\n  }\n\n  async findByName(name: string): Promise<Result<Project | null, DomainError>> {\n    this.logger.info(\n      `[DrizzleProjectRepository] findByName called for name: ${name}`\n    );\n    return ok(null);\n  }\n\n  async listAll(): Promise<Result<Project[], DomainError>> {\n    this.logger.info(`[DrizzleProjectRepository] listAll called`);\n    return ok([]);\n  }\n\n  async delete(\n    id: ProjectId\n  ): Promise<Result<void, DomainError | NotFoundError>> {\n    this.logger.info(\n      `[DrizzleProjectRepository] delete called for project ID: ${id.value}`\n    );\n    return ok(undefined);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/schema/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/schema/jobs.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/drizzle/test-db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent-internal-state.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent-persona-template.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/agent.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/annotation.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/llm-provider-config.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/memory.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/project.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/source-code.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/persistence/in-memory/repositories/user.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-add.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-admin.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-get.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-maintenance.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service-updates.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.extendJobLock.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.fetchNextJobAndLock.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.markJobAsCompleted.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.markJobAsFailed.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/queue.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/__tests__/test-db.helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/drizzle-queue.facade.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/job-processing.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/queue-maintenance.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/queue/drizzle/queue-service-core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/services/logger/console-logger.service.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":3,"column":68,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":3,"endColumn":87},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":6,"column":56,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":6,"endColumn":78}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, unmanaged } from \"inversify\";\n\nimport { ILogger } from \"@/core/common/services/i-logger.service\"; // Corrected import\n\n@injectable()\nexport class ConsoleLoggerService implements ILogger { // Corrected interface\n  private context?: string;\n\n  constructor(@unmanaged() context?: string) {\n    this.context = context;\n  }\n\n  private formatMessage(\n    level: string,\n    message: string,\n    meta?: unknown[]\n  ): string {\n    const timestamp = new Date().toISOString();\n    const contextString = this.context ? `[${this.context}] ` : \"\";\n    let logMessage = `${timestamp} [${level.toUpperCase()}] ${contextString}${message}`;\n    if (meta && meta.length > 0) {\n      logMessage += ` ${meta.map((meta) => (typeof meta === \"object\" ? JSON.stringify(meta) : meta)).join(\" \")}`;\n    }\n    return logMessage;\n  }\n\n  public log(message: string, ...meta: unknown[]): void {\n    console.log(this.formatMessage(\"log\", message, meta));\n  }\n\n  public error(\n    message: string,\n    error?: Error | unknown,\n    ...meta: unknown[]\n  ): void {\n    const fullMeta = error ? [error, ...meta] : meta;\n    console.error(this.formatMessage(\"error\", message, fullMeta));\n  }\n\n  public warn(message: string, ...meta: unknown[]): void {\n    console.warn(this.formatMessage(\"warn\", message, meta));\n  }\n\n  public info(message: string, ...meta: unknown[]): void {\n    console.info(this.formatMessage(\"info\", message, meta));\n  }\n\n  public debug(message: string, ...meta: unknown[]): void {\n    console.debug(this.formatMessage(\"debug\", message, meta));\n  }\n\n  public setContext(context: string): void {\n    this.context = context;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/services/tool-registry/tool-registry.service.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":5,"column":68,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":5,"endColumn":87},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":15,"column":61,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":15,"endColumn":88}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable, inject } from \"inversify\";\nimport { ZodAny } from \"zod\";\n\nimport { IToolRegistryService } from \"@/core/application/ports/services/i-tool-registry.service\";\nimport { ILogger } from \"@/core/common/services/i-logger.service\"; // Corrected import\nimport { IAgentTool } from \"@/core/tools/tool.interface.ts\";\n\nimport { TYPES } from \"@/infrastructure/ioc/types\";\n\n@injectable()\nexport class ToolRegistryService implements IToolRegistryService {\n  private readonly tools: Map<string, IAgentTool<ZodAny, unknown>> = new Map();\n\n  constructor(\n    @inject(TYPES.ILogger) private readonly logger: ILogger // Corrected token and type\n  ) {\n    this.logger.info(\"[ToolRegistryService] initialized\");\n  }\n\n  registerTool(tool: IAgentTool<ZodAny, unknown>): void {\n    if (this.tools.has(tool.name)) {\n      this.logger.warn(\n        `[ToolRegistryService] Tool with name '${tool.name}' is already registered. Overwriting.`\n      );\n    }\n    this.tools.set(tool.name, tool);\n    this.logger.info(`[ToolRegistryService] Tool '${tool.name}' registered.`);\n  }\n\n  getTool(toolName: string): IAgentTool<ZodAny, unknown> | undefined {\n    return this.tools.get(toolName);\n  }\n\n  listTools(): IAgentTool<ZodAny, unknown>[] {\n    return Array.from(this.tools.values());\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/infrastructure/tools/file-system.tool.ts","messages":[{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":6,"column":68,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":6,"endColumn":87},{"ruleId":"no-inline-comments","severity":2,"message":"Unexpected comment inline with code.","line":58,"column":61,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":58,"endColumn":88}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as fs from \"fs/promises\";\n\nimport { injectable, inject } from \"inversify\";\nimport { z, ZodAny } from \"zod\";\n\nimport { ILogger } from \"@/core/common/services/i-logger.service\"; // Corrected import\nimport { IAgentTool, IToolExecutionContext } from \"@/core/tools/tool.interface\";\n\nimport { ToolError } from \"@/domain/common/errors\";\n\nimport { TYPES } from \"@/infrastructure/ioc/types\";\n\nimport { Result, Ok, Err } from \"@/shared/result\";\n\n// Prefixed because these are internal schema details, not part of the public tool parameters interface\nconst _ReadFileParamsSchema = z.object({\n  filePath: z.string().describe(\"The path to the file to read.\"),\n});\n\n// Prefixed\nconst _WriteFileParamsSchema = z.object({\n  filePath: z.string().describe(\"The path to the file to write.\"),\n  content: z.string().describe(\"The content to write to the file.\"),\n});\n\n// Prefixed\nconst _ListFilesParamsSchema = z.object({\n  directoryPath: z\n    .string()\n    .describe(\"The path to the directory to list files from.\"),\n});\n\n@injectable()\nexport class FileSystemTool implements IAgentTool<ZodAny, unknown> {\n  public readonly name = \"fileSystem\";\n  public readonly description =\n    \"A tool for interacting with the file system, like reading, writing, and listing files.\";\n\n  public readonly parameters = z.object({\n    action: z\n      .enum([\"readFile\", \"writeFile\", \"listFiles\"])\n      .describe(\"The action to perform.\"),\n    filePath: z\n      .string()\n      .optional()\n      .describe(\"Path to the file (for readFile, writeFile).\"),\n    directoryPath: z\n      .string()\n      .optional()\n      .describe(\"Path to the directory (for listFiles).\"),\n    content: z\n      .string()\n      .optional()\n      .describe(\"Content to write (for writeFile).\"),\n  });\n\n  constructor(\n    @inject(TYPES.ILogger) private readonly logger: ILogger // Corrected token and type\n  ) {\n    this.logger.info(\"[FileSystemTool] initialized\");\n  }\n\n  async execute(\n    params: z.infer<typeof this.parameters>,\n    _executionContext?: IToolExecutionContext\n  ): Promise<Result<string | string[], ToolError>> {\n    this.logger.info(`[FileSystemTool] executing action: ${params.action}`);\n    try {\n      switch (params.action) {\n        case \"readFile\": {\n          if (!params.filePath)\n            return Err(new ToolError(\"filePath is required for readFile.\"));\n          return this._handleReadFile(params.filePath);\n        }\n        case \"writeFile\": {\n          if (!params.filePath)\n            return Err(new ToolError(\"filePath is required for writeFile.\"));\n          if (!params.content)\n            return Err(new ToolError(\"content is required for writeFile.\"));\n          return this._handleWriteFile(params.filePath, params.content);\n        }\n        case \"listFiles\": {\n          if (!params.directoryPath)\n            return Err(\n              new ToolError(\"directoryPath is required for listFiles.\")\n            );\n          return this._handleListFiles(params.directoryPath);\n        }\n        default: {\n          // This case should ideally be unreachable if Zod validation is exhaustive\n          // and all enum members are handled in the switch.\n          // params.action is 'never' here. For logging, we might need to cast params itself.\n          // However, a generic error message is safest if truly unreachable.\n          const actionValue = (params as Record<string, unknown>).action;\n          return Err(new ToolError(`Unknown fileSystem action received: ${String(actionValue)}`));\n        }\n      }\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.logger.error(\n        `[FileSystemTool] Error during ${params.action}: ${errorMessage}`\n      );\n      return Err(\n        new ToolError(\n          `FileSystemTool action ${params.action} failed: ${errorMessage}`\n        )\n      );\n    }\n  }\n\n  private async _handleReadFile(\n    filePath: string\n  ): Promise<Result<string, ToolError>> {\n    if (filePath.includes(\"..\"))\n      return Err(new ToolError(\"Invalid file path (path traversal detected).\"));\n    try {\n      const content = await fs.readFile(filePath, \"utf-8\");\n      return Ok(content);\n    } catch (error) {\n      return Err(this._createError(\"readFile\", error));\n    }\n  }\n\n  private async _handleWriteFile(\n    filePath: string,\n    content: string\n  ): Promise<Result<string, ToolError>> {\n    if (filePath.includes(\"..\"))\n      return Err(new ToolError(\"Invalid file path (path traversal detected).\"));\n    try {\n      await fs.writeFile(filePath, content, \"utf-8\");\n      return Ok(`File written successfully to ${filePath}`);\n    } catch (error) {\n      return Err(this._createError(\"writeFile\", error));\n    }\n  }\n\n  private async _handleListFiles(\n    directoryPath: string\n  ): Promise<Result<string[], ToolError>> {\n    if (directoryPath.includes(\"..\"))\n      return Err(\n        new ToolError(\"Invalid directory path (path traversal detected).\")\n      );\n    try {\n      const files = await fs.readdir(directoryPath);\n      return Ok(files);\n    } catch (error) {\n      return Err(this._createError(\"listFiles\", error));\n    }\n  }\n\n  private _createError(action: string, error: unknown): ToolError {\n    const errorMessage =\n      error instanceof Error ? error.message : String(error);\n    this.logger.error(\n      `[FileSystemTool] Error during ${action}: ${errorMessage}`\n    );\n    return new ToolError(\n      `FileSystemTool action ${action} failed: ${errorMessage}`\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/agent-instance.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/dm.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/llm-config.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/persona-template.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/handlers/user.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-chat.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/agent-instance.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/dm.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/llm-config.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/persona-template.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-handlers/user.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/ipc-project.handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/agent-instance.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/dm.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/llm-config.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/persona-template.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/project.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/main/mocks/user.mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/electron/preload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/dashboard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/docs/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/members/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/appearance/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/$configId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/profile/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/dm/$conversationId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(public)/onboarding/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/__root.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/MarkdownRenderer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/layout/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentLLMConfigSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentPersonaTemplateSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/fields/AgentTemperatureSliderField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatWindow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ConversationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ApiKeyField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/BaseUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ConfigNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/fields/ProviderSelectField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/InitialConfigStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/OnboardingWizard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/PersonaList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/WelcomeStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaBackstoryField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaGoalField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaRoleField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/fields/PersonaToolsField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/fields/ProjectDescriptionField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/fields/ProjectNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ParticipantListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectContextSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectParticipantsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserProfileForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/AvatarUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/DisplayNameField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/fields/EmailDisplayField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/layout/UserSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/layout/UserSidebarParts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcMutation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcSubscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/useIPC.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IElectronIPC' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/main.tsx","messages":[],"suppressedMessages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/ui/routeTree.gen'.","line":8,"column":27,"nodeType":"Literal","endLine":8,"endColumn":47,"suppressions":[{"kind":"directive","justification":"File generated by TanStack Router"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.service.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4792,4795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4792,4795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8168,8171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8168,8171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-channels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-chat.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-project.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/ipc-types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/result.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/shared/types/entities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]