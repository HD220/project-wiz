[{"filePath":"/app/src_refactored/presentation/ui/App.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":3,"column":24,"nodeType":"Literal","endLine":3,"endColumn":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { Button } from \"@ui/components/ui/button\";\n\nfunction App() {\n  return (\n    <div style={{ fontFamily: 'sans-serif', textAlign: 'center', paddingTop: '50px' }}>\n      <h1>Project Wiz - Refactored Frontend</h1>\n      <p>UI Application Placeholder - It works!</p>\n      <div style={{ marginTop: '20px' }}>\n        <Button>Click Me</Button>\n        <Button variant=\"secondary\" style={{ marginLeft: '10px' }}>Secondary Button</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/$agentId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/agents/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/chat/index.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `agent-001` must match one of the following formats: camelCase, PascalCase, UPPER_CASE, snake_case","line":33,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":33,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Object Literal Property name `proj-phoenix-general` must match one of the following formats: camelCase, PascalCase, UPPER_CASE, snake_case","line":38,"column":3,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":38,"endColumn":25}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentMessages' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { createFileRoute } from '@tanstack/react-router';\nimport { Bot, Hash } from 'lucide-react'; // Removed MessageSquare, Info, Users, Settings\nimport React, { useState } from 'react';\n\n// Button removed as it's not used\n// Placeholder components - these will be created in subsequent steps\nimport { ChatWindow } from '@/presentation/ui/features/chat/components/ChatWindow';\nimport { ConversationItem } from '@/presentation/ui/features/chat/components/ConversationList'; // Removed ConversationList as it's not used\n\n// Mock data for conversations/agents\n// Renamed MockConversation to ConversationItem to match the type from ConversationList.tsx\ninterface ConversationItemUIData extends ConversationItem { \n  id: string;\n  name: string;\n  type: 'dm' | 'channel'; // Direct Message or Project Channel\n  avatarUrl?: string; // For DMs\n  lastMessage?: string;\n  timestamp?: string;\n  unreadCount?: number;\n  participants?: number;\n  // isActive is part of ConversationItem for UI state, not core data here\n}\n\n// Mock messages for the ChatWindow\ninterface MockMessage {\n  id: string;\n  sender: { name: string; type: 'user' | 'agent'; avatarUrl?: string };\n  content: string;\n  timestamp: string;\n}\n\nconst mockMessages: Record<string, MockMessage[]> = {\n  'agent-001': [\n    { id: 'm1', sender: { name: 'J.Doe', type: 'user' }, content: 'Olá CoderBot, pode me ajudar com um script Python?', timestamp: '10:28' },\n    { id: 'm2', sender: { name: 'CoderBot-Alpha', type: 'agent', avatarUrl: '/avatars/agent-coder.png' }, content: 'Claro! Qual é o problema ou requisito?', timestamp: '10:29' },\n    { id: 'm3', sender: { name: 'CoderBot-Alpha', type: 'agent', avatarUrl: '/avatars/agent-coder.png' }, content: 'Ok, estou analisando o código agora...', timestamp: '10:30' },\n  ],\n  'proj-phoenix-general': [\n     { id: 'm4', sender: { name: 'Alice', type: 'user', avatarUrl: '/avatars/01.png' }, content: 'Reunião de planejamento às 14h.', timestamp: '09:15' },\n  ]\n};\n\n\nconst mockConversations: ConversationItemUIData[] = [ // Changed MockConversation to ConversationItemUIData\n  { id: 'agent-001', name: 'CoderBot-Alpha', type: 'dm', avatarUrl: '/avatars/agent-coder.png', lastMessage: \"Ok, estou analisando o código agora...\", timestamp: \"10:30\", unreadCount: 1 },\n  { id: 'user-alice', name: 'Alice (Designer)', type: 'dm', avatarUrl: '/avatars/01.png', lastMessage: \"Você viu o novo layout?\", timestamp: \"Ontem\" },\n  { id: 'proj-phoenix-general', name: '# geral (Projeto Phoenix)', type: 'channel', lastMessage: \"Reunião de planejamento às 14h.\", timestamp: \"09:15\", participants: 12 },\n  { id: 'agent-002', name: 'TestMaster-7000', type: 'dm', avatarUrl: '/avatars/agent-qa.png', lastMessage: \"Todos os testes passaram!\", timestamp: \"08:50\" },\n  { id: 'proj-quimera-dev', name: '# dev (Operação Quimera)', type: 'channel', lastMessage: \"Nova PR aberta para o microsserviço X.\", timestamp: \"Segunda\", participants: 5 },\n];\n\n\nfunction ChatPage() {\n  const [selectedConversationId, setSelectedConversationId] = useState<string | null>(mockConversations[0]?.id || null);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [currentMessages, setCurrentMessages] = useState<MockMessage[]>([]); // Will be populated by ChatWindow/MessageList\n\n  const selectedConversation = mockConversations.find(conv => conv.id === selectedConversationId);\n\n  const handleSendMessage = (content: string) => {\n    // This is a placeholder. In a real app, this would send the message via IPC/API\n    // and then update the local message list optimistically or upon confirmation.\n    console.log(`Sending message to ${selectedConversation?.name}: ${content}`);\n    const newMessage: MockMessage = {\n      id: `msg-${Date.now()}`,\n      sender: { name: 'J.Doe', type: 'user' }, // Assuming current user is J.Doe\n      content,\n      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n    };\n    // For UI testing, you might temporarily add to a local state managed here or in ChatWindow\n    // For now, just log it. MessageList will use its own mock or passed messages.\n    if (selectedConversationId) {\n        // This is just for local echo test, ChatWindow would handle its own state or receive updates\n        setCurrentMessages(prev => [...prev, newMessage]);\n        // In a real scenario, ChatWindow's messages prop would be updated via a central store or query refetch\n        const targetMessages = mockMessages[selectedConversationId] || [];\n        targetMessages.push(newMessage); // This mutates mockMessages, for demo only\n    }\n  };\n\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-100 dark:bg-slate-950\">\n      {/* Painel Esquerdo: Lista de Conversas/Agentes */}\n      <aside className=\"w-64 md:w-72 flex-shrink-0 border-r border-slate-200 dark:border-slate-800 bg-slate-50 dark:bg-slate-900 flex flex-col\">\n        <header className=\"p-3 border-b border-slate-200 dark:border-slate-800\">\n          <h2 className=\"text-lg font-semibold text-slate-800 dark:text-slate-100\">Conversas</h2>\n          {/* Pode ter um input de busca aqui */}\n        </header>\n        <nav className=\"flex-1 overflow-y-auto p-2 space-y-1\">\n          {mockConversations.map(conv => (\n            <button\n              key={conv.id}\n              onClick={() => setSelectedConversationId(conv.id)}\n              className={`w-full flex items-center space-x-3 p-2 rounded-md text-left hover:bg-slate-200 dark:hover:bg-slate-700/60 transition-colors\n                ${selectedConversationId === conv.id ? 'bg-sky-100 dark:bg-sky-700/50 text-sky-700 dark:text-sky-300 font-medium' : 'text-slate-700 dark:text-slate-300'}`}\n            >\n              {conv.type === 'dm' ? (\n                conv.avatarUrl ? <img src={conv.avatarUrl} alt={conv.name} className=\"h-8 w-8 rounded-full\" /> : <Bot className=\"h-7 w-7 text-slate-500\" />\n              ) : (\n                <Hash className=\"h-5 w-5 text-slate-500\" />\n              )}\n              <div className=\"flex-1 min-w-0\">\n                <span className=\"text-sm truncate block\">{conv.name}</span>\n                {conv.lastMessage && <span className=\"text-xs text-slate-500 dark:text-slate-400 truncate block\">{conv.lastMessage}</span>}\n              </div>\n              {conv.unreadCount && conv.unreadCount > 0 && (\n                <span className=\"ml-auto text-xs bg-red-500 text-white font-semibold rounded-full px-1.5 py-0.5\">\n                  {conv.unreadCount}\n                </span>\n              )}\n            </button>\n          ))}\n        </nav>\n        <footer className=\"p-2 border-t border-slate-200 dark:border-slate-800\">\n          {/* Pode ter info do usuário ou status aqui */}\n          <p className=\"text-xs text-slate-500 dark:text-slate-400 text-center\">Usuário: J.Doe</p>\n        </footer>\n      </aside>\n\n      {/* Painel Central: Janela de Chat */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <ChatWindow\n          conversation={selectedConversation || null}\n          messages={mockMessages[selectedConversationId || ''] || []} // Pass appropriate messages\n          onSendMessage={handleSendMessage}\n          isLoading={false} // Placeholder\n        />\n      </main>\n\n      {/* Painel Direito: Informações Contextuais (Opcional) */}\n      {/*\n      <aside className=\"w-64 md:w-72 flex-shrink-0 border-l border-slate-200 dark:border-slate-800 bg-slate-50 dark:bg-slate-900 p-4 hidden lg:block\">\n        <h3 className=\"text-lg font-semibold text-slate-800 dark:text-slate-100 mb-3\">Contexto</h3>\n        {selectedConversation ? (\n          <div>\n            <p className=\"text-sm\">Detalhes sobre: <span className=\"font-medium\">{selectedConversation.name}</span></p>\n            <p className=\"text-xs text-slate-500 dark:text-slate-400\">Tipo: {selectedConversation.type}</p>\n            {selectedConversation.type === 'channel' && selectedConversation.participants && (\n               <p className=\"text-xs text-slate-500 dark:text-slate-400\">{selectedConversation.participants} membros</p>\n            )}\n          </div>\n        ) : (\n          <p className=\"text-sm text-slate-500 dark:text-slate-400\">Nenhuma conversa selecionada.</p>\n        )}\n      </aside>\n      */}\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(app)/chat/')({\n  component: ChatPage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/dashboard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/edit/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'templateId' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":79}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createFileRoute, useRouter, useParams, Link } from '@tanstack/react-router';\nimport { ArrowLeft, Loader2, ServerCrash } from 'lucide-react'; // Added Loader2, ServerCrash\nimport React from 'react'; // Removed useEffect, useState\nimport { toast } from 'sonner';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport { PersonaTemplateForm, PersonaTemplateFormData } from '@/presentation/ui/features/persona/components/PersonaTemplateForm';\nimport { useIpcMutation } from '@/presentation/ui/hooks/ipc/useIpcMutation';\nimport { useIpcQuery } from '@/presentation/ui/hooks/ipc/useIpcQuery';\n\nimport { IPC_CHANNELS } from '@/shared/ipc-channels';\nimport type {\n  GetPersonaTemplateDetailsRequest,\n  GetPersonaTemplateDetailsResponseData,\n  UpdatePersonaTemplateRequest,\n  UpdatePersonaTemplateResponseData,\n  IPCResponse\n} from '@/shared/ipc-types';\n\n// Helper for loading/error states\ninterface EditPersonaTemplateLoadingErrorDisplayProps {\n  isLoading: boolean;\n  error: Error | null | undefined;\n  templateId: string; // For context in error messages or links\n}\nfunction EditPersonaTemplateLoadingErrorDisplay({ isLoading, error, templateId}: EditPersonaTemplateLoadingErrorDisplayProps) {\n  if (isLoading) {\n    return (\n      <div className=\"p-8 text-center flex flex-col items-center justify-center min-h-[300px]\">\n        <Loader2 className=\"h-10 w-10 animate-spin text-sky-500 mb-4\" />\n        <p className=\"text-lg text-slate-600 dark:text-slate-400\">Carregando dados do template...</p>\n      </div>\n    );\n  }\n  if (error) {\n     return (\n      <div className=\"p-8 text-center flex flex-col items-center justify-center min-h-[300px] bg-red-50 dark:bg-red-900/10 rounded-lg\">\n        <ServerCrash className=\"h-12 w-12 text-red-500 dark:text-red-400 mb-4\" />\n        <h2 className=\"text-xl font-semibold text-red-700 dark:text-red-300 mb-2\">Falha ao carregar template</h2>\n        <p className=\"text-sm text-red-600 dark:text-red-400 mb-4\">{error.message}</p>\n        <Button variant=\"outline\" className=\"mt-4\" asChild>\n            {/* Link back to the list, as the specific template might not exist or be accessible */}\n            <Link to=\"/personas\"><ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Lista de Personas</Link>\n        </Button>\n      </div>\n    );\n  }\n  return null;\n}\n\n// Helper for rendering the form\ninterface EditPersonaTemplateFormRendererProps {\n  templateId: string;\n  personaTemplate: GetPersonaTemplateDetailsResponseData; // Non-null asserted by caller\n  handleSubmit: (formData: PersonaTemplateFormData) => Promise<void>;\n  isSubmitting: boolean;\n}\nfunction EditPersonaTemplateFormRenderer({templateId, personaTemplate, handleSubmit, isSubmitting}: EditPersonaTemplateFormRendererProps) {\n   if (!personaTemplate) { // Should ideally be caught by the page component before calling this renderer\n    return (\n      <div className=\"p-8 text-center\">\n        <p>Template de Persona com ID \"{templateId}\" não encontrado.</p>\n         <Button variant=\"outline\" className=\"mt-4\" asChild>\n            <Link to=\"/personas\"><ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Lista de Personas</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  const initialValues: Partial<PersonaTemplateFormData> = {\n    name: personaTemplate.name,\n    role: personaTemplate.role,\n    goal: personaTemplate.goal,\n    backstory: personaTemplate.backstory,\n    toolNames: personaTemplate.toolNames || [],\n  };\n\n  return (\n    <div className=\"p-4 md:p-6 lg:p-8 max-w-3xl mx-auto\">\n       <Button variant=\"outline\" size=\"sm\" className=\"mb-4\" asChild>\n          <Link to=\"/personas/$templateId\" params={{templateId}}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Detalhes\n          </Link>\n        </Button>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Editar Template de Persona: {personaTemplate.name}</CardTitle>\n          <CardDescription>\n            Modifique as características base deste template de Agente IA.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <PersonaTemplateForm\n            onSubmit={handleSubmit}\n            initialValues={initialValues}\n            isSubmitting={isSubmitting}\n            submitButtonText=\"Salvar Alterações\"\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n\nfunction EditPersonaTemplatePage() {\n  const router = useRouter();\n  const params = useParams({ from: '/(app)/personas/$templateId/edit/' });\n  const templateId = params.templateId;\n\n  const { data: personaTemplate, isLoading: isLoadingTemplate, error: templateError, refetch } = useIpcQuery<\n    GetPersonaTemplateDetailsRequest,\n    GetPersonaTemplateDetailsResponseData\n  >(\n    IPC_CHANNELS.GET_PERSONA_TEMPLATE_DETAILS,\n    { templateId },\n    {\n      staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n      onError: (err) => {\n        toast.error(`Erro ao buscar detalhes do template: ${err.message}`);\n      }\n    }\n  );\n\n  const updatePersonaMutation = useIpcMutation<\n    UpdatePersonaTemplateRequest,\n    IPCResponse<UpdatePersonaTemplateResponseData>\n  >(\n    IPC_CHANNELS.UPDATE_PERSONA_TEMPLATE,\n    {\n      onSuccess: (response) => {\n        if (response.success && response.data) {\n          toast.success(`Template \"${response.data.name}\" atualizado com sucesso!`);\n          refetch(); // Refetch to update initialValues and header name\n          // Navigate back to the details page\n          router.navigate({ to: '/personas/$templateId', params: { templateId: response.data.id }, replace: true });\n        } else {\n          toast.error(`Falha ao atualizar o template: ${response.error?.message || 'Erro desconhecido.'}`);\n        }\n      },\n      onError: (error) => {\n        toast.error(`Falha ao atualizar o template: ${error.message}`);\n      },\n    }\n  );\n\n  const handleSubmit = async (formData: PersonaTemplateFormData) => {\n    console.log('Dados atualizados do template de persona:', templateId, formData);\n    updatePersonaMutation.mutate({ templateId, data: formData });\n  };\n\n  const loadingOrError = EditPersonaTemplateLoadingErrorDisplay({isLoading: isLoadingTemplate, error: templateError, templateId});\n  if (loadingOrError) {\n    return loadingOrError;\n  }\n\n  // If personaTemplate is null after loading without error, it means not found.\n  if (!personaTemplate) {\n    return (\n      <div className=\"p-8 text-center\">\n         <ServerCrash className=\"h-12 w-12 text-slate-500 dark:text-slate-400 mb-4\" />\n        <p className=\"text-lg\">Template de Persona com ID \"{templateId}\" não encontrado.</p>\n         <Button variant=\"outline\" className=\"mt-4\" asChild>\n            <Link to=\"/personas\"><ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para Lista de Personas</Link>\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <EditPersonaTemplateFormRenderer\n      templateId={templateId}\n      personaTemplate={personaTemplate}\n      handleSubmit={handleSubmit}\n      isSubmitting={updatePersonaMutation.isLoading}\n    />\n  );\n}\n\nexport const Route = createFileRoute('/(app)/personas/$templateId/edit/')({\n  component: EditPersonaTemplatePage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/$templateId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/personas/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/chat/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/docs/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/members/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMembers' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":158,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/$projectId/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setProjects' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":29,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/projects/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/appearance/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/index.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Parameter name `IconComponent` must match one of the following formats: camelCase","line":16,"column":42,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":16,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createFileRoute, Link } from '@tanstack/react-router';\nimport { User, Cpu, Palette, Bell, ShieldCheck } from 'lucide-react'; // Icons for sections\nimport React from 'react';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\n\ninterface SettingsSectionProps {\n  to: string;\n  icon: React.ElementType;\n  title: string;\n  description: string;\n  disabled?: boolean;\n}\n\nfunction SettingsSectionLink({ to, icon: IconComponent, title, description, disabled }: SettingsSectionProps) {\n  const content = (\n    <div className={`flex items-start space-x-4 p-4 rounded-lg transition-colors ${\n      disabled\n        ? 'opacity-50 cursor-not-allowed'\n        : 'hover:bg-slate-100 dark:hover:bg-slate-800/50'\n    }`}>\n      <div className={`mt-1 p-2 rounded-md ${disabled ? 'bg-slate-200 dark:bg-slate-700' : 'bg-slate-100 dark:bg-slate-800'}`}>\n        <IconComponent className={`h-6 w-6 ${disabled ? 'text-slate-400 dark:text-slate-500' : 'text-slate-600 dark:text-slate-300'}`} />\n      </div>\n      <div>\n        <h3 className=\"text-base font-semibold text-slate-800 dark:text-slate-100\">{title}</h3>\n        <p className=\"text-sm text-slate-500 dark:text-slate-400\">{description}</p>\n      </div>\n    </div>\n  );\n\n  if (disabled) {\n    return <div title={`${title} (Em breve)`}>{content}</div>;\n  }\n\n  return (\n    <Link to={to} className=\"block\">\n      {content}\n    </Link>\n  );\n}\n\n\nfunction SettingsPage() {\n  const settingsSections: SettingsSectionProps[] = [\n    {\n      to: '/settings/profile',\n      icon: User,\n      title: 'Perfil',\n      description: 'Gerencie suas informações de perfil e preferências pessoais.',\n      disabled: true, // Placeholder until page is created\n    },\n    {\n      to: '/settings/llm',\n      icon: Cpu,\n      title: 'Provedores LLM',\n      description: 'Configure e gerencie suas conexões com Modelos de Linguagem (LLMs).',\n    },\n    {\n      to: '/settings/appearance',\n      icon: Palette,\n      title: 'Aparência',\n      description: 'Personalize o tema e a aparência da aplicação.',\n      disabled: true, // Placeholder\n    },\n    {\n      to: '/settings/notifications',\n      icon: Bell,\n      title: 'Notificações',\n      description: 'Defina suas preferências de notificação.',\n      disabled: true, // Placeholder\n    },\n     {\n      to: '/settings/security',\n      icon: ShieldCheck,\n      title: 'Segurança & Conta',\n      description: 'Gerencie configurações de segurança, autenticação e dados da conta.',\n      disabled: true, // Placeholder\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6 lg:p-8\">\n      <header className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold tracking-tight text-slate-900 dark:text-slate-50\">\n          Configurações\n        </h1>\n        <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n          Gerencie as configurações da sua conta e da aplicação Project Wiz.\n        </p>\n      </header>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Categorias de Configuração</CardTitle>\n          <CardDescription>\n            Navegue pelas diferentes seções para ajustar suas preferências.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-0\"> {/* Remove default padding to let links handle it */}\n          <div className=\"grid grid-cols-1\">\n            {settingsSections.map((section, index) => (\n              <React.Fragment key={section.to}>\n                <SettingsSectionLink {...section} />\n                {index < settingsSections.length - 1 && <Separator className=\"my-0\" />}\n              </React.Fragment>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(app)/settings/')({\n  component: SettingsPage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/$configId/edit/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { createFileRoute, Link, useRouter } from '@tanstack/react-router';\nimport { PlusCircle } from 'lucide-react';\nimport React, { useState, useEffect } from 'react'; // Added useState, useEffect\n// import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'; // For real data fetching\nimport { toast } from 'sonner'; // For notifications\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/presentation/ui/components/ui/alert-dialog\";\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport { LLMConfigList, LLMConfig } from '@/presentation/ui/features/llm/components/LLMConfigList'; // Assuming LLMConfig type is exported\n// import { useIPC } from '@/presentation/ui/hooks/useIPC'; // For IPC calls\n\n\nfunction LLMConfigurationPage() {\n  const router = useRouter();\n  // const ipc = useIPC(); // Uncomment when IPC is ready\n  // const queryClient = useQueryClient(); // For TanStack Query\n\n  const [llmConfigs, setLlmConfigs] = useState<LLMConfig[]>([\n    // Mock data for UI development\n    { id: '1', name: 'OpenAI Pessoal', providerId: 'openai', baseUrl: 'https://api.openai.com/v1' },\n    { id: '2', name: 'Ollama Local (Llama3)', providerId: 'ollama', baseUrl: 'http://localhost:11434' },\n    { id: '3', name: 'DeepSeek Trabalho', providerId: 'deepseek' },\n  ]);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState<LLMConfig | null>(null);\n\n\n  // TODO: Replace with actual data fetching using TanStack Query and IPC\n  // const { data: fetchedConfigs, isLoading, error } = useQuery({\n  //   queryKey: ['llmConfigs'],\n  //   queryFn: async () => {\n  //     const result = await ipc.invoke<{ configs: LLMConfig[] }>('llm:list-configs');\n  //     if (result.success) return result.data?.configs || [];\n  //     throw new Error(result.error?.message || 'Failed to fetch LLM configurations');\n  //   },\n  // });\n\n  // useEffect(() => {\n  //   if (fetchedConfigs) {\n  //     setLlmConfigs(fetchedConfigs);\n  //   }\n  //   if (error) {\n  //     toast.error(`Erro ao buscar configurações LLM: ${error.message}`);\n  //   }\n  // }, [fetchedConfigs, error]);\n\n\n  const handleEdit = (configId: string) => {\n    router.navigate({ to: '/settings/llm/$configId/edit', params: { configId } });\n  };\n\n  const handleDelete = (config: LLMConfig) => {\n    setShowDeleteConfirm(config);\n  };\n\n  const confirmDelete = async () => {\n    if (!showDeleteConfirm) return;\n    // TODO: Implement actual deletion via IPC and TanStack Mutation\n    // mutation.mutate(showDeleteConfirm.id, { ... });\n    toast.success(`Configuração \"${showDeleteConfirm.name}\" excluída (simulado).`);\n    setLlmConfigs(prev => prev.filter(config => config.id !== showDeleteConfirm.id)); // Optimistic update for UI\n    setShowDeleteConfirm(null);\n  };\n\n  // if (isLoading) return <p>Carregando configurações...</p>;\n\n  return (\n    <div className=\"p-4 md:p-6 lg:p-8\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-start sm:items-center justify-between gap-2\">\n          <div>\n            <CardTitle className=\"text-2xl\">Configurações de Provedor LLM</CardTitle>\n            <CardDescription>\n              Gerencie suas conexões com Modelos de Linguagem (LLMs).\n            </CardDescription>\n          </div>\n          <Button asChild size=\"sm\">\n            <Link to=\"/settings/llm/new\">\n              <PlusCircle className=\"mr-2 h-4 w-4\" />\n              Nova Configuração\n            </Link>\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {llmConfigs.length === 0 ? (\n            <div className=\"text-center py-10 border-2 border-dashed border-slate-200 dark:border-slate-700 rounded-lg\">\n              <svg className=\"mx-auto h-12 w-12 text-slate-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\n                <path vectorEffect=\"non-scaling-stroke\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n              </svg>\n              <h3 className=\"mt-2 text-sm font-medium text-slate-900 dark:text-slate-50\">Nenhuma configuração LLM</h3>\n              <p className=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">Comece adicionando uma nova configuração de LLM.</p>\n              <div className=\"mt-6\">\n                <Button asChild variant=\"outline\">\n                  <Link to=\"/settings/llm/new\">\n                    <PlusCircle className=\"mr-2 h-4 w-4\" />\n                    Criar Configuração\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <LLMConfigList\n              configs={llmConfigs}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n            />\n          )}\n        </CardContent>\n      </Card>\n\n      {showDeleteConfirm && (\n        <AlertDialog open onOpenChange={(open) => !open && setShowDeleteConfirm(null)}>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n              <AlertDialogDescription>\n                Tem certeza que deseja excluir a configuração LLM \"{showDeleteConfirm.name}\"?\n                Esta ação não pode ser desfeita.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel onClick={() => setShowDeleteConfirm(null)}>Cancelar</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={confirmDelete}\n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              >\n                Excluir\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )}\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(app)/settings/llm/')({\n  component: LLMConfigurationPage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/llm/new/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/settings/profile/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCurrentAvatar' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":33,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/dm/$conversationId/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DirectMessagePageLoadingErrorDisplay' is defined but never used. Allowed unused vars must match /^_/u.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DirectMessageChatView' is defined but never used. Allowed unused vars must match /^_/u.","line":76,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":31},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'DirectMessagePage' has too many lines (115). Maximum allowed is 100.","line":114,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":248,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { createFileRoute, useParams, useRouter } from '@tanstack/react-router';\nimport { ArrowLeft, Loader2, ServerCrash } from 'lucide-react';\nimport React, { useMemo } from 'react'; // Removed useEffect, useState as they are no longer directly used\nimport { toast } from 'sonner';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { ChatWindow } from '@/presentation/ui/features/chat/components/ChatWindow';\nimport { useIpcMutation } from '@/presentation/ui/hooks/ipc/useIpcMutation'; // Import useIpcMutation\nimport { useIpcQuery } from '@/presentation/ui/hooks/ipc/useIpcQuery';\nimport { useIpcSubscription } from '@/presentation/ui/hooks/ipc/useIpcSubscription';\n\nimport { IPC_CHANNELS } from '@/shared/ipc-channels';\n// ChatMessage is type-imported for clarity in generic arguments, even if not directly annotating a var.\n// DirectMessageItem is used for conversationDetails type\nimport type {\n  DirectMessageItem,\n   \n  ChatMessage,\n  GetDMMessagesRequest,\n  GetDMMessagesResponseData,\n  DMMessageReceivedEventPayload,\n  GetDMConversationsListResponseData,\n  SendDMMessageRequest, // Import request type for sending message\n  SendDMMessageResponseData, // Import response type for sending message\n  IPCResponse // For the mutation's expected response structure\n} from '@/shared/ipc-types';\n\n// This type is for the data structure ChatWindow expects for a conversation header.\ninterface ChatWindowConversationHeader {\n  id: string;\n  name: string;\n  type: 'dm' | 'channel' | 'agent';\n  avatarUrl?: string;\n}\n\n// Mock current user ID - this would ideally come from a global user context/store\nconst currentUserId = \"userJdoe\";\n\n// --- Sub-components for DirectMessagePage ---\n\ninterface DirectMessagePageLoadingErrorDisplayProps {\n  isLoading: boolean;\n  combinedError: Error | null | undefined;\n  router: ReturnType<typeof useRouter>;\n  messagesError?: Error | null;\n  convListError?: Error | null;\n}\nfunction DirectMessagePageLoadingErrorDisplay({ isLoading, combinedError, router, messagesError, convListError }: DirectMessagePageLoadingErrorDisplayProps) {\n  if (isLoading) {\n    return <div className=\"flex-1 flex items-center justify-center p-8 bg-white dark:bg-slate-900\"><Loader2 className=\"h-8 w-8 animate-spin text-sky-500\"/> Carregando conversa...</div>;\n  }\n  if (combinedError) {\n    const errorToShow = messagesError || convListError;\n    return (\n      <div className=\"flex-1 flex flex-col items-center justify-center p-8 bg-red-50 dark:bg-red-900/10 rounded-lg\">\n        <ServerCrash className=\"h-12 w-12 text-red-500 dark:text-red-400 mb-4\" />\n        <h2 className=\"text-xl font-semibold text-red-700 dark:text-red-300 mb-2\">Erro ao Carregar Conversa</h2>\n        <p className=\"text-sm text-red-600 dark:text-red-400 mb-1\">{errorToShow?.message}</p>\n        <Button onClick={() => router.navigate({ to: \"/user/\"})} variant=\"destructive\" className=\"mt-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para DMs\n        </Button>\n      </div>\n    );\n  }\n  return null;\n}\n\ninterface DirectMessageChatViewProps {\n  conversationDetails: DirectMessageItem | null; // Can be null if not found from dmConversations\n  conversationId: string; // For context if details are null\n  messages: ChatMessage[] | null | undefined;\n  isLoadingMessages: boolean; // Specific loading for messages for ChatWindow\n  handleSendMessage: (content: string) => void;\n  router: ReturnType<typeof useRouter>;\n}\nfunction DirectMessageChatView({ conversationDetails, conversationId, messages, isLoadingMessages, handleSendMessage, router }: DirectMessageChatViewProps) {\n  if (!conversationDetails) {\n    return (\n      <div className=\"flex-1 flex flex-col items-center justify-center p-8 bg-white dark:bg-slate-900\">\n        <ServerCrash className=\"h-12 w-12 text-slate-500 dark:text-slate-400 mb-4\" />\n        <h2 className=\"text-xl font-semibold mb-2\">Conversa não encontrada</h2>\n        <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-4\">\n          Não foi possível encontrar detalhes para a conversa com ID: {conversationId}.\n        </p>\n        <Button onClick={() => router.navigate({ to: \"/user/\"})} variant=\"outline\" className=\"mt-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para DMs\n        </Button>\n      </div>\n    );\n  }\n\n  const chatWindowConversationHeader: ChatWindowConversationHeader = {\n      id: conversationDetails.id,\n      name: conversationDetails.name,\n      type: conversationDetails.type === 'agent' ? 'dm' : conversationDetails.type,\n      avatarUrl: conversationDetails.avatarUrl,\n  };\n\n  return (\n    <div className=\"flex flex-col flex-1 h-full overflow-hidden\">\n        <ChatWindow\n          conversation={chatWindowConversationHeader}\n          messages={messages || []} \n          onSendMessage={handleSendMessage}\n          isLoading={isLoadingMessages} \n          currentUserId={currentUserId}\n        />\n    </div>\n  );\n}\n// --- End Sub-components ---\n\n\nfunction DirectMessagePage() {\n  const params = useParams({ from: '/(app)/user/dm/$conversationId/' });\n  const conversationId = params.conversationId;\n  const router = useRouter();\n\n  const { data: dmConversations, isLoading: isLoadingConvList, error: convListError } = useIpcQuery<null, GetDMConversationsListResponseData>(\n    IPC_CHANNELS.GET_DM_CONVERSATIONS_LIST,\n    null,\n    { staleTime: 5 * 60 * 1000 } \n  );\n\n  const conversationDetails: DirectMessageItem | null = useMemo(() => {\n    if (!dmConversations) return null;\n    return dmConversations.find(conv => conv.id === conversationId) || null;\n  }, [dmConversations, conversationId]);\n  \n  const { data: messages, isLoading: isLoadingMessages, error: messagesError } = useIpcSubscription<\n    GetDMMessagesRequest,\n    GetDMMessagesResponseData, \n    DMMessageReceivedEventPayload\n  >(\n    IPC_CHANNELS.GET_DM_MESSAGES,\n    { conversationId },\n    IPC_CHANNELS.DM_MESSAGE_RECEIVED_EVENT,\n    {\n      getSnapshot: (prevMessages, eventPayload) => {\n        if (eventPayload.conversationId === conversationId) {\n          if (prevMessages?.find(msg => msg.id === eventPayload.message.id)) {\n            return prevMessages;\n          }\n          return [...(prevMessages || []), eventPayload.message];\n        }\n        return prevMessages || [];\n      },\n      onError: (err) => { // This onError is for the subscription part\n        toast.error(`Erro na subscrição de mensagens: ${err.message}`);\n      }\n    }\n  );\n\n  const sendMessageMutation = useIpcMutation<\n    SendDMMessageRequest,\n    IPCResponse<SendDMMessageResponseData>\n  >(\n    IPC_CHANNELS.SEND_DM_MESSAGE,\n    {\n      onSuccess: (response) => {\n        if (response.success && response.data) {\n          // Message sent successfully.\n          // The DM_MESSAGE_RECEIVED_EVENT should update the message list via useIpcSubscription.\n          // No need to manually add the message here if the event system is working.\n          console.log('Message sent, response data:', response.data);\n        } else {\n          // This case should ideally be handled by onError if IPCResponse wrapper is consistent\n          toast.error(`Falha ao enviar mensagem: ${response.error?.message || 'Erro desconhecido retornando sucesso.'}`);\n        }\n      },\n      onError: (error) => {\n        toast.error(`Falha ao enviar mensagem: ${error.message}`);\n      },\n    }\n  );\n\n  const handleSendMessage = (content: string) => {\n    if (!conversationDetails) {\n      toast.error(\"Detalhes da conversa não encontrados para enviar mensagem.\");\n      return;\n    }\n    if (sendMessageMutation.isLoading) {\n      toast.info(\"Aguarde o envio da mensagem anterior.\");\n      return;\n    }\n    // No local optimistic update here; relying on DM_MESSAGE_RECEIVED_EVENT\n    // after successful IPC call from main process.\n    sendMessageMutation.mutate({ conversationId, content });\n  };\n  \n  const isLoading = isLoadingMessages || isLoadingConvList;\n  const combinedError = messagesError || convListError; // Prioritize messagesError if both exist\n\n  if (isLoading) {\n    return <div className=\"flex-1 flex items-center justify-center p-8 bg-white dark:bg-slate-900\"><Loader2 className=\"h-8 w-8 animate-spin text-sky-500\"/> Carregando conversa...</div>;\n  }\n\n  if (combinedError) {\n    // Determine which error to show, or show a generic one.\n    // The individual hooks might already show toasts.\n    const errorToShow = messagesError || convListError;\n    return (\n      <div className=\"flex-1 flex flex-col items-center justify-center p-8 bg-red-50 dark:bg-red-900/10 rounded-lg\">\n        <ServerCrash className=\"h-12 w-12 text-red-500 dark:text-red-400 mb-4\" />\n        <h2 className=\"text-xl font-semibold text-red-700 dark:text-red-300 mb-2\">Erro ao Carregar Conversa</h2>\n        <p className=\"text-sm text-red-600 dark:text-red-400 mb-1\">{errorToShow?.message}</p>\n        <Button onClick={() => router.navigate({ to: \"/user/\"})} variant=\"destructive\" className=\"mt-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para DMs\n        </Button>\n      </div>\n    );\n  }\n\n  if (!conversationDetails) {\n    // This case might occur if dmConversations loaded but the specific conversationId was not found\n    return (\n      <div className=\"flex-1 flex flex-col items-center justify-center p-8 bg-white dark:bg-slate-900\">\n        <ServerCrash className=\"h-12 w-12 text-slate-500 dark:text-slate-400 mb-4\" />\n        <h2 className=\"text-xl font-semibold mb-2\">Conversa não encontrada</h2>\n        <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-4\">\n          Não foi possível encontrar detalhes para a conversa com ID: {conversationId}.\n        </p>\n        <Button onClick={() => router.navigate({ to: \"/user/\"})} variant=\"outline\" className=\"mt-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Voltar para DMs\n        </Button>\n      </div>\n    );\n  }\n\n  const chatWindowConversationHeader: ChatWindowConversationHeader = {\n      id: conversationDetails.id,\n      name: conversationDetails.name,\n      type: conversationDetails.type === 'agent' ? 'dm' : conversationDetails.type,\n      avatarUrl: conversationDetails.avatarUrl,\n  };\n\n  return (\n    <div className=\"flex flex-col flex-1 h-full overflow-hidden\">\n        <ChatWindow\n        conversation={chatWindowConversationHeader}\n        messages={messages || []} \n        onSendMessage={handleSendMessage}\n        isLoading={isLoadingMessages} // Pass message-specific loading to ChatWindow\n        currentUserId={currentUserId}\n        />\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(app)/user/dm/$conversationId/')({\n  component: DirectMessagePage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(app)/user/index.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'UserIndexPage' has too many lines (120). Maximum allowed is 100.","line":41,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":168,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7696,7699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7696,7699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createFileRoute, Link } from '@tanstack/react-router';\nimport { MessageSquareText, Settings, UserCircle, Activity, Users, Bot as BotIcon } from 'lucide-react';\nimport React from 'react';\n\nimport { Avatar, AvatarFallback } from '@/presentation/ui/components/ui/avatar'; // AvatarImage not used in this version\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\n\n// Mock data for quick stats or recent activity (can be expanded)\nconst userStatsMock = {\n  unreadDms: 3, // From mockDirectMessages in UserSidebar\n  activeAgents: 2, // From mockDirectMessages filtering agents\n  projectsInvolved: 3, // Example\n};\n\n// Define a more specific type for Link 'to' props for type safety with TanStack Router\ntype RecentActivityLink =\n  | '/user/dm/$conversationId'\n  | '/projects/$projectId'\n  | '/settings/llm'\n  | '/settings/appearance'\n  | '/settings/profile'\n  | '/settings';\n\n// Define a more specific type for the `params` prop of the Link component\n// This helps satisfy the `no-explicit-any` ESLint rule.\n// It's a union of possible parameter objects for the links in recentUserActivityMock.\ntype ActivityLinkParams =\n  | { conversationId: string }\n  | { projectId: string }\n  | undefined; // For links that don't have params like /settings/appearance\n\nconst recentUserActivityMock: {id: string, text: string, time: string, type: string, linkTo: RecentActivityLink, icon: React.ElementType, params?: ActivityLinkParams}[] = [\n    {id: '1', text: \"Nova mensagem de CoderBot-Alpha.\", time: \"5m atrás\", type: \"dm\", linkTo: \"/user/dm/$conversationId\", params: {conversationId: 'agent001'}, icon: BotIcon},\n    {id: '2', text: \"Alice (Designer) enviou uma nova mensagem.\", time: \"10m atrás\", type: \"dm\", linkTo: \"/user/dm/$conversationId\", params: {conversationId: 'userAlice'}, icon: UserCircle},\n    {id: '3', text: \"Você atualizou suas configurações de Aparência.\", time: \"3h atrás\", type: \"settings\", linkTo: \"/settings/appearance\", icon: Settings}, // No params needed\n    {id: '4', text: \"Nova atividade no Projeto Phoenix.\", time: \"1d atrás\", type: \"project\", linkTo: \"/projects/$projectId\", params: {projectId: 'mockId1'}, icon: Activity},\n];\n\n\nfunction UserIndexPage() {\n  // This page is the default content shown when navigating to /user/\n  // It serves as a user-specific dashboard or landing spot within their personal area.\n\n  return (\n    <div className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto bg-slate-50 dark:bg-slate-800/20\">\n      <header className=\"mb-8\">\n        <h1 className=\"text-2xl md:text-3xl font-bold text-slate-800 dark:text-slate-100\">\n          Sua Área Pessoal\n        </h1>\n        <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n          Bem-vindo! Gerencie suas conversas diretas, acompanhe atividades e acesse suas configurações.\n        </p>\n      </header>\n\n      {/* Quick Stats Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n        <Card className=\"hover:shadow-md transition-shadow\">\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Mensagens Não Lidas</CardTitle>\n            <MessageSquareText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{userStatsMock.unreadDms}</div>\n            <p className=\"text-xs text-muted-foreground\">Em suas DMs</p>\n          </CardContent>\n        </Card>\n         <Card className=\"hover:shadow-md transition-shadow\">\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Agentes Contatados</CardTitle>\n            <BotIcon className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{userStatsMock.activeAgents}</div>\n            <p className=\"text-xs text-muted-foreground\">Com quem você interagiu</p>\n          </CardContent>\n        </Card>\n        <Card className=\"hover:shadow-md transition-shadow md:col-span-2 lg:col-span-1\">\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Projetos Envolvidos</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" /> {/* Changed icon to Users */}\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{userStatsMock.projectsInvolved}</div>\n            <p className=\"text-xs text-muted-foreground\">Que você participa</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Quick Actions / Links */}\n        <div className=\"lg:col-span-1 space-y-4\">\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"text-lg\">Acesso Rápido</CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex flex-col space-y-2\">\n                    <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n                        <Link to=\"/user/dm/$conversationId\" params={{conversationId: 'agent001'}}>\n                            <MessageSquareText className=\"mr-2 h-4 w-4 text-sky-500\"/>\n                            Conversar com CoderBot\n                        </Link>\n                    </Button>\n                    <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n                        <Link to=\"/settings/profile\">\n                            <UserCircle className=\"mr-2 h-4 w-4 text-green-500\"/>\n                            Editar Meu Perfil\n                        </Link>\n                    </Button>\n                     <Button variant=\"outline\" asChild className=\"justify-start text-left\">\n                        <Link to=\"/settings\">\n                            <Settings className=\"mr-2 h-4 w-4 text-slate-500\"/>\n                            Ver Todas Configurações\n                        </Link>\n                    </Button>\n                </CardContent>\n            </Card>\n        </div>\n\n        {/* Recent Activity Feed */}\n        <div className=\"lg:col-span-2\">\n            <Card>\n            <CardHeader>\n                <CardTitle  className=\"text-lg\">Atividade Recente</CardTitle>\n                <CardDescription>Suas últimas interações e notificações importantes.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                {recentUserActivityMock.length > 0 ? (\n                    <ul className=\"space-y-3\">\n                        {recentUserActivityMock.map(activity => {\n                            const Icon = activity.icon;\n                            return (\n                            <li key={activity.id} className=\"flex items-start space-x-3 p-2 rounded-md hover:bg-slate-50 dark:hover:bg-slate-800/30\">\n                                <Avatar className=\"h-8 w-8 mt-0.5\">\n                                    <AvatarFallback className=\"bg-slate-200 dark:bg-slate-700\">\n                                        <Icon className=\"h-4 w-4 text-slate-500 dark:text-slate-400\"/>\n                                    </AvatarFallback>\n                                </Avatar>\n                                <div>\n                                <Link\n                                    to={activity.linkTo}\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    params={activity.params as any} // Using 'as any' here for mock data demo, real params are typed\n                                    className=\"hover:underline text-sm text-slate-700 dark:text-slate-200\"\n                                >\n                                    {activity.text}\n                                </Link>\n                                <span className=\"block text-xs text-slate-500 dark:text-slate-400\">{activity.time}</span>\n                                </div>\n                            </li>\n                        )})}\n                    </ul>\n                ) : (\n                    <p className=\"text-sm text-slate-500 dark:text-slate-400 text-center py-4\">Nenhuma atividade recente para mostrar.</p>\n                )}\n            </CardContent>\n            </Card>\n        </div>\n      </div>\n\n      <div className=\"mt-12 text-center\">\n        <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n          Para iniciar uma nova conversa, use a barra lateral à esquerda.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/(app)/user/')({\n  component: UserIndexPage,\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/(public)/onboarding/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/__root.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/app/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/MarkdownRenderer.tsx","messages":[],"suppressedMessages":[{"ruleId":"id-length","severity":1,"message":"Identifier name 'a' is too short (< 2).","line":43,"column":5,"nodeType":"Identifier","messageId":"tooShort","endLine":43,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react';\nimport ReactMarkdown, { Options } from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n// import rehypeRaw from 'rehype-raw'; // Optional: if you need to render raw HTML from markdown\n// For syntax highlighting:\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'; // Choose a theme\n\nimport { cn } from '@/presentation/ui/lib/utils';\n\ninterface MarkdownRendererProps {\n  content: string | null | undefined;\n  className?: string; // Custom classes for the wrapper div\n  proseClassName?: string; // Custom classes specifically for Tailwind Prose\n  components?: Options['components']; // Allow overriding default HTML element rendering\n}\n\nexport function MarkdownRenderer({\n  content,\n  className,\n  proseClassName,\n  components: customComponents,\n}: MarkdownRendererProps) {\n  if (content === null || content === undefined) {\n    return null;\n  }\n\n  // Base prose classes for Tailwind Typography. Can be extended or overridden by `proseClassName`.\n  const defaultProseSetup = cn(\n    \"prose prose-sm dark:prose-invert max-w-none\", // General styling\n    \"prose-p:my-1.5 prose-headings:my-3 prose-ul:my-1.5 prose-ol:my-1.5 prose-li:my-0.5\", // Spacing for common elements\n    \"prose-blockquote:my-2 prose-blockquote:not-italic prose-blockquote:border-l-4 prose-blockquote:pl-3 prose-blockquote:text-slate-600 dark:prose-blockquote:text-slate-400\", // Blockquotes\n    \"prose-pre:my-2 prose-pre:p-0 prose-pre:bg-transparent prose-pre:rounded-md\", // Reset <pre> for custom code block styling or syntax highlighter\n    \"prose-code:px-1 prose-code:py-0.5 prose-code:text-xs prose-code:font-mono prose-code:rounded prose-code:bg-slate-100 dark:prose-code:bg-slate-800\", // Inline code\n    \"prose-a:text-sky-600 hover:prose-a:text-sky-700 dark:prose-a:text-sky-400 dark:hover:prose-a:text-sky-300 hover:prose-a:underline\", // Links\n    \"prose-table:my-2 prose-table:text-sm prose-thead:border-b prose-th:px-2 prose-th:py-1 prose-th:font-semibold prose-td:px-2 prose-td:py-1 prose-tr:border-b\", // Tables\n    proseClassName, // Allow parent to provide additional/override prose classes\n  );\n\n  // Default component overrides, can be merged with or overridden by `customComponents` prop\n  const defaultComponents: Options['components'] = {\n    // eslint-disable-next-line id-length\n    a: ({node: _node, ...props}) => <a {...props} target=\"_blank\" rel=\"noopener noreferrer\" />, // Open links in new tab\n\n    // Custom styling for code blocks (pre > code)\n    // This is a basic version. For syntax highlighting, you'd integrate react-syntax-highlighter here.\n    code({ node, className: langClassName, children, ...props }) { // `node` is used here, so no underscore\n      const match = /language-(\\w+)/.exec(langClassName || '');\n      const language = match ? match[1] : null;\n\n      // This checks if the `<code>` is directly inside a `<pre>` (fenced code block)\n      // or if it's an inline `code` snippet.\n      // react-markdown v8+ typically handles inline code differently, so this check might need adjustment\n      // or rely on prose-code styling for inline.\n      // For explicit inline check, one might need to inspect `node.position`.\n      // However, Tailwind prose usually styles inline `<code>` and `<pre><code>` differently.\n      // The `prose-code:` styles above target inline code.\n      // The `prose-pre:` styles reset the container for the block below.\n\n      if (node?.parentElement?.tagName === 'pre') { // Fenced code block\n        return (\n          <div className=\"my-2 bg-slate-100 dark:bg-slate-800 rounded-md overflow-hidden text-xs\">\n            {language && (\n              <div className=\"px-3 py-1 text-xs text-slate-500 dark:text-slate-400 border-b border-slate-200 dark:border-slate-700\">\n                {language}\n              </div>\n            )}\n            {/* The `whitespace-pre-wrap` and `break-words` on the parent `prose` div should handle formatting */}\n            <pre className=\"p-3 overflow-x-auto\"><code className={cn(\"font-mono\", langClassName)} {...props}>{children}</code></pre>\n          </div>\n        );\n      }\n\n      // Inline code (already styled by prose-code:)\n      return (\n        <code className={langClassName} {...props}>\n          {children}\n        </code>\n      );\n\n      // Example with react-syntax-highlighter (install it first)\n      // if (node?.parentElement?.tagName === 'pre' && match) {\n      //   return (\n      //     <SyntaxHighlighter\n      //       style={vscDarkPlus} // Choose your theme\n      //       language={match[1]}\n      //       PreTag=\"div\" // Outer tag for the highlighter\n      //       className=\"text-xs my-2\"\n      //       showLineNumbers // Optional\n      //       wrapLines\n      //       {...props}\n      //     >\n      //       {String(children).replace(/\\n$/, '')}\n      //     </SyntaxHighlighter>\n      //   );\n      // }\n      // // Fallback for inline code or code blocks without a language\n      // return (\n      //   <code className={cn(langClassName, node?.parentElement?.tagName === 'pre' && \"block p-2 bg-slate-100 dark:bg-slate-800 rounded overflow-x-auto text-xs\")} {...props}>\n      //     {children}\n      //   </code>\n      // );\n    },\n  };\n\n  const mergedComponents = { ...defaultComponents, ...customComponents };\n\n  return (\n    <div className={cn(defaultProseSetup, className)}>\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        // rehypePlugins={[rehypeRaw]} // Uncomment if rendering raw HTML from markdown is needed and trusted\n        components={mergedComponents}\n      >\n        {content}\n      </ReactMarkdown>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/common/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/layout/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/accordion.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert-dialog.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":6,"column":32,"nodeType":"Literal","endLine":6,"endColumn":58},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":8,"column":20,"nodeType":"Literal","endLine":8,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\nimport * as React from \"react\"\n\nimport { buttonVariants } from \"@ui/components/ui/button\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/alert.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/avatar.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/badge.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/breadcrumb.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<\"ol\">) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        \"text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn(\"inline-flex items-center gap-1.5\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn(\"hover:text-foreground transition-colors\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"text-foreground font-normal\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"[&>svg]:size-3.5\", className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/calendar.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":11,"column":40,"nodeType":"Literal","endLine":11,"endColumn":66},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":13,"column":20,"nodeType":"Literal","endLine":13,"endColumn":35},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'Calendar' has too many lines (154). Maximum allowed is 100.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":171,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\";\nimport * as React from \"react\";\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\";\n\nimport { Button, buttonVariants } from \"@ui/components/ui/button\"; // Corrected path\n\nimport { cn } from \"@ui/lib/utils\"; // Corrected path\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"];\n}) {\n  const defaultClassNames = getDefaultClassNames();\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"flex gap-4 flex-col md:flex-row relative\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex flex-col w-full gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames.dropdown),\n        caption_label: cn(\n          \"select-none font-medium\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"flex w-full mt-2\", defaultClassNames.week),\n        week_number_header: cn(\n          \"select-none w-(--cell-size)\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-[0.8rem] select-none text-muted-foreground\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"rounded-l-md bg-accent\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          );\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            );\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            );\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          );\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          );\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames();\n\n  const ref = React.useRef<HTMLButtonElement>(null);\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus();\n  }, [modifiers.focused]);\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Calendar, CalendarDayButton };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/card.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":3,"column":20,"nodeType":"Literal","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/carousel.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":9,"column":24,"nodeType":"Literal","endLine":9,"endColumn":50},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":11,"column":20,"nodeType":"Literal","endLine":11,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { Button } from \"@ui/components/ui/button\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -left-12 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -right-12 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/chart.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ChartTooltipContent' has too many lines (134). Maximum allowed is 100.","line":105,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":247,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@ui/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: \"line\" | \"dot\" | \"dashed\"\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\"\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          }\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/checkbox.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/command.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/dialog'.","line":13,"column":8,"nodeType":"Literal","endLine":13,"endColumn":34},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":15,"column":20,"nodeType":"Literal","endLine":15,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { SearchIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@ui/components/ui/dialog\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/context-menu.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dialog.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/drawer.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/dropdown-menu.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/form.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/label'.","line":14,"column":23,"nodeType":"Literal","endLine":14,"endColumn":48},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":16,"column":20,"nodeType":"Literal","endLine":16,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport * as React from \"react\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { Label } from \"@ui/components/ui/label\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/hover-card.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input-otp.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { MinusIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        \"flex items-center gap-2 has-disabled:opacity-50\",\n        containerClassName\n      )}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn(\"flex items-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        \"data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/input.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":3,"column":20,"nodeType":"Literal","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/label.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/navigation-menu.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        \"group/navigation-menu relative flex max-w-max flex-1 items-center justify-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        \"group flex flex-1 list-none items-center justify-center gap-1\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn(\"relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1\"\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n      {...props}\n    >\n      {children}{\" \"}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto\",\n        \"group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={cn(\n        \"absolute top-full left-0 isolate z-50 flex justify-center\"\n      )}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          \"origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/pagination.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":8,"column":40,"nodeType":"Literal","endLine":8,"endColumn":66},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":10,"column":20,"nodeType":"Literal","endLine":10,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { Button, buttonVariants } from \"@ui/components/ui/button\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nfunction Pagination({ className, ...props }: React.ComponentProps<\"nav\">) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn(\"mx-auto flex w-full justify-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn(\"flex flex-row items-center gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<\"li\">) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, \"size\"> &\n  React.ComponentProps<\"a\">\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? \"page\" : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? \"outline\" : \"ghost\",\n          size,\n        }),\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pl-2.5\", className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pr-2.5\", className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/popover.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/progress.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        \"bg-primary/20 relative h-2 w-full overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/radio-group.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":7,"column":20,"nodeType":"Literal","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { CircleIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/resizable.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GripVerticalIcon } from \"lucide-react\"\nimport * as React from \"react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        \"bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n        className\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/scroll-area.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/select.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/separator.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator-root\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sheet.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sidebar.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/button'.","line":8,"column":24,"nodeType":"Literal","endLine":8,"endColumn":50},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/input'.","line":9,"column":23,"nodeType":"Literal","endLine":9,"endColumn":48},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/separator'.","line":10,"column":27,"nodeType":"Literal","endLine":10,"endColumn":56},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/sheet'.","line":17,"column":8,"nodeType":"Literal","endLine":17,"endColumn":33},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/skeleton'.","line":18,"column":26,"nodeType":"Literal","endLine":18,"endColumn":54},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/tooltip'.","line":24,"column":8,"nodeType":"Literal","endLine":24,"endColumn":35},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/hooks/use-mobile'.","line":26,"column":29,"nodeType":"Literal","endLine":26,"endColumn":51},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":28,"column":20,"nodeType":"Literal","endLine":28,"endColumn":35},{"ruleId":"max-lines","severity":1,"message":"File has too many lines (661). Maximum allowed is 500.","line":557,"column":1,"nodeType":null,"messageId":"exceed","endLine":729,"endColumn":1}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { Button } from \"@ui/components/ui/button\" // Corrected path\nimport { Input } from \"@ui/components/ui/input\" // Corrected path\nimport { Separator } from \"@ui/components/ui/separator\" // Corrected path\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@ui/components/ui/sheet\" // Corrected path\nimport { Skeleton } from \"@ui/components/ui/skeleton\" // Corrected path\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@ui/components/ui/tooltip\" // Corrected path\n\nimport { useIsMobile } from \"@ui/hooks/use-mobile\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/skeleton.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":1,"column":20,"nodeType":"Literal","endLine":1,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@ui/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/slider.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/switch.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n        )}\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/table.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":3,"column":20,"nodeType":"Literal","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tabs.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":6,"column":20,"nodeType":"Literal","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/textarea.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":3,"column":20,"nodeType":"Literal","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@ui/lib/utils\";\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 \",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle-group.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/components/ui/toggle'.","line":7,"column":32,"nodeType":"Literal","endLine":7,"endColumn":58},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":9,"column":20,"nodeType":"Literal","endLine":9,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { toggleVariants } from \"@ui/components/ui/toggle\" // Corrected path\n\nimport { cn } from \"@ui/lib/utils\" // Corrected path\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        \"group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs\",\n        className\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        \"min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/toggle.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":5,"column":20,"nodeType":"Literal","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/components/ui/tooltip.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@ui/lib/utils'.","line":4,"column":20,"nodeType":"Literal","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport * as React from \"react\"\n\nimport { cn } from \"@ui/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceForm.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'AgentInstanceForm' has too many lines (120). Maximum allowed is 100.","line":40,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":164,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { zodResolver } from '@hookform/resolvers/zod';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/presentation/ui/components/ui/form';\nimport { Input } from '@/presentation/ui/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/presentation/ui/components/ui/select';\nimport { Slider } from '@/presentation/ui/components/ui/slider';\nimport { LLMConfig } from '@/presentation/ui/features/llm/components/LLMConfigList';\nimport { PersonaTemplate } from '@/presentation/ui/features/persona/components/PersonaTemplateListItem';\n\n\nconst agentInstanceFormSchema = z.object({\n  agentName: z.string().max(100, 'Nome muito longo.').optional(),\n  personaTemplateId: z.string({ required_error: 'Selecione um Template de Persona.' }),\n  llmProviderConfigId: z.string({ required_error: 'Selecione uma Configuração de LLM.' }),\n  temperature: z.number().min(0).max(2).step(0.1),\n});\n\nexport type AgentInstanceFormData = z.infer<typeof agentInstanceFormSchema>;\n\ninterface AgentInstanceFormProps {\n  onSubmit: (data: AgentInstanceFormData) => Promise<void> | void;\n  initialValues?: Partial<AgentInstanceFormData>;\n  isSubmitting?: boolean;\n  personaTemplates: Pick<PersonaTemplate, 'id' | 'name'>[];\n  llmConfigs: Pick<LLMConfig, 'id' | 'name' | 'providerId'>[];\n}\n\nexport function AgentInstanceForm({\n  onSubmit,\n  initialValues,\n  isSubmitting = false,\n  personaTemplates,\n  llmConfigs,\n}: AgentInstanceFormProps) {\n  const form = useForm<AgentInstanceFormData>({\n    resolver: zodResolver(agentInstanceFormSchema),\n    defaultValues: {\n      agentName: initialValues?.agentName || '',\n      personaTemplateId: initialValues?.personaTemplateId || undefined,\n      llmProviderConfigId: initialValues?.llmProviderConfigId || undefined,\n      temperature: initialValues?.temperature ?? 0.7, // Default to 0.7 if not provided\n    },\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"agentName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nome da Instância do Agente (Opcional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ex: MeuCoderQA, AgenteDeRefatoracao\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Um nome customizado para esta instância específica. Se vazio, um nome será gerado.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"personaTemplateId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Template de Persona</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um template de persona\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {personaTemplates.map(template => (\n                    <SelectItem key={template.id} value={template.id}>\n                      {template.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormDescription>Define o comportamento, papel e objetivos base do agente.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"llmProviderConfigId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Configuração do Provedor LLM</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione uma configuração LLM\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {llmConfigs.map(config => (\n                    <SelectItem key={config.id} value={config.id}>\n                      {config.name} ({config.providerId})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormDescription>Define qual modelo de linguagem e API Key o agente utilizará.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"temperature\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Temperatura</FormLabel>\n              <div className=\"flex items-center gap-4\">\n                <FormControl>\n                   <Slider\n                    min={0}\n                    max={2}\n                    step={0.1}\n                    defaultValue={[field.value]}\n                    onValueChange={(value) => field.onChange(value[0])}\n                    className=\"flex-grow\"\n                  />\n                </FormControl>\n                <span className=\"text-sm font-mono w-10 text-right\">{field.value.toFixed(1)}</span>\n              </div>\n              <FormDescription>\n                Controla a aleatoriedade das respostas do LLM. Valores mais baixos são mais determinísticos. (0.0 - 2.0)\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end pt-2\">\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? 'Criando Agente...' : (initialValues?.agentName ? 'Atualizar Agente' : 'Criar Agente')}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/agent/components/AgentInstanceListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ChatWindow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleInputChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFormSubmit' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":46,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Info, Bot, Hash, MessageSquare } from 'lucide-react'; // Paperclip and Send are now in MessageInput\nimport React from 'react';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\n\nimport { MessageInput } from './MessageInput'; // Import MessageInput\nimport { ChatMessage } from './MessageItem';\nimport { MessageList } from './MessageList';\n\n// Interface para a conversa, pode ser mais detalhada se necessário\ninterface Conversation {\n  id: string;\n  name: string;\n  type: 'dm' | 'channel';\n  avatarUrl?: string;\n  participants?: number; // Para canais\n}\n\ninterface ChatWindowProps {\n  conversation: Conversation | null;\n  messages: ChatMessage[]; // Usar ChatMessage de MessageItem\n  onSendMessage: (content: string) => void;\n  isLoading?: boolean;\n  currentUserId: string; // Necessário para MessageList e MessageItem\n}\n\nexport function ChatWindow({ conversation, messages, onSendMessage, isLoading, currentUserId }: ChatWindowProps) {\n  const [inputValue, setInputValue] = React.useState('');\n\n  if (!conversation) {\n    return (\n      <div className=\"flex-1 flex flex-col items-center justify-center p-4 bg-slate-100 dark:bg-slate-800/30\">\n         <MessageSquare className=\"h-16 w-16 text-slate-400 dark:text-slate-500 mb-4\" />\n        <h2 className=\"text-xl font-semibold text-slate-700 dark:text-slate-200\">Bem-vindo ao Chat</h2>\n        <p className=\"text-slate-500 dark:text-slate-400\">\n          Selecione uma conversa na barra lateral para começar.\n        </p>\n      </div>\n    );\n  }\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (inputValue.trim()) {\n      onSendMessage(inputValue.trim());\n      setInputValue('');\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <header className=\"p-3 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 flex items-center justify-between flex-shrink-0\">\n        <div className=\"flex items-center space-x-2\">\n          {conversation.type === 'dm' ? (\n            conversation.avatarUrl ? (\n              <img src={conversation.avatarUrl} alt={conversation.name} className=\"h-7 w-7 rounded-full\" />\n            ) : (\n              <Bot className=\"h-6 w-6 text-slate-500\" />\n            )\n          ) : (\n            <Hash className=\"h-5 w-5 text-slate-500\" />\n          )}\n          <h2 className=\"text-lg font-semibold text-slate-800 dark:text-slate-100 truncate\">\n            {conversation.name}\n          </h2>\n          {conversation.type === 'channel' && conversation.participants && (\n            <span className=\"text-xs text-slate-500 dark:text-slate-400\">({conversation.participants} membros)</span>\n          )}\n        </div>\n        <Button variant=\"ghost\" size=\"icon\" aria-label=\"Detalhes da Conversa\">\n          <Info className=\"h-5 w-5 text-slate-500 dark:text-slate-400\" />\n        </Button>\n      </header>\n\n      {/* Message List Area */}\n      <div className=\"flex-1 p-4 overflow-y-auto bg-slate-100 dark:bg-slate-800/30\">\n        <MessageList messages={messages} isLoading={isLoading} currentUserId={currentUserId} />\n      </div>\n\n      {/* Message Input Area */}\n      <MessageInput onSendMessage={onSendMessage} isLoading={isLoading} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/ConversationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/chat/components/MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigForm.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'LLMConfigForm' has too many lines (109). Maximum allowed is 100.","line":62,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":178,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { zodResolver } from '@hookform/resolvers/zod';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'sonner'; // Assuming sonner is used for toasts\nimport { z } from 'zod';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/presentation/ui/components/ui/form';\nimport { Input } from '@/presentation/ui/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/presentation/ui/components/ui/select';\n\n// Schema for form validation using Zod\nconst llmConfigSchema = z.object({\n  name: z.string().min(1, 'O nome da configuração é obrigatório.'),\n  providerId: z.enum(['openai', 'deepseek', 'ollama'], { // Added ollama as an example\n    required_error: 'Selecione um provedor LLM.',\n  }),\n  apiKey: z.string().optional(), // API Key is optional for local LLMs like Ollama\n  baseUrl: z.string().url('Insira uma URL válida.').optional().or(z.literal('')), // Optional and can be empty\n}).superRefine((data, ctx) => {\n  // API Key is required if provider is not 'ollama' (or other local providers)\n  if (data.providerId !== 'ollama' && !data.apiKey) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: 'A Chave de API é obrigatória para este provedor.',\n      path: ['apiKey'],\n    });\n  }\n  // Base URL is required if provider is 'ollama'\n  if (data.providerId === 'ollama' && (!data.baseUrl || data.baseUrl.trim() === '')) {\n     ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: 'A URL Base é obrigatória para o provedor Ollama.',\n      path: ['baseUrl'],\n    });\n  }\n});\n\nexport type LLMConfigFormData = z.infer<typeof llmConfigSchema>;\n\ninterface LLMConfigFormProps {\n  onSubmit: (data: LLMConfigFormData) => Promise<void> | void;\n  initialValues?: Partial<LLMConfigFormData>;\n  isSubmitting?: boolean; // Optional prop to indicate submission state\n}\n\nconst supportedProviders = [\n  { id: 'openai', name: 'OpenAI (GPT-3.5, GPT-4, etc.)' },\n  { id: 'deepseek', name: 'DeepSeek Coder' },\n  { id: 'ollama', name: 'Ollama (Local LLMs)' },\n  // Add more providers as they are supported\n];\n\nexport function LLMConfigForm({ onSubmit, initialValues, isSubmitting }: LLMConfigFormProps) {\n  const form = useForm<LLMConfigFormData>({\n    resolver: zodResolver(llmConfigSchema),\n    defaultValues: {\n      name: initialValues?.name || '',\n      providerId: initialValues?.providerId || undefined, // Let placeholder show\n      apiKey: initialValues?.apiKey || '',\n      baseUrl: initialValues?.baseUrl || '',\n    },\n  });\n\n  const watchedProvider = form.watch('providerId');\n\n  const handleFormSubmit = async (data: LLMConfigFormData) => {\n    try {\n      await onSubmit(data);\n      // Toast notification for success can be handled by the parent page\n      // or here if a generic success message is desired.\n    } catch (error) {\n      console.error(\"Error submitting LLM config form:\", error);\n      toast.error(\"Ocorreu um erro ao salvar a configuração. Tente novamente.\");\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nome da Configuração</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ex: Meu OpenAI Pessoal, Ollama Local\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Um nome amigável para identificar esta configuração LLM.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"providerId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Provedor LLM</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um provedor\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {supportedProviders.map(provider => (\n                    <SelectItem key={provider.id} value={provider.id}>\n                      {provider.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                Escolha o serviço de LLM que você deseja configurar.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {watchedProvider !== 'ollama' && ( // Only show API Key if not Ollama\n          <FormField\n            control={form.control}\n            name=\"apiKey\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Chave de API (API Key)</FormLabel>\n                <FormControl>\n                  <Input type=\"password\" placeholder=\"sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" {...field} />\n                </FormControl>\n                <FormDescription>\n                  Sua chave de API para o provedor selecionado.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        )}\n\n        <FormField\n          control={form.control}\n          name=\"baseUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>URL Base (Opcional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ex: https://api.example.com/v1 (para proxies ou Ollama)\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Se você estiver usando um proxy, um endpoint auto-hospedado (como Ollama: http://localhost:11434),\n                ou um provedor compatível com API OpenAI, insira a URL base aqui.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex justify-end pt-4\">\n          <Button type=\"submit\" disabled={isSubmitting || !form.formState.isDirty}>\n            {isSubmitting ? 'Salvando...' : (initialValues?.name ? 'Atualizar Configuração' : 'Salvar Configuração')}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/llm/components/LLMConfigListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/InitialConfigStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/OnboardingWizard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/PersonaList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/onboarding/components/WelcomeStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateForm.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'PersonaTemplateForm' has too many lines (142). Maximum allowed is 100.","line":53,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":206,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { zodResolver } from '@hookform/resolvers/zod';\nimport { X } from 'lucide-react';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { Badge } from '@/presentation/ui/components/ui/badge';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/presentation/ui/components/ui/form';\nimport { Input } from '@/presentation/ui/components/ui/input';\nimport { Textarea } from '@/presentation/ui/components/ui/textarea';\n// Para um multi-select mais robusto, poderia usar ShadCN Combobox com modo múltiplo,\n// ou uma lib como react-select. Por simplicidade, faremos um input de texto para tools.\n// import { Checkbox } from \"@/presentation/ui/components/ui/checkbox\" // Exemplo se fosse usar checkboxes\n\n// Lista de ferramentas disponíveis (exemplo, poderia vir de uma config ou API)\nconst AVAILABLE_TOOLS = [\n  { id: 'filesystem', label: 'File System (Leitura/Escrita)' },\n  { id: 'terminal', label: 'Terminal (Executar Comandos)' },\n  { id: 'codeEditor', label: 'Editor de Código (Visualizar/Modificar)' },\n  { id: 'search', label: 'Busca Web/Local' },\n  { id: 'testRunner', label: 'Executor de Testes' },\n  { id: 'issueTracker', label: 'Rastreador de Issues' },\n  { id: 'browserDevTools', label: 'Ferramentas de Desenvolvedor do Navegador' },\n  { id: 'taskManager', label: 'Gerenciador de Tarefas (Interno)' },\n  // Adicionar mais ferramentas conforme necessário\n];\n\nconst personaTemplateFormSchema = z.object({\n  name: z.string().min(3, 'Nome deve ter ao menos 3 caracteres.').max(100, 'Nome muito longo.'),\n  role: z.string().min(10, 'Papel deve ter ao menos 10 caracteres.').max(500, 'Papel muito longo.'),\n  goal: z.string().min(10, 'Objetivo deve ter ao menos 10 caracteres.').max(1000, 'Objetivo muito longo.'),\n  backstory: z.string().max(2000, 'Backstory muito longo.').optional(),\n  toolNames: z.array(z.string()).optional(), // Simples array de strings por agora\n});\n\nexport type PersonaTemplateFormData = z.infer<typeof personaTemplateFormSchema>;\n\ninterface PersonaTemplateFormProps {\n  onSubmit: (data: PersonaTemplateFormData) => Promise<void> | void;\n  initialValues?: Partial<PersonaTemplateFormData>;\n  isSubmitting?: boolean;\n}\n\nexport function PersonaTemplateForm({\n  onSubmit,\n  initialValues,\n  isSubmitting = false,\n}: PersonaTemplateFormProps) {\n  const form = useForm<PersonaTemplateFormData>({\n    resolver: zodResolver(personaTemplateFormSchema),\n    defaultValues: {\n      name: initialValues?.name || '',\n      role: initialValues?.role || '',\n      goal: initialValues?.goal || '',\n      backstory: initialValues?.backstory || '',\n      toolNames: initialValues?.toolNames || [],\n    },\n  });\n\n  // Estado local para gerenciar o input da ferramenta atual\n  const [currentToolInput, setCurrentToolInput] = React.useState('');\n\n  const handleAddTool = () => {\n    const toolValue = currentToolInput.trim();\n    if (toolValue && !form.getValues('toolNames')?.includes(toolValue)) {\n      const currentTools = form.getValues('toolNames') || [];\n      form.setValue('toolNames', [...currentTools, toolValue], { shouldValidate: true, shouldDirty: true });\n      setCurrentToolInput('');\n    }\n  };\n\n  const handleRemoveTool = (toolToRemove: string) => {\n    const currentTools = form.getValues('toolNames') || [];\n    form.setValue('toolNames', currentTools.filter(tool => tool !== toolToRemove), { shouldValidate: true, shouldDirty: true });\n  };\n\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nome do Template</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ex: Desenvolvedor Python Sênior\" {...field} />\n              </FormControl>\n              <FormDescription>Um nome único e descritivo para este template de persona.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"role\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Papel (Role)</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Descreva o papel principal desta persona. Ex: 'Um engenheiro de software especializado em...' \" {...field} className=\"min-h-[80px]\" />\n              </FormControl>\n              <FormDescription>Qual é a função ou especialidade principal desta persona?</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"goal\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Objetivo Principal (Goal)</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Defina o objetivo primário que esta persona deve alcançar. Ex: 'Desenvolver e manter APIs robustas e escaláveis.' \" {...field} className=\"min-h-[100px]\" />\n              </FormControl>\n              <FormDescription>Qual é a meta ou resultado principal esperado das ações desta persona?</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"backstory\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Backstory / Contexto (Opcional)</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Forneça um breve histórico ou contexto para esta persona, se relevante. Ex: 'Trabalhou em X empresas, especialista em Y tecnologias...' \" {...field} className=\"min-h-[100px]\" />\n              </FormControl>\n              <FormDescription>Informações adicionais que ajudam a definir a personalidade e o conhecimento da persona.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Gerenciamento de Ferramentas (ToolNames) - Versão Simplificada */}\n        <FormItem>\n          <FormLabel>Ferramentas Permitidas</FormLabel>\n          <div className=\"flex items-center gap-2\">\n            <Input\n              placeholder=\"Digite o nome de uma ferramenta (ex: filesystem)\"\n              value={currentToolInput}\n              onChange={(event) => setCurrentToolInput(event.target.value)}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter' && currentToolInput.trim() !== '') {\n                  event.preventDefault();\n                  handleAddTool();\n                }\n              }}\n              className=\"flex-grow\"\n            />\n            <Button type=\"button\" variant=\"outline\" onClick={handleAddTool} disabled={!currentToolInput.trim()}>\n              Adicionar\n            </Button>\n          </div>\n          <FormDescription>\n            Liste as ferramentas que esta persona poderá utilizar (pressione Enter ou clique Adicionar).\n            Exemplos: {AVAILABLE_TOOLS.slice(0,3).map(tool => tool.id).join(', ')}...\n          </FormDescription>\n          <Controller\n            control={form.control}\n            name=\"toolNames\"\n            render={({ field }) => (\n              <div className=\"mt-2 space-x-2 space-y-2\">\n                {field.value?.map((tool) => (\n                  <Badge key={tool} variant=\"secondary\" className=\"whitespace-nowrap\">\n                    {tool}\n                    <button\n                      type=\"button\"\n                      className=\"ml-1.5 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                      onClick={() => handleRemoveTool(tool)}\n                    >\n                      <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n            )}\n          />\n          <FormMessage />\n        </FormItem>\n\n\n        <div className=\"flex justify-end pt-2\">\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? 'Salvando Template...' : (initialValues?.name ? 'Atualizar Template' : 'Salvar Template')}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/persona/components/PersonaTemplateListItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FolderCog' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":98,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":107},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TerminalSquare' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":109,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":123},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SearchCode' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":125,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":135},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TestTubeDiagonal' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":137,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":153},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bug' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":155,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":158},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Palette' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":160,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":167},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ListChecks' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":169,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":179},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Presentation' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":181,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":193},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Camera' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":195,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":201},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'PersonaTemplateListItem' has too many lines (107). Maximum allowed is 100.","line":54,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":160,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router';\nimport { UserSquare, Edit3, Trash2, MoreVertical, Settings, Zap, Brain, MessageSquare, BookText, FolderCog, TerminalSquare, SearchCode, TestTubeDiagonal, Bug, Palette, ListChecks, Presentation, Camera } from 'lucide-react'; // Added missing icons\nimport React from 'react';\n\nimport { Badge } from '@/presentation/ui/components/ui/badge';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/presentation/ui/components/ui/dropdown-menu';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/presentation/ui/components/ui/tooltip';\n\n\nexport interface PersonaTemplate {\n  id: string;\n  name: string;\n  role: string;\n  goal: string;\n  backstory?: string;\n  toolNames?: string[]; // List of tool names this persona can use\n}\n\ninterface PersonaTemplateListItemProps {\n  template: PersonaTemplate;\n  onEdit?: (templateId: string) => void;\n  onDelete?: (templateId: string) => void;\n  onCreateAgent?: (templateId: string) => void; // Action to create an agent from this template\n}\n\n// A simple map for tool icons (extend as needed)\nconst toolIconMap: Record<string, React.ElementType> = {\n  filesystem: Settings,\n  terminal: Settings,\n  codeEditor: Edit3, // Was 'code-editor'\n  search: Settings,\n  testRunner: Zap, // Was 'test-runner'\n  issueTracker: Settings, // Was 'issue-tracker'\n  browserDevTools: Settings, // Was 'browser-dev-tools'\n  taskManager: Settings, // Was 'task-manager'\n  ganttChart: Settings, // Was 'gantt-chart'\n  communicationTools: MessageSquare, // Was 'communication-tools'\n  markdownEditor: Edit3, // Was 'markdown-editor'\n  documentationGenerator: BookText, // Was 'documentation-generator'\n  screenshotTool: Settings, // Was 'screenshot-tool'\n  default: Brain,\n};\n// Removed eslint-disable comments\n\nexport function PersonaTemplateListItem({ template, onEdit, onDelete, onCreateAgent }: PersonaTemplateListItemProps) {\n  return (\n    <Card className=\"flex flex-col h-full hover:shadow-lg transition-shadow duration-200\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <UserSquare className=\"h-10 w-10 text-sky-500 dark:text-sky-400\" />\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7 data-[state=open]:bg-slate-100 dark:data-[state=open]:bg-slate-800\">\n                <MoreVertical className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Mais opções</span>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {onCreateAgent && (\n                <DropdownMenuItem onClick={() => onCreateAgent(template.id)}>\n                  <Zap className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                  Criar Agente com este Template\n                </DropdownMenuItem>\n              )}\n              {onEdit && (\n                <DropdownMenuItem onClick={() => onEdit(template.id)}>\n                  <Edit3 className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                  Editar Template\n                </DropdownMenuItem>\n              )}\n              {onDelete && (\n                <>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    className=\"text-red-600 dark:text-red-500 focus:text-red-600 dark:focus:text-red-500 focus:bg-red-50 dark:focus:bg-red-900/50\"\n                    onClick={() => onDelete(template.id)}\n                  >\n                    <Trash2 className=\"mr-2 h-3.5 w-3.5\" />\n                    Excluir Template\n                  </DropdownMenuItem>\n                </>\n              )}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        <CardTitle className=\"text-lg truncate\" title={template.name}>\n          <Link to=\"/personas/$templateId\" params={{ templateId: template.id }} className=\"hover:underline\">\n            {template.name}\n          </Link>\n        </CardTitle>\n        <CardDescription className=\"text-xs h-10 line-clamp-2\" title={template.role}>\n          Papel: {template.role}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-grow pb-3 space-y-2\">\n        <div>\n          <h4 className=\"text-xs font-semibold text-slate-600 dark:text-slate-400 mb-0.5\">Objetivo Principal:</h4>\n          <p className=\"text-xs text-slate-500 dark:text-slate-400 line-clamp-3\" title={template.goal}>\n            {template.goal}\n          </p>\n        </div>\n        {template.toolNames && template.toolNames.length > 0 && (\n          <div>\n            <h4 className=\"text-xs font-semibold text-slate-600 dark:text-slate-400 mb-1\">Ferramentas:</h4>\n            <div className=\"flex flex-wrap gap-1.5\">\n              <TooltipProvider delayDuration={100}>\n                {template.toolNames.slice(0, 5).map(toolName => {\n                  const lookupKey = toolName.replace(/-/g, ''); // Normalize toolName from data\n                  const IconComponent = toolIconMap[lookupKey] || toolIconMap.default; // Use normalized key for lookup\n                  return (\n                    <Tooltip key={toolName}>\n                      <TooltipTrigger asChild>\n                        <Badge variant=\"secondary\" className=\"px-1.5 py-0.5 text-xs\">\n                          <IconComponent className=\"h-3 w-3 mr-1 opacity-70\" />\n                          {toolName}\n                        </Badge>\n                      </TooltipTrigger>\n                      <TooltipContent className=\"text-xs p-1\">\n                        {toolName}\n                      </TooltipContent>\n                    </Tooltip>\n                  );\n                })}\n                {template.toolNames.length > 5 && (\n                   <Tooltip>\n                      <TooltipTrigger asChild>\n                        <Badge variant=\"outline\" className=\"px-1.5 py-0.5 text-xs\">\n                          +{template.toolNames.length - 5} mais\n                        </Badge>\n                      </TooltipTrigger>\n                      <TooltipContent className=\"text-xs p-1\">\n                        {template.toolNames.slice(5).join(', ')}\n                      </TooltipContent>\n                    </Tooltip>\n                )}\n              </TooltipProvider>\n            </div>\n          </div>\n        )}\n      </CardContent>\n      <Separator />\n      <CardFooter className=\"p-3\">\n        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n           <Link to=\"/personas/$templateId\" params={{ templateId: template.id }}>\n            Ver Detalhes / Editar\n          </Link>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectListItem.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ProjectListItem' has too many lines (104). Maximum allowed is 100.","line":44,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":153,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router';\nimport { Briefcase, MoreHorizontal, Trash2, Edit3, PlayCircle, PauseCircle } from 'lucide-react'; // Added Play/Pause\nimport React from 'react';\n\nimport { Badge } from '@/presentation/ui/components/ui/badge';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/presentation/ui/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/presentation/ui/components/ui/dropdown-menu';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\n\nexport interface Project {\n  id: string;\n  name: string;\n  description: string;\n  lastActivity: string;\n  status: 'active' | 'paused' | 'planning' | 'completed' | 'archived';\n  agentCount: number;\n  taskCount: number;\n  // imageUrl?: string; // Optional image for the project card\n}\n\ninterface ProjectListItemProps {\n  project: Project;\n  viewMode: 'grid' | 'list';\n  onDelete?: (projectId: string) => void; // Optional delete handler\n  onEdit?: (projectId: string) => void;   // Optional edit handler\n  onToggleStatus?: (projectId: string, currentStatus: Project['status']) => void; // Optional status toggle\n}\n\nconst statusMap: Record<Project['status'], { label: string; color: string; icon?: React.ElementType }> = {\n  active: { label: 'Ativo', color: 'bg-green-500 dark:bg-green-400' },\n  paused: { label: 'Pausado', color: 'bg-yellow-500 dark:bg-yellow-400' },\n  planning: { label: 'Planejamento', color: 'bg-blue-500 dark:bg-blue-400' },\n  completed: { label: 'Concluído', color: 'bg-slate-500 dark:bg-slate-400' },\n  archived: { label: 'Arquivado', color: 'bg-slate-700 dark:bg-slate-600' },\n};\n\nexport function ProjectListItem({ project, viewMode, onDelete, onEdit, onToggleStatus }: ProjectListItemProps) {\n  const projectStatus = statusMap[project.status] || statusMap.planning;\n\n  const handleToggleStatus = (event: React.MouseEvent) => {\n    event.preventDefault(); // Prevent link navigation if button is inside a Link\n    event.stopPropagation();\n    onToggleStatus?.(project.id, project.status);\n  }\n\n  const projectActions = (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7 data-[state=open]:bg-slate-100 dark:data-[state=open]:bg-slate-800\"\n          onClick={(event) => { event.preventDefault(); event.stopPropagation(); }} // Prevent card click\n        >\n          <MoreHorizontal className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Mais opções</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" onClick={(event) => { event.preventDefault(); event.stopPropagation(); }}>\n        {onEdit && <DropdownMenuItem onClick={() => onEdit(project.id)}>\n          <Edit3 className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Editar\n        </DropdownMenuItem>}\n        {project.status !== 'completed' && project.status !== 'archived' && onToggleStatus && (\n          <DropdownMenuItem onClick={handleToggleStatus}>\n            {project.status === 'active' ? <PauseCircle className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" /> : <PlayCircle className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />}\n            {project.status === 'active' ? 'Pausar Projeto' : 'Ativar Projeto'}\n          </DropdownMenuItem>\n        )}\n        <DropdownMenuSeparator />\n        {onDelete && <DropdownMenuItem className=\"text-red-600 dark:text-red-500 focus:text-red-600 dark:focus:text-red-500 focus:bg-red-50 dark:focus:bg-red-900/50\" onClick={() => onDelete(project.id)}>\n          <Trash2 className=\"mr-2 h-3.5 w-3.5\" />\n          Excluir\n        </DropdownMenuItem>}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n\n\n  if (viewMode === 'list') {\n    return (\n      <Link to=\"/projects/$projectId\" params={{ projectId: project.id }} className=\"block hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors rounded-lg\">\n        <div className=\"flex items-center justify-between p-3 sm:p-4 border-b border-slate-200 dark:border-slate-700\">\n          <div className=\"flex items-center space-x-3 sm:space-x-4 flex-1 min-w-0\">\n            <div className={`p-2 rounded-md hidden sm:block ${projectStatus.color} opacity-20`}>\n               <Briefcase className={`h-5 w-5 ${projectStatus.color.replace('bg-', 'text-')}`} />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-semibold text-slate-800 dark:text-slate-100 truncate\" title={project.name}>\n                {project.name}\n              </p>\n              <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\" title={project.description}>\n                {project.description || \"Sem descrição\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"hidden md:flex items-center space-x-4 text-xs text-slate-500 dark:text-slate-400 mx-4\">\n            <div>Agentes: {project.agentCount}</div>\n            <div>Tarefas: {project.taskCount}</div>\n          </div>\n          <div className=\"flex items-center space-x-2 flex-shrink-0\">\n             <Badge style={{ backgroundColor: projectStatus.color }} className=\"text-xs text-white dark:text-black font-medium\">\n                {projectStatus.label}\n             </Badge>\n            {projectActions}\n          </div>\n        </div>\n      </Link>\n    );\n  }\n\n  // Grid View (Card)\n  return (\n    <Card className=\"flex flex-col h-full hover:shadow-lg transition-shadow duration-200\">\n      <Link to=\"/projects/$projectId\" params={{ projectId: project.id }} className=\"flex flex-col flex-grow\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className={`p-2 rounded-md ${projectStatus.color} opacity-20`}>\n               <Briefcase className={`h-6 w-6 ${projectStatus.color.replace('bg-', 'text-')}`} />\n            </div>\n            {/* Placeholder for project image/icon if available */}\n            {/* {project.imageUrl ? <img src={project.imageUrl} alt={project.name} className=\"w-12 h-12 rounded-lg object-cover\"/> : <Briefcase className=\"w-10 h-10 text-slate-400\" />} */}\n            <Badge style={{ backgroundColor: projectStatus.color }} className=\"text-xs text-white dark:text-black font-medium\">\n              {projectStatus.label}\n            </Badge>\n          </div>\n          <CardTitle className=\"mt-3 text-lg truncate\" title={project.name}>{project.name}</CardTitle>\n          <CardDescription className=\"text-xs h-8 line-clamp-2\" title={project.description}>\n            {project.description || \"Sem descrição\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex-grow pb-3\">\n          {/* Could add more info here like key members, tech stack icons, etc. */}\n           <div className=\"text-xs text-slate-500 dark:text-slate-400 space-y-1\">\n            <p>Agentes: <span className=\"font-medium text-slate-700 dark:text-slate-300\">{project.agentCount}</span></p>\n            <p>Tarefas Ativas: <span className=\"font-medium text-slate-700 dark:text-slate-300\">{project.taskCount}</span></p>\n          </div>\n        </CardContent>\n      </Link>\n      <Separator className=\"my-0\" />\n      <CardFooter className=\"p-3 flex items-center justify-between\">\n        <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n          Última atividade: {project.lastActivity}\n        </p>\n        {projectActions}\n      </CardFooter>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/ProjectSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exact' is assigned a value but never used. Allowed unused args must match /^_/u.","line":19,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":72}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1204,1207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1204,1207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router'; // Removed useParams\nimport { ChevronRight, LayoutDashboard, CheckSquare, MessageSquare, FileText, Settings2, Hash, Plus } from 'lucide-react'; // Removed Folder\nimport React from 'react';\n\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/presentation/ui/components/ui/collapsible';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\n\n// Helper for NavLink, similar to AppSidebar but might have different base paths or active states\ninterface ProjectNavLinkProps {\n  to: string;\n  basePath: string; // e.g., /projects/$projectId\n  children: React.ReactNode;\n  icon?: React.ElementType;\n  exact?: boolean; // For matching exact paths\n}\n\nfunction ProjectNavLink({ to, basePath, children, icon: iconProp, exact = false }: ProjectNavLinkProps) {\n  const IconComponent = iconProp; // Alias for JSX\n  const fullPath = `${basePath}${to.startsWith('/') ? to : `/${to}`}`;\n  return (\n    <Link\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      to={fullPath as any} // Cast to any for dynamically constructed paths in this mock setup\n      className=\"flex items-center space-x-2 px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-md\"\n      activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50' }}\n    >\n      {IconComponent && <IconComponent className=\"h-4 w-4\" />}\n      <span>{children}</span>\n    </Link>\n  );\n}\n\n\ninterface ProjectSidebarProps {\n  className?: string;\n  // projectId would likely be a prop, or read from router params if this component is route-aware\n}\n\nexport function ProjectSidebar({ className }: ProjectSidebarProps) {\n  // In a real scenario, projectId would come from router params or props.\n  // const params = useParams(); // if used in a route component\n  // const projectId = params.projectId;\n  const projectId = \"{projectId}\"; // Placeholder\n\n  // Placeholder data\n  const project = {\n    name: 'Projeto Alpha',\n    // id: projectId,\n  };\n\n  const channels = [\n    { id: 'general', name: 'general', type: 'text' },\n    { id: 'random', name: 'random', type: 'text' },\n    { id: 'dev-logs', name: 'dev-logs', type: 'text' },\n  ];\n\n  return (\n    // This component itself is the content of a ResizablePanel.\n    // The ResizablePanel, ResizablePanelGroup, and ResizableHandle would be used in a parent layout.\n    <div className={`flex flex-col h-full bg-slate-100 dark:bg-slate-900 ${className || ''}`}>\n      {/* Project Header */}\n      <div className=\"p-4 border-b border-slate-200 dark:border-slate-700\">\n        <h2 className=\"text-lg font-semibold text-slate-800 dark:text-slate-100 truncate\">{project.name}</h2>\n        {/* Could add a dropdown here for project actions */}\n      </div>\n\n      <ScrollArea className=\"flex-grow\">\n        <nav className=\"py-3 px-2\">\n          {/* Project Navigation */}\n          <div className=\"space-y-1 mb-4\">\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/overview\" icon={LayoutDashboard}>Overview</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/tasks\" icon={CheckSquare}>Tasks</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/discussions\" icon={MessageSquare}>Discussions</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/files\" icon={FileText}>Files</ProjectNavLink>\n            <ProjectNavLink basePath={`/projects/${projectId}`} to=\"/settings\" icon={Settings2}>Settings</ProjectNavLink>\n          </div>\n\n          <Separator className=\"my-3\" />\n\n          {/* Channels/Sections List */}\n          <div>\n            <Collapsible defaultOpen>\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-start px-3 py-2 text-sm font-medium\">\n                  <ChevronRight className=\"h-4 w-4 mr-2 transform transition-transform duration-200 group-[data-state=open]:rotate-90\" />\n                  Channels\n                  <Plus className=\"ml-auto h-4 w-4 text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"pt-1 space-y-0.5 ml-3 border-l border-slate-200 dark:border-slate-700 pl-3\">\n                {channels.map(channel => (\n                  <Link\n                    key={channel.id}\n                    to={`/projects/${projectId}/channels/${channel.id}`}\n                    className=\"flex items-center space-x-2 px-2 py-1.5 text-sm text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-800 rounded-md\"\n                    activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium' }}\n                  >\n                    <Hash className=\"h-3.5 w-3.5\" />\n                    <span className=\"truncate\">{channel.name}</span>\n                  </Link>\n                ))}\n                {channels.length === 0 && (\n                  <p className=\"px-2 py-1.5 text-xs text-slate-500 dark:text-slate-400\">No channels.</p>\n                )}\n              </CollapsibleContent>\n            </Collapsible>\n          </div>\n          {/* Add more collapsible sections if needed, e.g., DMs, Apps */}\n        </nav>\n      </ScrollArea>\n\n      {/* Optional Footer for sidebar actions */}\n      {/* <div className=\"p-2 mt-auto border-t border-slate-200 dark:border-slate-700\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start\">Some Action</Button>\n      </div> */}\n    </div>\n  );\n}\n\nexport default ProjectSidebar;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectContextSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useParams' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Parameter name `IconElement` must match one of the following formats: camelCase","line":37,"column":48,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":37,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link, useParams } from '@tanstack/react-router'; // Removed useRouter as it's not used here\nimport { BarChart2, MessageSquareText, BookText, Settings2, Users, ChevronDown, Hash, PlusCircle } from 'lucide-react';\nimport React from 'react';\n// Added Hash and PlusCircle to imports, removed GripVertical as it's not used\n\nimport { Avatar, AvatarFallback } from '@/presentation/ui/components/ui/avatar'; // Removed AvatarImage\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/presentation/ui/components/ui/dropdown-menu\";\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\nimport { cn } from '@/presentation/ui/lib/utils';\n\n\n// Re-using Project type, assuming it's available or defined similarly elsewhere\ninterface Project {\n  id: string;\n  name: string;\n  description?: string;\n  // Add other relevant fields if needed for the sidebar header, e.g., project icon/color\n}\n\ninterface ProjectSectionLinkProps {\n  to: string;\n  label: string;\n  icon: React.ElementType; // Renamed prop from 'icon' to 'IconElement' in implementation\n  projectId: string;\n  // isActive prop removed as Link component handles active state\n}\n\nfunction ProjectSectionLink({ to, label, icon: IconElement, projectId }: ProjectSectionLinkProps) { // Renamed icon to IconElement\n  return (\n    <Link\n      to={to}\n      params={{ projectId }}\n      resetScroll={false}\n      className={cn(\n        \"flex items-center space-x-2.5 px-3 py-2 text-sm rounded-md transition-colors\",\n        \"text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700/60\" // Base classes\n      )}\n      activeProps={{\n        // Classes to apply when the link is active\n        className: \"!bg-sky-100 dark:!bg-sky-700/60 !text-sky-700 dark:!text-sky-200 font-medium\"\n      }}\n    >\n      <IconElement className=\"h-4 w-4 flex-shrink-0\" /> {/* Ensure icon is flex-shrink-0 if space is tight */}\n      <span className=\"truncate\">{label}</span>\n    </Link>\n  );\n}\n\n\ninterface ProjectContextSidebarProps {\n  project: Project | null;\n  className?: string;\n  // currentPath prop removed as it's not used for active state determination anymore\n}\n\nexport function ProjectContextSidebar({ project, className }: ProjectContextSidebarProps) {\n  // const params = useParams({ from: '/(app)/projects/$projectId' }); // Not strictly needed if projectId comes from props\n\n  if (!project) {\n    return ( // Skeleton loader\n      <aside className={cn(\"w-60 flex-shrink-0 bg-slate-100 dark:bg-slate-800/70 p-4 border-r border-slate-200 dark:border-slate-700\", className)}>\n        <div className=\"h-10 bg-slate-200 dark:bg-slate-700 rounded animate-pulse mb-4\"></div>\n        {[...Array(5)].map((_item, index) => ( // Renamed _ to _item, i to index\n          <div key={index} className=\"h-8 bg-slate-200 dark:bg-slate-700 rounded animate-pulse mb-2\"></div>\n        ))}\n      </aside>\n    );\n  }\n\n  // For TanStack Router links from within a layout for a parameterized route (e.g., /projects/$projectId),\n  // relative links like './settings' are often preferred for child routes.\n  // Absolute paths need to include the dynamic params correctly.\n  const sections = [\n    { value: 'overview', label: 'Visão Geral', icon: BarChart2, to: `/projects/${project.id}/` }, // Trailing slash for index\n    { value: 'chat', label: 'Chat/Canais', icon: MessageSquareText, to: `/projects/${project.id}/chat` },\n    { value: 'docs', label: 'Documentação', icon: BookText, to: `/projects/${project.id}/docs` },\n    { value: 'members', label: 'Membros & Agentes', icon: Users, to: `/projects/${project.id}/members` },\n    { value: 'settings', label: 'Configurações', icon: Settings2, to: `/projects/${project.id}/settings` },\n  ];\n\n  // Placeholder for mock channels\n  const mockChannels = [\n    { id: 'ch_geral', name: 'geral', to: `/projects/${project.id}/chat/geral`}, // Example channel route\n    { id: 'ch_dev', name: 'desenvolvimento', to: `/projects/${project.id}/chat/dev`},\n    { id: 'ch_bugs', name: 'bugs', to: `/projects/${project.id}/chat/bugs`},\n  ];\n\n  return (\n    <aside className={cn(\"w-60 flex-shrink-0 bg-slate-100 dark:bg-slate-800/70 flex flex-col border-r border-slate-200 dark:border-slate-700 h-full\", className)}>\n      {/* Project Header */}\n      <div className=\"p-3 border-b border-slate-200 dark:border-slate-700\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"w-full justify-between items-center h-auto px-2 py-1.5\">\n              <div className=\"flex items-center space-x-2 min-w-0\">\n                <Avatar className=\"h-7 w-7 text-xs\">\n                  {/* Placeholder for project image or color-coded avatar */}\n                  <AvatarFallback className=\"bg-sky-500 text-white\">\n                    {project.name.substring(0,1).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"text-sm font-semibold truncate text-slate-800 dark:text-slate-100\" title={project.name}>\n                  {project.name}\n                </span>\n              </div>\n              <ChevronDown className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-52 ml-2\" align=\"start\">\n            <DropdownMenuLabel>Ações do Projeto</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>Convidar Membros (N/I)</DropdownMenuItem>\n            <DropdownMenuItem asChild>\n              {/* Link to project settings using its relative path from $projectId */}\n              <Link to={`/projects/${project.id}/settings`} params={{projectId: project.id}}>Configurações do Projeto</Link>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-red-500 focus:text-red-500 dark:focus:text-red-500\">Arquivar Projeto (N/I)</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <nav className=\"p-2 space-y-1\">\n          {sections.map(section => (\n            <ProjectSectionLink\n              key={section.value}\n              to={section.to}\n              label={section.label}\n              icon={section.icon}\n              projectId={project.id}\n            />\n          ))}\n        </nav>\n\n        {/* Placeholder for other contextual lists like \"Channels\" or \"Active Agents in Project\" */}\n        <div className=\"p-3 mt-2\">\n            <Separator className=\"my-2\"/>\n            <h4 className=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider px-1 mb-1.5 flex justify-between items-center\">\n                <span>Canais</span>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5\" onClick={() => alert(\"Novo canal (N/I)\")}>\n                    <PlusCircle className=\"h-3.5 w-3.5\"/>\n                </Button>\n            </h4>\n            <div className=\"space-y-0.5\">\n                {mockChannels.map(channel => (\n                     <ProjectSectionLink\n                        key={channel.id}\n                        to={channel.to} // Use the defined channel route\n                        label={`# ${channel.name}`}\n                        icon={Hash}\n                        projectId={project.id}\n                    />\n                ))}\n            </div>\n        </div>\n      </ScrollArea>\n\n      {/* Optional Footer for the project sidebar - Removed GripVertical as it's not imported and purpose unclear here */}\n      {/*\n      <div className=\"p-2 border-t border-slate-200 dark:border-slate-700\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start text-xs\">\n            Menu do Projeto\n        </Button>\n      </div>\n      */}\n    </aside>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/project/components/layout/ProjectParticipantsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserProfileForm.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'UserProfileForm' has too many lines (101). Maximum allowed is 100.","line":28,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":142,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { zodResolver } from '@hookform/resolvers/zod';\nimport { UploadCloud, UserCircle } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'sonner';\nimport { z } from 'zod';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/presentation/ui/components/ui/avatar';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/presentation/ui/components/ui/form';\nimport { Input } from '@/presentation/ui/components/ui/input';\n\nimport { UserProfile, UserProfileFormData } from '@/shared/ipc-types'; // Import from shared types\n\ninterface UserProfileFormProps {\n  initialData: UserProfile | null;\n  onSubmit: (data: UserProfileFormData) => Promise<void>;\n  isSubmitting?: boolean;\n}\n\nconst profileFormSchema = z.object({\n  displayName: z.string().min(2, 'O nome deve ter pelo menos 2 caracteres.').max(50, 'O nome não pode exceder 50 caracteres.'),\n  // email: z.string().email('Email inválido.').optional(), // Email usually not editable by user\n  avatarUrl: z.string().url('URL do avatar inválida.').optional().or(z.literal('')), // For URL input, or handle File for upload\n});\n\n\nexport function UserProfileForm({ initialData, onSubmit, isSubmitting }: UserProfileFormProps) {\n  const [currentAvatarPreview, setCurrentAvatarPreview] = useState<string | null>(initialData?.avatarUrl || null);\n\n  const form = useForm<UserProfileFormData>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      displayName: initialData?.displayName || '',\n      avatarUrl: initialData?.avatarUrl || '',\n    },\n  });\n\n  React.useEffect(() => {\n    if (initialData) {\n      form.reset({\n        displayName: initialData.displayName,\n        avatarUrl: initialData.avatarUrl || '',\n      });\n      setCurrentAvatarPreview(initialData.avatarUrl || null);\n    }\n  }, [initialData, form]);\n\n\n  const handleFormSubmit = async (data: UserProfileFormData) => {\n    // If handling file upload, a different logic would be needed here.\n    // For now, assuming avatarUrl is a string URL input.\n    await onSubmit(data);\n  };\n\n  const handleAvatarUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const url = event.target.value;\n    form.setValue('avatarUrl', url, {shouldDirty: true, shouldValidate: true});\n    if (profileFormSchema.shape.avatarUrl.safeParse(url).success) {\n        setCurrentAvatarPreview(url);\n    } else {\n        setCurrentAvatarPreview(initialData?.avatarUrl || null); // Revert if URL is invalid immediately\n    }\n  };\n\n\n  return (\n    <div className=\"space-y-6\">\n        <div className=\"flex flex-col items-center space-y-3\">\n            <Avatar className=\"h-24 w-24 ring-2 ring-offset-2 dark:ring-offset-slate-900 ring-sky-500\">\n              <AvatarImage src={currentAvatarPreview || undefined} alt={form.watch('displayName')} />\n              <AvatarFallback className=\"text-3xl\">\n                {form.watch('displayName')?.substring(0, 1).toUpperCase() || <UserCircle size={40}/>}\n              </AvatarFallback>\n            </Avatar>\n            {/* This button is a placeholder for a more complex file upload UI */}\n            <Button variant=\"outline\" size=\"sm\" className=\"relative\" onClick={() => toast.info(\"Upload de avatar via seleção de arquivo não implementado. Insira uma URL.\")}>\n               <UploadCloud className=\"mr-2 h-4 w-4\" />\n              Alterar Avatar (URL)\n            </Button>\n        </div>\n\n        <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-4\">\n            <FormField\n            control={form.control}\n            name=\"displayName\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Nome de Exibição</FormLabel>\n                <FormControl>\n                    <Input placeholder=\"Seu nome\" {...field} />\n                </FormControl>\n                <FormDescription>Como seu nome aparecerá na aplicação.</FormDescription>\n                <FormMessage />\n                </FormItem>\n            )}\n            />\n\n            {initialData?.email && ( // Only show email if it exists, and make it read-only\n                 <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                    <Input type=\"email\" value={initialData.email} disabled readOnly />\n                    </FormControl>\n                    <FormDescription>Seu endereço de email (não pode ser alterado).</FormDescription>\n                </FormItem>\n            )}\n\n            <FormField\n                control={form.control}\n                name=\"avatarUrl\"\n                render={({ field }) => (\n                    <FormItem>\n                        <FormLabel>URL do Avatar (Opcional)</FormLabel>\n                        <FormControl>\n                            <Input\n                                placeholder=\"https://example.com/avatar.png\"\n                                {...field}\n                                onChange={(event) => {\n                                    field.onChange(event); // RHF internal update\n                                    handleAvatarUrlChange(event); // Custom handler for preview\n                                }}\n                            />\n                        </FormControl>\n                        <FormDescription>Insira a URL para sua imagem de avatar.</FormDescription>\n                        <FormMessage />\n                    </FormItem>\n                )}\n            />\n\n\n            <div className=\"flex justify-end pt-2\">\n            <Button type=\"submit\" disabled={isSubmitting || !form.formState.isDirty}>\n                {isSubmitting ? 'Salvando...' : 'Salvar Alterações'}\n            </Button>\n            </div>\n        </form>\n        </Form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/UserSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Parameter name `Icon` must match one of the following formats: camelCase","line":19,"column":44,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":19,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[973,976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[973,976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"id-length","severity":1,"message":"Identifier name 'n' is too short (< 2).","line":46,"column":42,"nodeType":"Identifier","messageId":"tooShort","endLine":46,"endColumn":43},{"ruleId":"id-length","severity":1,"message":"Identifier name 'n' is too short (< 2).","line":125,"column":62,"nodeType":"Identifier","messageId":"tooShort","endLine":125,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from '@tanstack/react-router';\nimport { User, MessageSquare, Settings, Plus, Users, Search } from 'lucide-react'; // Added Users, Search, Plus\nimport React from 'react';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/presentation/ui/components/ui/avatar';\nimport { Button } from '@/presentation/ui/components/ui/button';\nimport { ScrollArea } from '@/presentation/ui/components/ui/scroll-area';\nimport { Separator } from '@/presentation/ui/components/ui/separator';\n\n\n// Helper for NavLink\ninterface UserNavLinkProps {\n  to: string;\n  children: React.ReactNode;\n  icon?: React.ElementType;\n  // Add other props like exact if needed for active state matching\n}\n\nfunction UserNavLink({ to, children, icon: Icon }: UserNavLinkProps) {\n  // Assuming user-specific routes might be prefixed, e.g., /user/profile\n  // For now, direct paths as passed.\n  const fullPath = to.startsWith('/') ? to : `/user/${to}`;\n\n  return (\n    <Link\n      to={fullPath as any}\n      className=\"flex items-center space-x-3 px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-md\"\n      activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-semibold' }}\n    >\n      {Icon && <Icon className=\"h-4 w-4\" />}\n      <span>{children}</span>\n    </Link>\n  );\n}\n\ninterface DirectMessageItemProps {\n  id: string;\n  name: string;\n  avatarUrl?: string;\n  status?: 'online' | 'offline' | 'idle'; // Example status\n  isActive?: boolean; // Example if this DM is currently active\n}\n\nfunction DirectMessageItem({ id, name, avatarUrl, status = 'offline', isActive }: DirectMessageItemProps) {\n    const basePath = '/user/dms'; // Placeholder base path for DMs\n    const initials = name.split(' ').map(n => n[0]).join('').substring(0,2).toUpperCase();\n    return (\n        <Link\n            to={`${basePath}/${id}`}\n            className={`flex items-center space-x-3 px-3 py-1.5 text-sm group rounded-md\n                        ${isActive\n                            ? 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium'\n                            : 'text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-800'}`}\n            activeProps={{ className: 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-50 font-medium' }}\n        >\n            <Avatar className=\"h-6 w-6 text-xs\">\n                <AvatarImage src={avatarUrl} alt={name} />\n                <AvatarFallback className={`${status === 'online' ? 'border-2 border-green-500' : ''}`}>\n                    {initials}\n                </AvatarFallback>\n            </Avatar>\n            <span className=\"truncate flex-1\">{name}</span>\n            {/* Optional: Unread count or close button on hover */}\n            {/* <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5 opacity-0 group-hover:opacity-100\">X</Button> */}\n        </Link>\n    );\n}\n\n\ninterface UserSidebarProps {\n  className?: string;\n}\n\nexport function UserSidebar({ className }: UserSidebarProps) {\n  // Placeholder data\n  const currentUser = {\n    name: 'Jules Agent',\n    avatarUrl: 'https://github.com/shadcn.png', // Example avatar\n    status: 'online',\n  };\n\n  const directMessages: DirectMessageItemProps[] = [\n    { id: '1', name: 'Alice Wonderland', avatarUrl: 'https://randomuser.me/api/portraits/women/44.jpg', status: 'online', isActive: true },\n    { id: '2', name: 'Bob The Builder', avatarUrl: 'https://randomuser.me/api/portraits/men/44.jpg', status: 'offline' },\n    { id: '3', name: 'Charlie Chaplin', avatarUrl: 'https://randomuser.me/api/portraits/men/46.jpg', status: 'idle' },\n  ];\n\n  return (\n    <div className={`flex flex-col h-full bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 w-60 ${className || ''}`}>\n      {/* Top section (e.g., Search DMs or \"Find or start a conversation\") */}\n      <div className=\"p-3 border-b border-slate-200 dark:border-slate-700\">\n        <Button variant=\"secondary\" className=\"w-full justify-start text-sm text-slate-500 dark:text-slate-400\">\n            <Search className=\"h-4 w-4 mr-2\"/> Find or start a conversation\n        </Button>\n      </div>\n\n      <ScrollArea className=\"flex-grow px-2 py-2\">\n        <nav className=\"space-y-0.5\">\n          <UserNavLink to=\"/friends\" icon={Users}>Friends</UserNavLink>\n          {/* <UserNavLink to=\"/nitro\" icon={Zap}>Nitro</UserNavLink> Placeholder */}\n          <UserNavLink to=\"/shop\" icon={MessageSquare}>Shop</UserNavLink> {/* Using MessageSquare as placeholder */}\n        </nav>\n\n        <div className=\"mt-3 px-1\">\n            <div className=\"flex justify-between items-center mb-1\">\n                <h3 className=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider px-2\">\n                    Direct Messages\n                </h3>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\">\n                    <Plus className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n                    <span className=\"sr-only\">Create DM</span>\n                </Button>\n            </div>\n            <div className=\"space-y-0.5\">\n                {directMessages.map(dm => <DirectMessageItem key={dm.id} {...dm} />)}\n            </div>\n        </div>\n      </ScrollArea>\n\n      {/* User Panel Footer */}\n      <div className=\"p-2 mt-auto border-t border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src={currentUser.avatarUrl} alt={currentUser.name} />\n            <AvatarFallback>{currentUser.name.split(' ').map(n => n[0]).join('').substring(0,2).toUpperCase()}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 truncate\">\n            <p className=\"text-sm font-medium truncate\">{currentUser.name}</p>\n            <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\">{currentUser.status}</p>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\">\n            <Settings className=\"h-4 w-4\" />\n            <span className=\"sr-only\">User Settings</span>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UserSidebar;\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/features/user/components/layout/UserSidebar.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'UserSidebar' has too many lines (166). Maximum allowed is 100.","line":30,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":207,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link, useRouter } from '@tanstack/react-router';\nimport { Settings, UserCircle, MessageSquarePlus, Search, Palette, Bot as BotIcon, Loader2, AlertTriangle } from 'lucide-react';\nimport React, { useState, useMemo } from 'react';\nimport { toast } from 'sonner';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/ui/components/ui/avatar'; // CHANGED\nimport { Button } from '@/ui/components/ui/button'; // CHANGED\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/ui/components/ui/dropdown-menu'; // CHANGED\nimport { Input } from '@/ui/components/ui/input'; // CHANGED\nimport { ScrollArea } from '@/ui/components/ui/scroll-area'; // CHANGED\nimport { useIpcSubscription } from '@/ui/hooks/ipc/useIpcSubscription'; // ALREADY @/ui\nimport { cn } from '@/ui/lib/utils'; // CHANGED\n\nimport { IPC_CHANNELS } from '@/shared/ipc-channels'; // This is correct, as shared is not under /ui\nimport type { DirectMessageItem, GetDMConversationsListResponseData, DMConversationsUpdatedEventPayload } from '@/shared/ipc-types'; // This is correct\n\nconst currentUserMock = {\n  name: 'J. Doe',\n  email: 'j.doe@example.com',\n  avatarUrl: '/avatars/user-main.png',\n};\n\nexport function UserSidebar() {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { data: dmConversations, isLoading, error } = useIpcSubscription<\n    null, \n    GetDMConversationsListResponseData, \n    DMConversationsUpdatedEventPayload \n  >(\n    IPC_CHANNELS.GET_DM_CONVERSATIONS_LIST,\n    null, \n    IPC_CHANNELS.DM_CONVERSATION_UPDATED_EVENT,\n    {\n      getSnapshot: (_prevData, eventPayload) => eventPayload,\n      onError: (err) => {\n        toast.error(`Erro ao carregar DMs: ${err.message}`);\n      }\n    }\n  );\n  \n  const [selectedDmId, setSelectedDmId] = useState<string | null>(() => {\n    const currentPath = typeof window !== 'undefined' ? window.location.pathname : '';\n    const dmPathMatch = currentPath.match(/\\/user\\/dm\\/([^/]+)/);\n    return dmPathMatch ? dmPathMatch[1] : null;\n  });\n\n  React.useEffect(() => {\n    if (dmConversations && dmConversations.length > 0) {\n      const currentSelectionExists = dmConversations.some(dm => dm.id === selectedDmId);\n      if (!currentSelectionExists && !selectedDmId) { \n        setSelectedDmId(dmConversations[0].id);\n      } else if (!currentSelectionExists && selectedDmId) { \n         setSelectedDmId(dmConversations[0].id); \n      }\n    } else if (dmConversations && dmConversations.length === 0) {\n        setSelectedDmId(null); \n    }\n  }, [dmConversations, selectedDmId]);\n\n  const filteredDMs = useMemo(() => {\n    if (!dmConversations) return [];\n    return dmConversations.filter(dm =>\n      dm.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [dmConversations, searchTerm]);\n\n  const handleNewDm = () => {\n    toast.info(\"Funcionalidade 'Nova Mensagem Direta' ainda não implementada.\");\n  };\n  \n  const renderDmList = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex flex-col items-center justify-center p-4 text-xs text-slate-500 dark:text-slate-400 h-full\">\n          <Loader2 className=\"h-6 w-6 animate-spin mb-2\" />\n          Carregando conversas...\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n         <div className=\"flex flex-col items-center justify-center p-4 text-xs text-red-600 dark:text-red-400 h-full\">\n          <AlertTriangle className=\"h-6 w-6 mb-2\" />\n          <span>Erro ao carregar DMs.</span>\n        </div>\n      );\n    }\n    \n    if (!filteredDMs || filteredDMs.length === 0) {\n      return (\n        <p className=\"p-4 text-center text-xs text-slate-500 dark:text-slate-400\">\n          {searchTerm ? \"Nenhuma conversa encontrada.\" : \"Sem mensagens diretas ainda.\"}\n        </p>\n      );\n    }\n\n    return filteredDMs.map((dm: DirectMessageItem) => ( // DirectMessageItem is from shared/ipc-types\n      <Link\n        key={dm.id}\n        to=\"/user/dm/$conversationId\"\n        params={{ conversationId: dm.id }}\n        className={cn(\n          \"flex items-center gap-2.5 p-2 rounded-md text-left transition-colors group\",\n          selectedDmId === dm.id\n            ? \"bg-sky-100 dark:bg-sky-700/60 text-sky-700 dark:text-sky-200 font-medium\"\n            : \"text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700/50\"\n        )}\n        onClick={() => setSelectedDmId(dm.id)}\n        activeProps={{ className: \"!bg-sky-100 dark:!bg-sky-700/60 !text-sky-700 dark:!text-sky-200 font-medium\" }}\n      >\n        <Avatar className=\"h-7 w-7 text-xs flex-shrink-0\">\n          <AvatarImage src={dm.avatarUrl} alt={dm.name} />\n          <AvatarFallback className={cn(\n            \"text-white\",\n            dm.type === 'agent' ? \"bg-emerald-500\" : \"bg-purple-500\"\n          )}>\n            {dm.type === 'agent' ? <BotIcon size={14}/> : dm.name.substring(0,1).toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium truncate group-hover:text-slate-800 dark:group-hover:text-slate-100\">{dm.name}</span>\n            {dm.timestamp && <span className=\"text-[10px] text-slate-400 dark:text-slate-500 flex-shrink-0\">{dm.timestamp}</span>}\n          </div>\n          <div className=\"flex justify-between items-center\">\n            {dm.lastMessage && <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate mt-0.5\">{dm.lastMessage}</p>}\n            {dm.unreadCount && dm.unreadCount > 0 && (\n              <span className=\"ml-auto text-[10px] bg-red-500 text-white font-semibold rounded-full px-1.5 py-0.5 leading-none\">\n                {dm.unreadCount}\n              </span>\n            )}\n          </div>\n        </div>\n      </Link>\n    ));\n  };\n\n  return (\n    <aside className=\"w-72 flex-shrink-0 bg-slate-100 dark:bg-slate-800/70 flex flex-col border-r border-slate-200 dark:border-slate-700 h-full\">\n      <div className=\"p-3 border-b border-slate-200 dark:border-slate-700\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"w-full justify-start items-center h-auto px-1 py-1\">\n              <Avatar className=\"h-8 w-8 mr-2\">\n                <AvatarImage src={currentUserMock.avatarUrl} alt={currentUserMock.name} />\n                <AvatarFallback>{currentUserMock.name.substring(0,1).toUpperCase()}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0 text-left\">\n                <p className=\"text-sm font-semibold truncate text-slate-800 dark:text-slate-100\">{currentUserMock.name}</p>\n                <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\">{currentUserMock.email}</p>\n              </div>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-64 ml-1\" align=\"start\" side=\"bottom\">\n            <DropdownMenuLabel>Minha Conta</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onSelect={() => router.navigate({ to: '/settings/profile' })}>\n              <UserCircle className=\"mr-2 h-4 w-4\" /> Perfil\n            </DropdownMenuItem>\n            <DropdownMenuItem onSelect={() => router.navigate({ to: '/settings/appearance' })}>\n              <Palette className=\"mr-2 h-4 w-4\" /> Aparência\n            </DropdownMenuItem>\n            <DropdownMenuItem onSelect={() => router.navigate({ to: '/settings' })}>\n              <Settings className=\"mr-2 h-4 w-4\" /> Todas Configurações\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-red-500 focus:text-red-500 dark:focus:text-red-500\">\n              Sair (Logout - N/I)\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      <div className=\"p-3 space-y-2 border-b border-slate-200 dark:border-slate-700 flex-shrink-0\">\n        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" onClick={handleNewDm}>\n          <MessageSquarePlus className=\"mr-2 h-4 w-4\" /> Nova Mensagem Direta\n        </Button>\n        <div className=\"relative\">\n          <Search className=\"absolute left-2.5 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-slate-500 dark:text-slate-400\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Buscar DMs ou iniciar nova...\"\n            className=\"h-8 pl-9\"\n            value={searchTerm}\n            onChange={(event) => setSearchTerm(event.target.value)}\n          />\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <nav className=\"p-2 space-y-0.5\">\n          {renderDmList()}\n        </nav>\n      </ScrollArea>\n    </aside>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcMutation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/ipc/useIpcSubscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/hooks/useIPC.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IElectronIPC' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/main.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/ui/routeTree.gen'.","line":7,"column":27,"nodeType":"Literal","endLine":7,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { createRouter, RouterProvider } from '@tanstack/react-router';\nimport React from 'react';\nimport ReactDOMClient from 'react-dom/client';\n\nimport '@/ui/styles/globals.css';\n// import { detectLocale, dynamicActivate } from '@/config/i18n';\nimport { routeTree } from '@/ui/routeTree.gen';\n\n// Declaração de módulo para o TanStack Router (mantida)\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router;\n  }\n}\n\nconst router = createRouter({ routeTree });\n\nconst rootElement = document.getElementById('root');\nif (!rootElement) {\n  throw new Error(\"Failed to find the root element\");\n}\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(app)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(public)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/routes/(public)/home/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'wrappedListener' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":162,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8026,8029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8026,8029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4757,4760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4757,4760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src_refactored/presentation/ui/services/ipc.service.ts\n\nimport { IPCChannel } from '@/shared/ipc-channels';\nimport {\n  ChatSendMessagePayload,\n  ChatStreamEventPayload,\n  ChatStreamTokenPayload,\n  ChatStreamEndPayload,\n} from '@/shared/ipc-chat.types';\nimport { ProjectListItem } from '@/shared/ipc-project.types'; // Assuming this file and type exist\n\nimport { IElectronIPC, IPCResult } from './ipc.types';\n\nconst electronIPC = window.electronIPC;\n\nconst isElectronEnvironment = (): boolean => {\n  return !!electronIPC;\n};\n\n/**\n * A wrapper around Electron's IPC communication, providing typed methods\n * for interacting with the main process from the renderer.\n */\nclass IPCService {\n  private api: IElectronIPC | null = null;\n\n  constructor() {\n    if (isElectronEnvironment() && electronIPC) {\n      this.api = electronIPC;\n    } else {\n      console.warn(\n        '[IPCService] Electron IPC API not found. Using mock implementation. ' +\n        'Ensure preload script is correctly configured and loaded if running in Electron.',\n      );\n      this.api = this.createMockAPI();\n    }\n  }\n\n  private createMockAPI(): IElectronIPC {\n    const mockInvoke = async <T>(channel: string, ...args: unknown[]): Promise<T> => {\n      console.warn(`[MockIPC] Invoke: '${channel}' with args:`, args);\n      if (channel === IPCChannel.CHAT_SEND_MESSAGE) {\n        // Simulate sending message, no specific data needed for void promise\n        return undefined as unknown as T; // Use unknown\n      }\n      // For other channels, you might want to return specific mock data based on the channel\n      // For example: if (channel === 'app:get-version') return { version: 'mock-0.1.0' } as unknown as T;\n      throw new Error(`MockIPC: Channel '${channel}' not implemented for invoke.`);\n    };\n\n    const mockOn = (channel: string, listener: (...args: unknown[]) => void): (() => void) => {\n      console.warn(`[MockIPC] Listener registered for channel: '${channel}'`, listener);\n      if (channel === IPCChannel.CHAT_STREAM_EVENT) {\n        // Simulate some stream events for chat for testing purposes\n        setTimeout(() => listener({ type: 'token', data: 'Hello' } as ChatStreamTokenPayload), 100);\n        setTimeout(() => listener({ type: 'token', data: ' world' } as ChatStreamTokenPayload), 200);\n        setTimeout(() => listener({ type: 'end' } as ChatStreamEndPayload), 300);\n      }\n      // Add more mock event emissions here if needed for other channels during development without Electron\n      return () => {\n        console.warn(`[MockIPC] Listener removed for channel: '${channel}'`, listener);\n      };\n    };\n\n    const mockSend = (channel: string, ...args: unknown[]): void => {\n      console.warn(`[MockIPC] Send: '${channel}' with args:`, args);\n    };\n\n    return {\n      invoke: mockInvoke,\n      on: mockOn,\n      send: mockSend,\n      removeListener: (channel: string, listener: (...args: unknown[]) => void) => { // listener args to unknown[]\n        console.warn(`[MockIPC] removeListener called for '${channel}'`, listener);\n      },\n      removeAllListeners: (channel: string) => {\n        console.warn(`[MockIPC] removeAllListeners called for '${channel}'`);\n      },\n    };\n  }\n\n  public async invoke<TData = unknown>( // Default TData to unknown\n    channel: string,\n    ...args: unknown[] // Args to unknown[]\n  ): Promise<IPCResult<TData>> {\n    if (!this.api) {\n      return { success: false, error: { message: 'IPC API not available' } };\n    }\n    try {\n      // Assuming this.api.invoke is correctly typed or we trust its behavior\n      const result = await this.api.invoke<TData>(channel, ...args); \n      return { success: true, data: result };\n    } catch (error: unknown) { // Catch error as unknown\n      console.error(`[IPCService] Error invoking channel '${channel}':`, error);\n      const typedError = error as Error; // Type assertion\n      return {\n        success: false,\n        error: {\n          message: typedError.message || 'An unknown IPC error occurred',\n          name: typedError.name,\n          stack: typedError.stack,\n        },\n      };\n    }\n  }\n\n  public on(channel: string, listener: (...args: unknown[]) => void): () => void { // listener args to unknown[]\n    if (!this.api || !this.api.on) {\n      console.error('[IPCService] API not initialized for on.');\n      return () => { /* no-op */ };\n    }\n    // The type of listener in IElectronIPC is `(...args: any[]) => void`.\n    // Casting our more specific `(...args: unknown[]) => void` to `any` here is acceptable\n    // as `unknown[]` can be spread into `any[]`.\n    // Ideally, IElectronIPC would also use `unknown[]`.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return this.api.on(channel, listener as (...args: any[]) => void);\n  }\n\n  public send(channel: string, ...args: unknown[]): void { // Args to unknown[]\n    if (!this.api || !this.api.send) {\n      console.error('[IPCService] API not initialized for send.');\n      return;\n    }\n    this.api.send(channel, ...args);\n  }\n\n  // --- Chat Specific Methods ---\n\n  /**\n   * Sends a chat message to the main process.\n   * @param payload The chat message payload.\n   * @returns A promise that resolves with an IPCResult (void on success, or error).\n   *          The main process might return a job ID or some other acknowledgement.\n   *          For now, typed as Promise<IPCResult<void>> assuming no specific data on success.\n   */\n  public async sendChatMessage(payload: ChatSendMessagePayload): Promise<IPCResult<void>> {\n    return this.invoke<void>(IPCChannel.CHAT_SEND_MESSAGE, payload);\n  }\n\n  /**\n   * Subscribes to chat stream events from the main process.\n   * @param listener The callback function to execute when a chat stream event is received.\n   *                 The listener will be called with the ChatStreamEventPayload.\n   * @returns An unsubscribe function.\n   */\n  public onChatStreamEvent(listener: (payload: ChatStreamEventPayload) => void): () => void {\n    // The generic 'on' method's listener signature is (...args: any[]) => void.\n    // The actual data passed by Electron's ipcRenderer.on is (event, ...argsFromMain).\n    // The IElectronIPC interface's 'on' method is expected to be implemented in preload\n    // such that it calls the provided listener with only the relevant data payload(s),\n    // not the 'event' object, or that it expects a listener that can handle the event object.\n    //\n    // If preload does: contextBridge.exposeInMainWorld('electronIPC', { on: (ch, cb) => ipcRenderer.on(ch, (evt, data) => cb(data)) } )\n    // then our listener here will receive `data` as the first arg.\n    //\n    // If preload does: contextBridge.exposeInMainWorld('electronIPC', { on: (ch, cb) => ipcRenderer.on(ch, cb) } )\n    // then our listener here will receive `(event, data)`.\n    //\n    // The current IElectronIPC.on is typed as: (channel: string, listener: (...args: any[]) => void).\n    // To be safe and ensure our typed listener gets the correct payload, we wrap it.\n    const wrappedListener = (_event: unknown, payload: ChatStreamEventPayload) => {\n      // This assumes the main process sends the payload as the first argument after the event.\n      // If the main process sends multiple arguments, this would need to be adjusted.\n      // For chat stream, it's typical to send a single payload object.\n      listener(payload);\n    };\n\n    // If the `this.api.on` is already designed to pass only the payload, then `listener` can be passed directly.\n    // Given the generic nature of `this.api.on`, a wrapper is safer until preload is defined.\n    // However, if `window.electronIPC.on` is defined as `(channel, listener) => ipcRenderer.on(channel, (event, data) => listener(data))`,\n    // then our `listener` here would correctly receive just `data`.\n    // Let's assume the preload script will be written to simplify this for the renderer,\n    // meaning it calls the listener with only the data payload.\n    return this.on(IPCChannel.CHAT_STREAM_EVENT, listener as (...args: any[]) => void);\n  }\n  // --- Project Specific Methods ---\n\n  /**\n   * Fetches the list of projects from the main process.\n   * @returns A promise that resolves with an IPCResult containing ProjectListItem[] or an error.\n   */\n  public async listProjects(): Promise<IPCResult<ProjectListItem[]>> {\n    return this.invoke<ProjectListItem[]>(IPCChannel.PROJECT_LIST_QUERY);\n  }\n}\n\nexport const ipcService = new IPCService();\n","usedDeprecatedRules":[]},{"filePath":"/app/src_refactored/presentation/ui/services/ipc.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]