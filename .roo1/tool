## TOOL USAGE INSTRUCTIONS

When necessary use a tool, Only use ONE tool at a time. After using a tool, WAIT for the user's response before proceeding.

### Available Tools

1. **read_file**
**Purpose**: Reads the content of a file
**Warning**: The file might be large, and you might not see all content
**Parameters**:
1. `path` (required): The file path relative to working directory
2. `start_line` (optional): First line to read (1-based indexing)
3. `end_line` (optional): Last line to read (inclusive)
**Format**:
```plaintext
<read_file>
<path>exact/path/to/file.ext</path>
<start_line>10</start_line>
<end_line>20</end_line>
</read_file>
```

2. **search_files**
**Purpose**: Finds text patterns across multiple files
**Parameters**:
1. `path` (required): Directory to search in
2. `regex` (required): Regular expression pattern to search for
3. `file_pattern` (optional): Glob pattern to filter files (e.g., "*.ts")
**Format**:
```plaintext
<search_files>
<path>src</path>
<regex>searchPattern</regex>
<file_pattern>*.ts</file_pattern>
</search_files>
```

3. **list_files**
**Purpose**: Shows files and folders in a directory
**Parameters**:
1. `path` (required): Directory to list contents for
2. `recursive` (optional): Set to "true" to include subdirectories
**Format**:
```plaintext
<list_files>
<path>src</path>
<recursive>true</recursive>
</list_files>
```

4. **list_code_definition_names**
**Purpose**: Finds code definitions in a directory
**Parameters**:
1. `path` (required): Directory to search in
**Format**:
```plaintext
<list_code_definition_names>
<path>src/core</path>
</list_code_definition_names>
```

5. **write_to_file**
**Purpose**: Creates a new file or replaces an existing file
**Warning**: Always include the COMPLETE file content
**Parameters**:
1. `path` (required): File to create or replace
2. `content` (required): Complete content to write to the file
3. `line_count` (required): Total number of lines in the content
**Format**:
```plaintext
<write_to_file>
<path>src/new-file.ts</path>
<content>
// Complete file content goes here
export function example() {
  return true;
}
</content>
<line_count>5</line_count>
</write_to_file>
```

6. **apply_diff**
**Purpose**: Makes specific changes to parts of a file
**Important**:
    1. You can include multiple search/replace blocks in one diff
    2. Escape special markers with backslash: <`<<<<<< \======= \>`>>>>>>
**Parameters**:
1. `path` (required): File to modify
2. `diff` (required): Contains search and replace blocks
    1. Each block needs:
        1. `:start_line:` and `:end_line:` for the search section
        2. Exact content to find between "-------" and "======="
        3. New content between "=======" and ">>>>>>> REPLACE"
**Format**:
```plaintext
<apply_diff>
<path>src/file.ts</path>
<diff>
<<<<<<< SEARCH
:start_line:10
:end_line:15
-------
// Exact content to find (including spaces)
function oldCode() {
  return true;
}
=======
// New content to replace with
function newCode() {
  return false;
}
>>>>>>> REPLACE
</diff>
</apply_diff>
```

7. **insert_content**
**Purpose**: Adds new content at specific line positions
**Warning**: Content at the specified line will end up below the inserted content
**Parameters**:
1. `path` (required): File to modify
2. `operations` (required): JSON array of insertion operations
    1. Each operation needs:
        1. `start_line`: Line number where content should be inserted
        2. `content`: Text to insert (use \n for newlines)
**Format**:
```plaintext
<insert_content>
<path>src/file.ts</path>
<operations>[
  {
    "start_line": 5,
    "content": "import { newFunction } from './utils';"
  },
  {
    "start_line": 20,
    "content": "// Add this new function\nfunction newFunction() {\n  return true;\n}"
  }
]</operations>
</insert_content>
```

8. **search_and_replace**
**Purpose**: Finds and replaces text in files
**Parameters**:
1. `path` (required): File to modify
2. `operations` (required): JSON array of search/replace operations
    1. Each operation needs:
        1. `search`: Text or pattern to find
        2. `replace`: Text to replace matches with
        3. `start_line` (optional): First line to search in
        4. `end_line` (optional): Last line to search in
        5. `use_regex` (optional): Set to true to use regex
        6. `ignore_case` (optional): Set to true to ignore case
        7. `regex_flags` (optional): Additional regex flags
**Format**:
```plaintext
<search_and_replace>
<path>src/file.ts</path>
<operations>[
  {
    "search": "oldFunction",
    "replace": "newFunction",
    "start_line": 1,
    "end_line": 50
  }
]</operations>
</search_and_replace>
```

9. **execute_command**
**Purpose**: Runs a command in the terminal
**Warning**: NEVER use with `cd` command
**Parameters**:
1. `command` (required): CLI command to execute
2. `cwd` (optional): Working directory for the command
**Format**:
```plaintext
<execute_command>
<command>npm install</command>
<cwd>/path/to/project</cwd>
</execute_command>
```

10. **ask_followup_question**
**Purpose**: Asks the user a specific question
**Parameters**:
    1. `question` (required): Clear, specific question to ask
    2. `follow_up` (required): Contains 2-4 suggested answers
        1. Each `suggest` should be a complete, actionable answer
**Format**:
```plaintext
<ask_followup_question>
<question>What is the preferred naming convention for this project?</question>
<follow_up>
<suggest>camelCase for variables and functions</suggest>
<suggest>PascalCase for classes and components</suggest>
<suggest>snake_case for database fields</suggest>
</follow_up>
</ask_followup_question>
```

11. **attempt_completion**
**Purpose**: Signals that you cannot complete the task
**Warning**: Always document challenges in handoff.md BEFORE using this
**Parameters**:
1. `result` (required): Final explanation of what was done and why the task couldn't be completed
**Format**:
```plaintext
<attempt_completion>
<result>
I've attempted to implement the authentication system but encountered these blockers:

1. The existing code structure doesn't support the required changes
2. There are dependency conflicts between package versions
3. The requested approach would create security vulnerabilities

I've documented these issues in handoff.md with detailed explanations.
</result>
</attempt_completion>
```

12. **new_task**
**Purpose**: Creates a new task for architect or developer
**Warning**: Include ALL necessary context in the message
**Parameters**:
1. `mode` (required): slug of mode for new task
2. `message` (required): Initial task message
**Format**:
```plaintext
<new_task>
<mode>architect</mode>
<message>
Please decide which database technology to use for our user authentication system.

Options:
1. MongoDB
2. PostgreSQL

We need to support 10,000 concurrent users.

Please create an ADR with your decision and implementation path.
</message>
</new_task>
```

### Tool Usage Rules

1. Use only ONE tool per message
2. ALWAYS wait for user confirmation after each tool use
3. When modifying files, ALWAYS provide COMPLETE content
4. For large files, check if you have the complete content before making changes
5. Document challenges in handoff.md before using attempt_completion